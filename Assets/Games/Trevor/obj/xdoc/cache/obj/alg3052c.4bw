id: cs.temp.dll
language: CSharp
name:
  Default: cs.temp.dll
qualifiedName:
  Default: cs.temp.dll
type: Assembly
items:
- id: Global
  language: CSharp
  name:
    CSharp: ''
    VB: ''
  nameWithType:
    CSharp: ''
    VB: ''
  qualifiedName:
    CSharp: ''
    VB: ''
  type: Namespace
  assemblies:
  - cs.temp.dll
  items:
  - id: Global.ParallaxLayer
    commentId: T:Global.ParallaxLayer
    language: CSharp
    name:
      CSharp: ParallaxLayer
      VB: ParallaxLayer
    nameWithType:
      CSharp: ParallaxLayer
      VB: ParallaxLayer
    qualifiedName:
      CSharp: ParallaxLayer
      VB: ParallaxLayer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: ParallaxLayer
      path: ''
      startLine: 2
    syntax:
      content:
        CSharp: 'public class ParallaxLayer : MonoBehaviour'
        VB: Public Class ParallaxLayer Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.ParallaxLayer.parallaxFactor
      commentId: F:Global.ParallaxLayer.parallaxFactor
      language: CSharp
      name:
        CSharp: parallaxFactor
        VB: parallaxFactor
      nameWithType:
        CSharp: ParallaxLayer.parallaxFactor
        VB: ParallaxLayer.parallaxFactor
      qualifiedName:
        CSharp: ParallaxLayer.parallaxFactor
        VB: ParallaxLayer.parallaxFactor
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: parallaxFactor
        path: ''
        startLine: 5
      syntax:
        content:
          CSharp: public float parallaxFactor
          VB: Public parallaxFactor As Single
        return:
          type: System.Single
    - id: Global.ParallaxLayer.Move(System.Single)
      commentId: M:Global.ParallaxLayer.Move(System.Single)
      language: CSharp
      name:
        CSharp: Move(float)
        VB: Move(Single)
      nameWithType:
        CSharp: ParallaxLayer.Move(float)
        VB: ParallaxLayer.Move(Single)
      qualifiedName:
        CSharp: ParallaxLayer.Move(float)
        VB: ParallaxLayer.Move(Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Move
        path: ''
        startLine: 7
      syntax:
        content:
          CSharp: public void Move(float delta)
          VB: Public Sub Move(delta As Single)
        parameters:
        - id: delta
          type: System.Single
      overload: Global.ParallaxLayer.Move*
  - id: Global.DayNightCycle
    commentId: T:Global.DayNightCycle
    language: CSharp
    name:
      CSharp: DayNightCycle
      VB: DayNightCycle
    nameWithType:
      CSharp: DayNightCycle
      VB: DayNightCycle
    qualifiedName:
      CSharp: DayNightCycle
      VB: DayNightCycle
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: DayNightCycle
      path: ''
      startLine: 21
    syntax:
      content:
        CSharp: 'public class DayNightCycle : MonoBehaviour'
        VB: Public Class DayNightCycle Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.DayNightCycle.daySky
      commentId: F:Global.DayNightCycle.daySky
      language: CSharp
      name:
        CSharp: daySky
        VB: daySky
      nameWithType:
        CSharp: DayNightCycle.daySky
        VB: DayNightCycle.daySky
      qualifiedName:
        CSharp: DayNightCycle.daySky
        VB: DayNightCycle.daySky
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: daySky
        path: ''
        startLine: 23
      syntax:
        content:
          CSharp: public SpriteRenderer daySky
          VB: Public daySky As SpriteRenderer
        return:
          type: Global.SpriteRenderer
    - id: Global.DayNightCycle.eveningSky
      commentId: F:Global.DayNightCycle.eveningSky
      language: CSharp
      name:
        CSharp: eveningSky
        VB: eveningSky
      nameWithType:
        CSharp: DayNightCycle.eveningSky
        VB: DayNightCycle.eveningSky
      qualifiedName:
        CSharp: DayNightCycle.eveningSky
        VB: DayNightCycle.eveningSky
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: eveningSky
        path: ''
        startLine: 23
      syntax:
        content:
          CSharp: public SpriteRenderer eveningSky
          VB: Public eveningSky As SpriteRenderer
        return:
          type: Global.SpriteRenderer
    - id: Global.DayNightCycle.nightSky
      commentId: F:Global.DayNightCycle.nightSky
      language: CSharp
      name:
        CSharp: nightSky
        VB: nightSky
      nameWithType:
        CSharp: DayNightCycle.nightSky
        VB: DayNightCycle.nightSky
      qualifiedName:
        CSharp: DayNightCycle.nightSky
        VB: DayNightCycle.nightSky
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: nightSky
        path: ''
        startLine: 23
      syntax:
        content:
          CSharp: public SpriteRenderer nightSky
          VB: Public nightSky As SpriteRenderer
        return:
          type: Global.SpriteRenderer
    - id: Global.DayNightCycle.dayBackClouds
      commentId: F:Global.DayNightCycle.dayBackClouds
      language: CSharp
      name:
        CSharp: dayBackClouds
        VB: dayBackClouds
      nameWithType:
        CSharp: DayNightCycle.dayBackClouds
        VB: DayNightCycle.dayBackClouds
      qualifiedName:
        CSharp: DayNightCycle.dayBackClouds
        VB: DayNightCycle.dayBackClouds
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: dayBackClouds
        path: ''
        startLine: 24
      syntax:
        content:
          CSharp: public SpriteRenderer dayBackClouds
          VB: Public dayBackClouds As SpriteRenderer
        return:
          type: Global.SpriteRenderer
    - id: Global.DayNightCycle.eveningBackClouds
      commentId: F:Global.DayNightCycle.eveningBackClouds
      language: CSharp
      name:
        CSharp: eveningBackClouds
        VB: eveningBackClouds
      nameWithType:
        CSharp: DayNightCycle.eveningBackClouds
        VB: DayNightCycle.eveningBackClouds
      qualifiedName:
        CSharp: DayNightCycle.eveningBackClouds
        VB: DayNightCycle.eveningBackClouds
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: eveningBackClouds
        path: ''
        startLine: 24
      syntax:
        content:
          CSharp: public SpriteRenderer eveningBackClouds
          VB: Public eveningBackClouds As SpriteRenderer
        return:
          type: Global.SpriteRenderer
    - id: Global.DayNightCycle.nightBackClouds
      commentId: F:Global.DayNightCycle.nightBackClouds
      language: CSharp
      name:
        CSharp: nightBackClouds
        VB: nightBackClouds
      nameWithType:
        CSharp: DayNightCycle.nightBackClouds
        VB: DayNightCycle.nightBackClouds
      qualifiedName:
        CSharp: DayNightCycle.nightBackClouds
        VB: DayNightCycle.nightBackClouds
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: nightBackClouds
        path: ''
        startLine: 24
      syntax:
        content:
          CSharp: public SpriteRenderer nightBackClouds
          VB: Public nightBackClouds As SpriteRenderer
        return:
          type: Global.SpriteRenderer
    - id: Global.DayNightCycle.dayFrontClouds
      commentId: F:Global.DayNightCycle.dayFrontClouds
      language: CSharp
      name:
        CSharp: dayFrontClouds
        VB: dayFrontClouds
      nameWithType:
        CSharp: DayNightCycle.dayFrontClouds
        VB: DayNightCycle.dayFrontClouds
      qualifiedName:
        CSharp: DayNightCycle.dayFrontClouds
        VB: DayNightCycle.dayFrontClouds
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: dayFrontClouds
        path: ''
        startLine: 25
      syntax:
        content:
          CSharp: public SpriteRenderer dayFrontClouds
          VB: Public dayFrontClouds As SpriteRenderer
        return:
          type: Global.SpriteRenderer
    - id: Global.DayNightCycle.eveningFrontClouds
      commentId: F:Global.DayNightCycle.eveningFrontClouds
      language: CSharp
      name:
        CSharp: eveningFrontClouds
        VB: eveningFrontClouds
      nameWithType:
        CSharp: DayNightCycle.eveningFrontClouds
        VB: DayNightCycle.eveningFrontClouds
      qualifiedName:
        CSharp: DayNightCycle.eveningFrontClouds
        VB: DayNightCycle.eveningFrontClouds
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: eveningFrontClouds
        path: ''
        startLine: 25
      syntax:
        content:
          CSharp: public SpriteRenderer eveningFrontClouds
          VB: Public eveningFrontClouds As SpriteRenderer
        return:
          type: Global.SpriteRenderer
    - id: Global.DayNightCycle.nightFrontClouds
      commentId: F:Global.DayNightCycle.nightFrontClouds
      language: CSharp
      name:
        CSharp: nightFrontClouds
        VB: nightFrontClouds
      nameWithType:
        CSharp: DayNightCycle.nightFrontClouds
        VB: DayNightCycle.nightFrontClouds
      qualifiedName:
        CSharp: DayNightCycle.nightFrontClouds
        VB: DayNightCycle.nightFrontClouds
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: nightFrontClouds
        path: ''
        startLine: 25
      syntax:
        content:
          CSharp: public SpriteRenderer nightFrontClouds
          VB: Public nightFrontClouds As SpriteRenderer
        return:
          type: Global.SpriteRenderer
    - id: Global.DayNightCycle.transitionDuration
      commentId: F:Global.DayNightCycle.transitionDuration
      language: CSharp
      name:
        CSharp: transitionDuration
        VB: transitionDuration
      nameWithType:
        CSharp: DayNightCycle.transitionDuration
        VB: DayNightCycle.transitionDuration
      qualifiedName:
        CSharp: DayNightCycle.transitionDuration
        VB: DayNightCycle.transitionDuration
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: transitionDuration
        path: ''
        startLine: 27
      syntax:
        content:
          CSharp: public float transitionDuration
          VB: Public transitionDuration As Single
        return:
          type: System.Single
    - id: Global.DayNightCycle.cycleDuration
      commentId: F:Global.DayNightCycle.cycleDuration
      language: CSharp
      name:
        CSharp: cycleDuration
        VB: cycleDuration
      nameWithType:
        CSharp: DayNightCycle.cycleDuration
        VB: DayNightCycle.cycleDuration
      qualifiedName:
        CSharp: DayNightCycle.cycleDuration
        VB: DayNightCycle.cycleDuration
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: cycleDuration
        path: ''
        startLine: 28
      syntax:
        content:
          CSharp: public float cycleDuration
          VB: Public cycleDuration As Single
        return:
          type: System.Single
  - id: Global.ParallaxCamera
    commentId: T:Global.ParallaxCamera
    language: CSharp
    name:
      CSharp: ParallaxCamera
      VB: ParallaxCamera
    nameWithType:
      CSharp: ParallaxCamera
      VB: ParallaxCamera
    qualifiedName:
      CSharp: ParallaxCamera
      VB: ParallaxCamera
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: ParallaxCamera
      path: ''
      startLine: 119
    syntax:
      content:
        CSharp: 'public class ParallaxCamera : MonoBehaviour'
        VB: Public Class ParallaxCamera Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.ParallaxCamera.onCameraTranslate
      commentId: F:Global.ParallaxCamera.onCameraTranslate
      language: CSharp
      name:
        CSharp: onCameraTranslate
        VB: onCameraTranslate
      nameWithType:
        CSharp: ParallaxCamera.onCameraTranslate
        VB: ParallaxCamera.onCameraTranslate
      qualifiedName:
        CSharp: ParallaxCamera.onCameraTranslate
        VB: ParallaxCamera.onCameraTranslate
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: onCameraTranslate
        path: ''
        startLine: 123
      syntax:
        content:
          CSharp: public ParallaxCamera.ParallaxCameraDelegate onCameraTranslate
          VB: Public onCameraTranslate As ParallaxCamera.ParallaxCameraDelegate
        return:
          type: Global.ParallaxCamera.ParallaxCameraDelegate
  - id: Global.ParallaxCamera.ParallaxCameraDelegate
    commentId: T:Global.ParallaxCamera.ParallaxCameraDelegate
    language: CSharp
    name:
      CSharp: ParallaxCamera.ParallaxCameraDelegate
      VB: ParallaxCamera.ParallaxCameraDelegate
    nameWithType:
      CSharp: ParallaxCamera.ParallaxCameraDelegate
      VB: ParallaxCamera.ParallaxCameraDelegate
    qualifiedName:
      CSharp: ParallaxCamera.ParallaxCameraDelegate
      VB: ParallaxCamera.ParallaxCameraDelegate
    type: Delegate
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: ParallaxCameraDelegate
      path: ''
      startLine: 122
    syntax:
      content:
        CSharp: public delegate void ParallaxCamera.ParallaxCameraDelegate(float deltaMovement)
        VB: Public Delegate Sub ParallaxCamera.ParallaxCameraDelegate(deltaMovement As Single)
      parameters:
      - id: deltaMovement
        type: System.Single
    items: []
  - id: Global.ParallaxBackground
    commentId: T:Global.ParallaxBackground
    language: CSharp
    name:
      CSharp: ParallaxBackground
      VB: ParallaxBackground
    nameWithType:
      CSharp: ParallaxBackground
      VB: ParallaxBackground
    qualifiedName:
      CSharp: ParallaxBackground
      VB: ParallaxBackground
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: ParallaxBackground
      path: ''
      startLine: 149
    syntax:
      content:
        CSharp: 'public class ParallaxBackground : MonoBehaviour'
        VB: Public Class ParallaxBackground Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.ParallaxBackground.parallaxCamera
      commentId: F:Global.ParallaxBackground.parallaxCamera
      language: CSharp
      name:
        CSharp: parallaxCamera
        VB: parallaxCamera
      nameWithType:
        CSharp: ParallaxBackground.parallaxCamera
        VB: ParallaxBackground.parallaxCamera
      qualifiedName:
        CSharp: ParallaxBackground.parallaxCamera
        VB: ParallaxBackground.parallaxCamera
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: parallaxCamera
        path: ''
        startLine: 152
      syntax:
        content:
          CSharp: public ParallaxCamera parallaxCamera
          VB: Public parallaxCamera As ParallaxCamera
        return:
          type: Global.ParallaxCamera
  - id: Global.PongScorekeeper
    commentId: T:Global.PongScorekeeper
    language: CSharp
    name:
      CSharp: PongScorekeeper
      VB: PongScorekeeper
    nameWithType:
      CSharp: PongScorekeeper
      VB: PongScorekeeper
    qualifiedName:
      CSharp: PongScorekeeper
      VB: PongScorekeeper
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: PongScorekeeper
      path: ''
      startLine: 193
    syntax:
      content:
        CSharp: 'public class PongScorekeeper : MonoBehaviour'
        VB: Public Class PongScorekeeper Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.PongScorekeeper.player1Score
      commentId: F:Global.PongScorekeeper.player1Score
      language: CSharp
      name:
        CSharp: player1Score
        VB: player1Score
      nameWithType:
        CSharp: PongScorekeeper.player1Score
        VB: PongScorekeeper.player1Score
      qualifiedName:
        CSharp: PongScorekeeper.player1Score
        VB: PongScorekeeper.player1Score
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: player1Score
        path: ''
        startLine: 195
      syntax:
        content:
          CSharp: public TextMeshProUGUI player1Score
          VB: Public player1Score As TextMeshProUGUI
        return:
          type: Global.TextMeshProUGUI
    - id: Global.PongScorekeeper.player2Score
      commentId: F:Global.PongScorekeeper.player2Score
      language: CSharp
      name:
        CSharp: player2Score
        VB: player2Score
      nameWithType:
        CSharp: PongScorekeeper.player2Score
        VB: PongScorekeeper.player2Score
      qualifiedName:
        CSharp: PongScorekeeper.player2Score
        VB: PongScorekeeper.player2Score
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: player2Score
        path: ''
        startLine: 196
      syntax:
        content:
          CSharp: public TextMeshProUGUI player2Score
          VB: Public player2Score As TextMeshProUGUI
        return:
          type: Global.TextMeshProUGUI
  - id: Global.PongBallBehavior
    commentId: T:Global.PongBallBehavior
    language: CSharp
    name:
      CSharp: PongBallBehavior
      VB: PongBallBehavior
    nameWithType:
      CSharp: PongBallBehavior
      VB: PongBallBehavior
    qualifiedName:
      CSharp: PongBallBehavior
      VB: PongBallBehavior
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: PongBallBehavior
      path: ''
      startLine: 208
    syntax:
      content:
        CSharp: 'public class PongBallBehavior : MonoBehaviour'
        VB: Public Class PongBallBehavior Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.PongBallBehavior.score
      commentId: F:Global.PongBallBehavior.score
      language: CSharp
      name:
        CSharp: score
        VB: score
      nameWithType:
        CSharp: PongBallBehavior.score
        VB: PongBallBehavior.score
      qualifiedName:
        CSharp: PongBallBehavior.score
        VB: PongBallBehavior.score
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: score
        path: ''
        startLine: 210
      syntax:
        content:
          CSharp: public static Vector2 score
          VB: Public Shared score As Vector2
        return:
          type: Global.Vector2
    - id: Global.PongBallBehavior.speed
      commentId: F:Global.PongBallBehavior.speed
      language: CSharp
      name:
        CSharp: speed
        VB: speed
      nameWithType:
        CSharp: PongBallBehavior.speed
        VB: PongBallBehavior.speed
      qualifiedName:
        CSharp: PongBallBehavior.speed
        VB: PongBallBehavior.speed
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: speed
        path: ''
        startLine: 212
      syntax:
        content:
          CSharp: public float speed
          VB: Public speed As Single
        return:
          type: System.Single
    - id: Global.PongBallBehavior.speedIncrement
      commentId: F:Global.PongBallBehavior.speedIncrement
      language: CSharp
      name:
        CSharp: speedIncrement
        VB: speedIncrement
      nameWithType:
        CSharp: PongBallBehavior.speedIncrement
        VB: PongBallBehavior.speedIncrement
      qualifiedName:
        CSharp: PongBallBehavior.speedIncrement
        VB: PongBallBehavior.speedIncrement
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: speedIncrement
        path: ''
        startLine: 213
      syntax:
        content:
          CSharp: public float speedIncrement
          VB: Public speedIncrement As Single
        return:
          type: System.Single
    - id: Global.PongBallBehavior.resetDelay
      commentId: F:Global.PongBallBehavior.resetDelay
      language: CSharp
      name:
        CSharp: resetDelay
        VB: resetDelay
      nameWithType:
        CSharp: PongBallBehavior.resetDelay
        VB: PongBallBehavior.resetDelay
      qualifiedName:
        CSharp: PongBallBehavior.resetDelay
        VB: PongBallBehavior.resetDelay
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: resetDelay
        path: ''
        startLine: 214
      syntax:
        content:
          CSharp: public float resetDelay
          VB: Public resetDelay As Single
        return:
          type: System.Single
    - id: Global.PongBallBehavior.IncreaseSpeed
      commentId: M:Global.PongBallBehavior.IncreaseSpeed
      language: CSharp
      name:
        CSharp: IncreaseSpeed()
        VB: IncreaseSpeed()
      nameWithType:
        CSharp: PongBallBehavior.IncreaseSpeed()
        VB: PongBallBehavior.IncreaseSpeed()
      qualifiedName:
        CSharp: PongBallBehavior.IncreaseSpeed()
        VB: PongBallBehavior.IncreaseSpeed()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: IncreaseSpeed
        path: ''
        startLine: 224
      syntax:
        content:
          CSharp: public void IncreaseSpeed()
          VB: Public Sub IncreaseSpeed()
      overload: Global.PongBallBehavior.IncreaseSpeed*
  - id: Global.PongPaddleBehavior
    commentId: T:Global.PongPaddleBehavior
    language: CSharp
    name:
      CSharp: PongPaddleBehavior
      VB: PongPaddleBehavior
    nameWithType:
      CSharp: PongPaddleBehavior
      VB: PongPaddleBehavior
    qualifiedName:
      CSharp: PongPaddleBehavior
      VB: PongPaddleBehavior
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: PongPaddleBehavior
      path: ''
      startLine: 264
    syntax:
      content:
        CSharp: 'public class PongPaddleBehavior : MonoBehaviour'
        VB: Public Class PongPaddleBehavior Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.PongPaddleBehavior.speed
      commentId: F:Global.PongPaddleBehavior.speed
      language: CSharp
      name:
        CSharp: speed
        VB: speed
      nameWithType:
        CSharp: PongPaddleBehavior.speed
        VB: PongPaddleBehavior.speed
      qualifiedName:
        CSharp: PongPaddleBehavior.speed
        VB: PongPaddleBehavior.speed
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: speed
        path: ''
        startLine: 266
      syntax:
        content:
          CSharp: public float speed
          VB: Public speed As Single
        return:
          type: System.Single
    - id: Global.PongPaddleBehavior.isPlayer1
      commentId: F:Global.PongPaddleBehavior.isPlayer1
      language: CSharp
      name:
        CSharp: isPlayer1
        VB: isPlayer1
      nameWithType:
        CSharp: PongPaddleBehavior.isPlayer1
        VB: PongPaddleBehavior.isPlayer1
      qualifiedName:
        CSharp: PongPaddleBehavior.isPlayer1
        VB: PongPaddleBehavior.isPlayer1
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: isPlayer1
        path: ''
        startLine: 267
      syntax:
        content:
          CSharp: public bool isPlayer1
          VB: Public isPlayer1 As Boolean
        return:
          type: System.Boolean
  - id: Global.HubPolygonCreator
    commentId: T:Global.HubPolygonCreator
    language: CSharp
    name:
      CSharp: HubPolygonCreator
      VB: HubPolygonCreator
    nameWithType:
      CSharp: HubPolygonCreator
      VB: HubPolygonCreator
    qualifiedName:
      CSharp: HubPolygonCreator
      VB: HubPolygonCreator
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: HubPolygonCreator
      path: ''
      startLine: 311
    syntax:
      content:
        CSharp: 'public class HubPolygonCreator : MonoBehaviour'
        VB: Public Class HubPolygonCreator Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.HubPolygonCreator.vertices
      commentId: F:Global.HubPolygonCreator.vertices
      language: CSharp
      name:
        CSharp: vertices
        VB: vertices
      nameWithType:
        CSharp: HubPolygonCreator.vertices
        VB: HubPolygonCreator.vertices
      qualifiedName:
        CSharp: HubPolygonCreator.vertices
        VB: HubPolygonCreator.vertices
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: vertices
        path: ''
        startLine: 314
      syntax:
        content:
          CSharp: public List<GameObject> vertices
          VB: Public vertices As List(Of GameObject)
        return:
          type: Global.List{GameObject}
    - id: Global.HubPolygonCreator.size
      commentId: F:Global.HubPolygonCreator.size
      language: CSharp
      name:
        CSharp: size
        VB: size
      nameWithType:
        CSharp: HubPolygonCreator.size
        VB: HubPolygonCreator.size
      qualifiedName:
        CSharp: HubPolygonCreator.size
        VB: HubPolygonCreator.size
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: size
        path: ''
        startLine: 315
      syntax:
        content:
          CSharp: public float size
          VB: Public size As Single
        return:
          type: System.Single
  - id: Global.HubManager
    commentId: T:Global.HubManager
    language: CSharp
    name:
      CSharp: HubManager
      VB: HubManager
    nameWithType:
      CSharp: HubManager
      VB: HubManager
    qualifiedName:
      CSharp: HubManager
      VB: HubManager
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: HubManager
      path: ''
      startLine: 334
    syntax:
      content:
        CSharp: 'public class HubManager : MonoBehaviour'
        VB: Public Class HubManager Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.HubManager.Instance
      commentId: F:Global.HubManager.Instance
      language: CSharp
      name:
        CSharp: Instance
        VB: Instance
      nameWithType:
        CSharp: HubManager.Instance
        VB: HubManager.Instance
      qualifiedName:
        CSharp: HubManager.Instance
        VB: HubManager.Instance
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Instance
        path: ''
        startLine: 336
      syntax:
        content:
          CSharp: public static HubManager Instance
          VB: Public Shared Instance As HubManager
        return:
          type: Global.HubManager
    - id: Global.HubManager.hubCamera
      commentId: F:Global.HubManager.hubCamera
      language: CSharp
      name:
        CSharp: hubCamera
        VB: hubCamera
      nameWithType:
        CSharp: HubManager.hubCamera
        VB: HubManager.hubCamera
      qualifiedName:
        CSharp: HubManager.hubCamera
        VB: HubManager.hubCamera
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: hubCamera
        path: ''
        startLine: 337
      syntax:
        content:
          CSharp: public GameObject hubCamera
          VB: Public hubCamera As GameObject
        return:
          type: Global.GameObject
    - id: Global.HubManager.gameButtonsParent
      commentId: F:Global.HubManager.gameButtonsParent
      language: CSharp
      name:
        CSharp: gameButtonsParent
        VB: gameButtonsParent
      nameWithType:
        CSharp: HubManager.gameButtonsParent
        VB: HubManager.gameButtonsParent
      qualifiedName:
        CSharp: HubManager.gameButtonsParent
        VB: HubManager.gameButtonsParent
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: gameButtonsParent
        path: ''
        startLine: 338
      syntax:
        content:
          CSharp: public GameObject gameButtonsParent
          VB: Public gameButtonsParent As GameObject
        return:
          type: Global.GameObject
    - id: Global.HubManager.LoadScene(System.String)
      commentId: M:Global.HubManager.LoadScene(System.String)
      language: CSharp
      name:
        CSharp: LoadScene(string)
        VB: LoadScene(String)
      nameWithType:
        CSharp: HubManager.LoadScene(string)
        VB: HubManager.LoadScene(String)
      qualifiedName:
        CSharp: HubManager.LoadScene(string)
        VB: HubManager.LoadScene(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: LoadScene
        path: ''
        startLine: 355
      syntax:
        content:
          CSharp: public void LoadScene(string sceneName)
          VB: Public Sub LoadScene(sceneName As String)
        parameters:
        - id: sceneName
          type: System.String
      overload: Global.HubManager.LoadScene*
    - id: Global.HubManager.UnloadGameScene
      commentId: M:Global.HubManager.UnloadGameScene
      language: CSharp
      name:
        CSharp: UnloadGameScene()
        VB: UnloadGameScene()
      nameWithType:
        CSharp: HubManager.UnloadGameScene()
        VB: HubManager.UnloadGameScene()
      qualifiedName:
        CSharp: HubManager.UnloadGameScene()
        VB: HubManager.UnloadGameScene()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UnloadGameScene
        path: ''
        startLine: 364
      syntax:
        content:
          CSharp: public void UnloadGameScene()
          VB: Public Sub UnloadGameScene()
      overload: Global.HubManager.UnloadGameScene*
  - id: Global.ObstacleCourse
    commentId: T:Global.ObstacleCourse
    language: CSharp
    name:
      CSharp: ObstacleCourse
      VB: ObstacleCourse
    nameWithType:
      CSharp: ObstacleCourse
      VB: ObstacleCourse
    qualifiedName:
      CSharp: ObstacleCourse
      VB: ObstacleCourse
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: ObstacleCourse
      path: ''
      startLine: 419
    syntax:
      content:
        CSharp: 'public class ObstacleCourse : MonoBehaviour'
        VB: Public Class ObstacleCourse Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.ObstacleCourse.playerWon
      commentId: F:Global.ObstacleCourse.playerWon
      language: CSharp
      name:
        CSharp: playerWon
        VB: playerWon
      nameWithType:
        CSharp: ObstacleCourse.playerWon
        VB: ObstacleCourse.playerWon
      qualifiedName:
        CSharp: ObstacleCourse.playerWon
        VB: ObstacleCourse.playerWon
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: playerWon
        path: ''
        startLine: 421
      syntax:
        content:
          CSharp: public static GameObject playerWon
          VB: Public Shared playerWon As GameObject
        return:
          type: Global.GameObject
  - id: Global.AudioManager
    commentId: T:Global.AudioManager
    language: CSharp
    name:
      CSharp: AudioManager
      VB: AudioManager
    nameWithType:
      CSharp: AudioManager
      VB: AudioManager
    qualifiedName:
      CSharp: AudioManager
      VB: AudioManager
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: AudioManager
      path: ''
      startLine: 436
    syntax:
      content:
        CSharp: 'public class AudioManager : MonoBehaviour'
        VB: Public Class AudioManager Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.AudioManager.soundEffects
      commentId: F:Global.AudioManager.soundEffects
      language: CSharp
      name:
        CSharp: soundEffects
        VB: soundEffects
      nameWithType:
        CSharp: AudioManager.soundEffects
        VB: AudioManager.soundEffects
      qualifiedName:
        CSharp: AudioManager.soundEffects
        VB: AudioManager.soundEffects
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: soundEffects
        path: ''
        startLine: 438
      syntax:
        content:
          CSharp: public List<SoundEffect> soundEffects
          VB: Public soundEffects As List(Of SoundEffect)
        return:
          type: Global.List{SoundEffect}
    - id: Global.AudioManager.Instance
      commentId: F:Global.AudioManager.Instance
      language: CSharp
      name:
        CSharp: Instance
        VB: Instance
      nameWithType:
        CSharp: AudioManager.Instance
        VB: AudioManager.Instance
      qualifiedName:
        CSharp: AudioManager.Instance
        VB: AudioManager.Instance
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Instance
        path: ''
        startLine: 440
      syntax:
        content:
          CSharp: public static AudioManager Instance
          VB: Public Shared Instance As AudioManager
        return:
          type: Global.AudioManager
    - id: Global.AudioManager.PlaySound(System.String)
      commentId: M:Global.AudioManager.PlaySound(System.String)
      language: CSharp
      name:
        CSharp: PlaySound(string)
        VB: PlaySound(String)
      nameWithType:
        CSharp: AudioManager.PlaySound(string)
        VB: AudioManager.PlaySound(String)
      qualifiedName:
        CSharp: AudioManager.PlaySound(string)
        VB: AudioManager.PlaySound(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: PlaySound
        path: ''
        startLine: 466
      syntax:
        content:
          CSharp: public void PlaySound(string soundName)
          VB: Public Sub PlaySound(soundName As String)
        parameters:
        - id: soundName
          type: System.String
      overload: Global.AudioManager.PlaySound*
  - id: Global.SoundEffect
    commentId: T:Global.SoundEffect
    language: CSharp
    name:
      CSharp: SoundEffect
      VB: SoundEffect
    nameWithType:
      CSharp: SoundEffect
      VB: SoundEffect
    qualifiedName:
      CSharp: SoundEffect
      VB: SoundEffect
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: SoundEffect
      path: ''
      startLine: 489
    syntax:
      content:
        CSharp: public class SoundEffect
        VB: Public Class SoundEffect
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    items:
    - id: Global.SoundEffect.name
      commentId: F:Global.SoundEffect.name
      language: CSharp
      name:
        CSharp: name
        VB: name
      nameWithType:
        CSharp: SoundEffect.name
        VB: SoundEffect.name
      qualifiedName:
        CSharp: SoundEffect.name
        VB: SoundEffect.name
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: name
        path: ''
        startLine: 491
      syntax:
        content:
          CSharp: public string name
          VB: Public name As String
        return:
          type: System.String
    - id: Global.SoundEffect.audioSource
      commentId: F:Global.SoundEffect.audioSource
      language: CSharp
      name:
        CSharp: audioSource
        VB: audioSource
      nameWithType:
        CSharp: SoundEffect.audioSource
        VB: SoundEffect.audioSource
      qualifiedName:
        CSharp: SoundEffect.audioSource
        VB: SoundEffect.audioSource
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: audioSource
        path: ''
        startLine: 492
      syntax:
        content:
          CSharp: public AudioSource audioSource
          VB: Public audioSource As AudioSource
        return:
          type: Global.AudioSource
    - id: Global.SoundEffect.#ctor(System.String,AudioSource)
      commentId: M:Global.SoundEffect.#ctor(System.String,AudioSource)
      language: CSharp
      name:
        CSharp: SoundEffect(string, AudioSource)
        VB: New(String, AudioSource)
      nameWithType:
        CSharp: SoundEffect.SoundEffect(string, AudioSource)
        VB: SoundEffect.New(String, AudioSource)
      qualifiedName:
        CSharp: SoundEffect.SoundEffect(string, AudioSource)
        VB: SoundEffect.New(String, AudioSource)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: .ctor
        path: ''
        startLine: 494
      syntax:
        content:
          CSharp: public SoundEffect(string name, AudioSource audioSource)
          VB: Public Sub New(name As String, audioSource As AudioSource)
        parameters:
        - id: name
          type: System.String
        - id: audioSource
          type: Global.AudioSource
      overload: Global.SoundEffect.#ctor*
  - id: Global.MusicManager
    commentId: T:Global.MusicManager
    language: CSharp
    name:
      CSharp: MusicManager
      VB: MusicManager
    nameWithType:
      CSharp: MusicManager
      VB: MusicManager
    qualifiedName:
      CSharp: MusicManager
      VB: MusicManager
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: MusicManager
      path: ''
      startLine: 508
    syntax:
      content:
        CSharp: 'public class MusicManager : MonoBehaviour'
        VB: Public Class MusicManager Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.MusicManager.Instance
      commentId: F:Global.MusicManager.Instance
      language: CSharp
      name:
        CSharp: Instance
        VB: Instance
      nameWithType:
        CSharp: MusicManager.Instance
        VB: MusicManager.Instance
      qualifiedName:
        CSharp: MusicManager.Instance
        VB: MusicManager.Instance
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Instance
        path: ''
        startLine: 510
      syntax:
        content:
          CSharp: public static MusicManager Instance
          VB: Public Shared Instance As MusicManager
        return:
          type: Global.MusicManager
    - id: Global.MusicManager.playlists
      commentId: F:Global.MusicManager.playlists
      language: CSharp
      name:
        CSharp: playlists
        VB: playlists
      nameWithType:
        CSharp: MusicManager.playlists
        VB: MusicManager.playlists
      qualifiedName:
        CSharp: MusicManager.playlists
        VB: MusicManager.playlists
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: playlists
        path: ''
        startLine: 511
      syntax:
        content:
          CSharp: public List<Playlist> playlists
          VB: Public playlists As List(Of Playlist)
        return:
          type: Global.List{Playlist}
    - id: Global.MusicManager.songPrefab
      commentId: F:Global.MusicManager.songPrefab
      language: CSharp
      name:
        CSharp: songPrefab
        VB: songPrefab
      nameWithType:
        CSharp: MusicManager.songPrefab
        VB: MusicManager.songPrefab
      qualifiedName:
        CSharp: MusicManager.songPrefab
        VB: MusicManager.songPrefab
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: songPrefab
        path: ''
        startLine: 513
      syntax:
        content:
          CSharp: public GameObject songPrefab
          VB: Public songPrefab As GameObject
        return:
          type: Global.GameObject
    - id: Global.MusicManager.StartPlaylist
      commentId: M:Global.MusicManager.StartPlaylist
      language: CSharp
      name:
        CSharp: StartPlaylist()
        VB: StartPlaylist()
      nameWithType:
        CSharp: MusicManager.StartPlaylist()
        VB: MusicManager.StartPlaylist()
      qualifiedName:
        CSharp: MusicManager.StartPlaylist()
        VB: MusicManager.StartPlaylist()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: StartPlaylist
        path: ''
        startLine: 535
      syntax:
        content:
          CSharp: public void StartPlaylist()
          VB: Public Sub StartPlaylist()
      overload: Global.MusicManager.StartPlaylist*
    - id: Global.MusicManager.StartPlaylist(System.String)
      commentId: M:Global.MusicManager.StartPlaylist(System.String)
      language: CSharp
      name:
        CSharp: StartPlaylist(string)
        VB: StartPlaylist(String)
      nameWithType:
        CSharp: MusicManager.StartPlaylist(string)
        VB: MusicManager.StartPlaylist(String)
      qualifiedName:
        CSharp: MusicManager.StartPlaylist(string)
        VB: MusicManager.StartPlaylist(String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: StartPlaylist
        path: ''
        startLine: 554
      syntax:
        content:
          CSharp: public void StartPlaylist(string scene)
          VB: Public Sub StartPlaylist(scene As String)
        parameters:
        - id: scene
          type: System.String
      overload: Global.MusicManager.StartPlaylist*
    - id: Global.MusicManager.GetActiveSceneNotTitleScreen
      commentId: M:Global.MusicManager.GetActiveSceneNotTitleScreen
      language: CSharp
      name:
        CSharp: GetActiveSceneNotTitleScreen()
        VB: GetActiveSceneNotTitleScreen()
      nameWithType:
        CSharp: MusicManager.GetActiveSceneNotTitleScreen()
        VB: MusicManager.GetActiveSceneNotTitleScreen()
      qualifiedName:
        CSharp: MusicManager.GetActiveSceneNotTitleScreen()
        VB: MusicManager.GetActiveSceneNotTitleScreen()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetActiveSceneNotTitleScreen
        path: ''
        startLine: 606
      syntax:
        content:
          CSharp: public static string GetActiveSceneNotTitleScreen()
          VB: Public Shared Function GetActiveSceneNotTitleScreen() As String
        return:
          type: System.String
      overload: Global.MusicManager.GetActiveSceneNotTitleScreen*
  - id: Global.TrackLayer
    commentId: T:Global.TrackLayer
    language: CSharp
    name:
      CSharp: TrackLayer
      VB: TrackLayer
    nameWithType:
      CSharp: TrackLayer
      VB: TrackLayer
    qualifiedName:
      CSharp: TrackLayer
      VB: TrackLayer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: TrackLayer
      path: ''
      startLine: 991
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public class TrackLayer
        VB: >-
          <Serializable>

          Public Class TrackLayer
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    items:
    - id: Global.TrackLayer.layerName
      commentId: F:Global.TrackLayer.layerName
      language: CSharp
      name:
        CSharp: layerName
        VB: layerName
      nameWithType:
        CSharp: TrackLayer.layerName
        VB: TrackLayer.layerName
      qualifiedName:
        CSharp: TrackLayer.layerName
        VB: TrackLayer.layerName
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: layerName
        path: ''
        startLine: 994
      syntax:
        content:
          CSharp: public string layerName
          VB: Public layerName As String
        return:
          type: System.String
    - id: Global.TrackLayer.layerTrack
      commentId: F:Global.TrackLayer.layerTrack
      language: CSharp
      name:
        CSharp: layerTrack
        VB: layerTrack
      nameWithType:
        CSharp: TrackLayer.layerTrack
        VB: TrackLayer.layerTrack
      qualifiedName:
        CSharp: TrackLayer.layerTrack
        VB: TrackLayer.layerTrack
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: layerTrack
        path: ''
        startLine: 995
      syntax:
        content:
          CSharp: public AudioClip layerTrack
          VB: Public layerTrack As AudioClip
        return:
          type: Global.AudioClip
    - id: Global.TrackLayer.enableTrigger
      commentId: F:Global.TrackLayer.enableTrigger
      language: CSharp
      name:
        CSharp: enableTrigger
        VB: enableTrigger
      nameWithType:
        CSharp: TrackLayer.enableTrigger
        VB: TrackLayer.enableTrigger
      qualifiedName:
        CSharp: TrackLayer.enableTrigger
        VB: TrackLayer.enableTrigger
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: enableTrigger
        path: ''
        startLine: 997
      syntax:
        content:
          CSharp: public TrackLayer.EnableTrigger enableTrigger
          VB: Public enableTrigger As TrackLayer.EnableTrigger
        return:
          type: Global.TrackLayer.EnableTrigger
    - id: Global.TrackLayer.layerScenes
      commentId: F:Global.TrackLayer.layerScenes
      language: CSharp
      name:
        CSharp: layerScenes
        VB: layerScenes
      nameWithType:
        CSharp: TrackLayer.layerScenes
        VB: TrackLayer.layerScenes
      qualifiedName:
        CSharp: TrackLayer.layerScenes
        VB: TrackLayer.layerScenes
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: layerScenes
        path: ''
        startLine: 999
      syntax:
        content:
          CSharp: public List<string> layerScenes
          VB: Public layerScenes As List(Of String)
        return:
          type: Global.List{System.String}
    - id: Global.TrackLayer.triggerName
      commentId: F:Global.TrackLayer.triggerName
      language: CSharp
      name:
        CSharp: triggerName
        VB: triggerName
      nameWithType:
        CSharp: TrackLayer.triggerName
        VB: TrackLayer.triggerName
      qualifiedName:
        CSharp: TrackLayer.triggerName
        VB: TrackLayer.triggerName
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: triggerName
        path: ''
        startLine: 1000
      syntax:
        content:
          CSharp: public string triggerName
          VB: Public triggerName As String
        return:
          type: System.String
  - id: Global.TrackLayer.EnableTrigger
    commentId: T:Global.TrackLayer.EnableTrigger
    language: CSharp
    name:
      CSharp: TrackLayer.EnableTrigger
      VB: TrackLayer.EnableTrigger
    nameWithType:
      CSharp: TrackLayer.EnableTrigger
      VB: TrackLayer.EnableTrigger
    qualifiedName:
      CSharp: TrackLayer.EnableTrigger
      VB: TrackLayer.EnableTrigger
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: EnableTrigger
      path: ''
      startLine: 996
    syntax:
      content:
        CSharp: public enum TrackLayer.EnableTrigger
        VB: Public Enum TrackLayer.EnableTrigger
    items:
    - id: Global.TrackLayer.EnableTrigger.Scene
      commentId: F:Global.TrackLayer.EnableTrigger.Scene
      language: CSharp
      name:
        CSharp: Scene
        VB: Scene
      nameWithType:
        CSharp: TrackLayer.EnableTrigger.Scene
        VB: TrackLayer.EnableTrigger.Scene
      qualifiedName:
        CSharp: TrackLayer.EnableTrigger.Scene
        VB: TrackLayer.EnableTrigger.Scene
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Scene
        path: ''
        startLine: 996
      syntax:
        content:
          CSharp: Scene = 0
          VB: Scene = 0
        return:
          type: Global.TrackLayer.EnableTrigger
    - id: Global.TrackLayer.EnableTrigger.Magnetism
      commentId: F:Global.TrackLayer.EnableTrigger.Magnetism
      language: CSharp
      name:
        CSharp: Magnetism
        VB: Magnetism
      nameWithType:
        CSharp: TrackLayer.EnableTrigger.Magnetism
        VB: TrackLayer.EnableTrigger.Magnetism
      qualifiedName:
        CSharp: TrackLayer.EnableTrigger.Magnetism
        VB: TrackLayer.EnableTrigger.Magnetism
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Magnetism
        path: ''
        startLine: 996
      syntax:
        content:
          CSharp: Magnetism = 1
          VB: Magnetism = 1
        return:
          type: Global.TrackLayer.EnableTrigger
    - id: Global.TrackLayer.EnableTrigger.Goal
      commentId: F:Global.TrackLayer.EnableTrigger.Goal
      language: CSharp
      name:
        CSharp: Goal
        VB: Goal
      nameWithType:
        CSharp: TrackLayer.EnableTrigger.Goal
        VB: TrackLayer.EnableTrigger.Goal
      qualifiedName:
        CSharp: TrackLayer.EnableTrigger.Goal
        VB: TrackLayer.EnableTrigger.Goal
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Goal
        path: ''
        startLine: 996
      syntax:
        content:
          CSharp: Goal = 2
          VB: Goal = 2
        return:
          type: Global.TrackLayer.EnableTrigger
    - id: Global.TrackLayer.EnableTrigger.Button
      commentId: F:Global.TrackLayer.EnableTrigger.Button
      language: CSharp
      name:
        CSharp: Button
        VB: Button
      nameWithType:
        CSharp: TrackLayer.EnableTrigger.Button
        VB: TrackLayer.EnableTrigger.Button
      qualifiedName:
        CSharp: TrackLayer.EnableTrigger.Button
        VB: TrackLayer.EnableTrigger.Button
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Button
        path: ''
        startLine: 996
      syntax:
        content:
          CSharp: Button = 3
          VB: Button = 3
        return:
          type: Global.TrackLayer.EnableTrigger
    - id: Global.TrackLayer.EnableTrigger.Toggle
      commentId: F:Global.TrackLayer.EnableTrigger.Toggle
      language: CSharp
      name:
        CSharp: Toggle
        VB: Toggle
      nameWithType:
        CSharp: TrackLayer.EnableTrigger.Toggle
        VB: TrackLayer.EnableTrigger.Toggle
      qualifiedName:
        CSharp: TrackLayer.EnableTrigger.Toggle
        VB: TrackLayer.EnableTrigger.Toggle
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Toggle
        path: ''
        startLine: 996
      syntax:
        content:
          CSharp: Toggle = 4
          VB: Toggle = 4
        return:
          type: Global.TrackLayer.EnableTrigger
    - id: Global.TrackLayer.EnableTrigger.Movement
      commentId: F:Global.TrackLayer.EnableTrigger.Movement
      language: CSharp
      name:
        CSharp: Movement
        VB: Movement
      nameWithType:
        CSharp: TrackLayer.EnableTrigger.Movement
        VB: TrackLayer.EnableTrigger.Movement
      qualifiedName:
        CSharp: TrackLayer.EnableTrigger.Movement
        VB: TrackLayer.EnableTrigger.Movement
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Movement
        path: ''
        startLine: 996
      syntax:
        content:
          CSharp: Movement = 5
          VB: Movement = 5
        return:
          type: Global.TrackLayer.EnableTrigger
    - id: Global.TrackLayer.EnableTrigger.ConstantForce
      commentId: F:Global.TrackLayer.EnableTrigger.ConstantForce
      language: CSharp
      name:
        CSharp: ConstantForce
        VB: ConstantForce
      nameWithType:
        CSharp: TrackLayer.EnableTrigger.ConstantForce
        VB: TrackLayer.EnableTrigger.ConstantForce
      qualifiedName:
        CSharp: TrackLayer.EnableTrigger.ConstantForce
        VB: TrackLayer.EnableTrigger.ConstantForce
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ConstantForce
        path: ''
        startLine: 996
      syntax:
        content:
          CSharp: ConstantForce = 6
          VB: ConstantForce = 6
        return:
          type: Global.TrackLayer.EnableTrigger
    - id: Global.TrackLayer.EnableTrigger.EndOfLevel
      commentId: F:Global.TrackLayer.EnableTrigger.EndOfLevel
      language: CSharp
      name:
        CSharp: EndOfLevel
        VB: EndOfLevel
      nameWithType:
        CSharp: TrackLayer.EnableTrigger.EndOfLevel
        VB: TrackLayer.EnableTrigger.EndOfLevel
      qualifiedName:
        CSharp: TrackLayer.EnableTrigger.EndOfLevel
        VB: TrackLayer.EnableTrigger.EndOfLevel
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: EndOfLevel
        path: ''
        startLine: 996
      syntax:
        content:
          CSharp: EndOfLevel = 7
          VB: EndOfLevel = 7
        return:
          type: Global.TrackLayer.EnableTrigger
    - id: Global.TrackLayer.EnableTrigger.ElectromagneticPulse
      commentId: F:Global.TrackLayer.EnableTrigger.ElectromagneticPulse
      language: CSharp
      name:
        CSharp: ElectromagneticPulse
        VB: ElectromagneticPulse
      nameWithType:
        CSharp: TrackLayer.EnableTrigger.ElectromagneticPulse
        VB: TrackLayer.EnableTrigger.ElectromagneticPulse
      qualifiedName:
        CSharp: TrackLayer.EnableTrigger.ElectromagneticPulse
        VB: TrackLayer.EnableTrigger.ElectromagneticPulse
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ElectromagneticPulse
        path: ''
        startLine: 996
      syntax:
        content:
          CSharp: ElectromagneticPulse = 8
          VB: ElectromagneticPulse = 8
        return:
          type: Global.TrackLayer.EnableTrigger
    - id: Global.TrackLayer.EnableTrigger.Collectible
      commentId: F:Global.TrackLayer.EnableTrigger.Collectible
      language: CSharp
      name:
        CSharp: Collectible
        VB: Collectible
      nameWithType:
        CSharp: TrackLayer.EnableTrigger.Collectible
        VB: TrackLayer.EnableTrigger.Collectible
      qualifiedName:
        CSharp: TrackLayer.EnableTrigger.Collectible
        VB: TrackLayer.EnableTrigger.Collectible
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Collectible
        path: ''
        startLine: 996
      syntax:
        content:
          CSharp: Collectible = 9
          VB: Collectible = 9
        return:
          type: Global.TrackLayer.EnableTrigger
  - id: Global.Playlist
    commentId: T:Global.Playlist
    language: CSharp
    name:
      CSharp: Playlist
      VB: Playlist
    nameWithType:
      CSharp: Playlist
      VB: Playlist
    qualifiedName:
      CSharp: Playlist
      VB: Playlist
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: Playlist
      path: ''
      startLine: 1008
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public class Playlist
        VB: >-
          <Serializable>

          Public Class Playlist
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.ToString
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    items:
    - id: Global.Playlist.trackName
      commentId: F:Global.Playlist.trackName
      language: CSharp
      name:
        CSharp: trackName
        VB: trackName
      nameWithType:
        CSharp: Playlist.trackName
        VB: Playlist.trackName
      qualifiedName:
        CSharp: Playlist.trackName
        VB: Playlist.trackName
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: trackName
        path: ''
        startLine: 1011
      syntax:
        content:
          CSharp: public string trackName
          VB: Public trackName As String
        return:
          type: System.String
    - id: Global.Playlist.trackScenes
      commentId: F:Global.Playlist.trackScenes
      language: CSharp
      name:
        CSharp: trackScenes
        VB: trackScenes
      nameWithType:
        CSharp: Playlist.trackScenes
        VB: Playlist.trackScenes
      qualifiedName:
        CSharp: Playlist.trackScenes
        VB: Playlist.trackScenes
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: trackScenes
        path: ''
        startLine: 1012
      syntax:
        content:
          CSharp: public List<string> trackScenes
          VB: Public trackScenes As List(Of String)
        return:
          type: Global.List{System.String}
    - id: Global.Playlist.songs
      commentId: F:Global.Playlist.songs
      language: CSharp
      name:
        CSharp: songs
        VB: songs
      nameWithType:
        CSharp: Playlist.songs
        VB: Playlist.songs
      qualifiedName:
        CSharp: Playlist.songs
        VB: Playlist.songs
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: songs
        path: ''
        startLine: 1013
      syntax:
        content:
          CSharp: public List<AudioClip> songs
          VB: Public songs As List(Of AudioClip)
        return:
          type: Global.List{AudioClip}
    - id: Global.Playlist.shuffleTime
      commentId: F:Global.Playlist.shuffleTime
      language: CSharp
      name:
        CSharp: shuffleTime
        VB: shuffleTime
      nameWithType:
        CSharp: Playlist.shuffleTime
        VB: Playlist.shuffleTime
      qualifiedName:
        CSharp: Playlist.shuffleTime
        VB: Playlist.shuffleTime
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: shuffleTime
        path: ''
        startLine: 1014
      syntax:
        content:
          CSharp: public float shuffleTime
          VB: Public shuffleTime As Single
        return:
          type: System.Single
    - id: Global.Playlist.volume
      commentId: F:Global.Playlist.volume
      language: CSharp
      name:
        CSharp: volume
        VB: volume
      nameWithType:
        CSharp: Playlist.volume
        VB: Playlist.volume
      qualifiedName:
        CSharp: Playlist.volume
        VB: Playlist.volume
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: volume
        path: ''
        startLine: 1015
      syntax:
        content:
          CSharp: public float volume
          VB: Public volume As Single
        return:
          type: System.Single
  - id: Global.EventSystemizer
    commentId: T:Global.EventSystemizer
    language: CSharp
    name:
      CSharp: EventSystemizer
      VB: EventSystemizer
    nameWithType:
      CSharp: EventSystemizer
      VB: EventSystemizer
    qualifiedName:
      CSharp: EventSystemizer
      VB: EventSystemizer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: EventSystemizer
      path: ''
      startLine: 1021
    syntax:
      content:
        CSharp: 'public class EventSystemizer : MonoBehaviour'
        VB: Public Class EventSystemizer Inherits MonoBehaviour
    inheritance:
    - System.Object
    items: []
  - id: Global.ModeSelect
    commentId: T:Global.ModeSelect
    language: CSharp
    name:
      CSharp: ModeSelect
      VB: ModeSelect
    nameWithType:
      CSharp: ModeSelect
      VB: ModeSelect
    qualifiedName:
      CSharp: ModeSelect
      VB: ModeSelect
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: ModeSelect
      path: ''
      startLine: 1036
    syntax:
      content:
        CSharp: 'public class ModeSelect : MonoBehaviour'
        VB: Public Class ModeSelect Inherits MonoBehaviour
    inheritance:
    - System.Object
    items: []
  - id: Global.WinScreen
    commentId: T:Global.WinScreen
    language: CSharp
    name:
      CSharp: WinScreen
      VB: WinScreen
    nameWithType:
      CSharp: WinScreen
      VB: WinScreen
    qualifiedName:
      CSharp: WinScreen
      VB: WinScreen
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: WinScreen
      path: ''
      startLine: 1067
    syntax:
      content:
        CSharp: 'public class WinScreen : MonoBehaviour'
        VB: Public Class WinScreen Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.WinScreen.Instance
      commentId: F:Global.WinScreen.Instance
      language: CSharp
      name:
        CSharp: Instance
        VB: Instance
      nameWithType:
        CSharp: WinScreen.Instance
        VB: WinScreen.Instance
      qualifiedName:
        CSharp: WinScreen.Instance
        VB: WinScreen.Instance
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Instance
        path: ''
        startLine: 1069
      syntax:
        content:
          CSharp: public static WinScreen Instance
          VB: Public Shared Instance As WinScreen
        return:
          type: Global.WinScreen
    - id: Global.WinScreen.playerTexts
      commentId: F:Global.WinScreen.playerTexts
      language: CSharp
      name:
        CSharp: playerTexts
        VB: playerTexts
      nameWithType:
        CSharp: WinScreen.playerTexts
        VB: WinScreen.playerTexts
      qualifiedName:
        CSharp: WinScreen.playerTexts
        VB: WinScreen.playerTexts
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: playerTexts
        path: ''
        startLine: 1070
      syntax:
        content:
          CSharp: public List<TextMeshProUGUI> playerTexts
          VB: Public playerTexts As List(Of TextMeshProUGUI)
        return:
          type: Global.List{TextMeshProUGUI}
    - id: Global.WinScreen.ShowWinScreen(System.Int32)
      commentId: M:Global.WinScreen.ShowWinScreen(System.Int32)
      language: CSharp
      name:
        CSharp: ShowWinScreen(int)
        VB: ShowWinScreen(Integer)
      nameWithType:
        CSharp: WinScreen.ShowWinScreen(int)
        VB: WinScreen.ShowWinScreen(Integer)
      qualifiedName:
        CSharp: WinScreen.ShowWinScreen(int)
        VB: WinScreen.ShowWinScreen(Integer)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ShowWinScreen
        path: ''
        startLine: 1084
      syntax:
        content:
          CSharp: public void ShowWinScreen(int player)
          VB: Public Sub ShowWinScreen(player As Integer)
        parameters:
        - id: player
          type: System.Int32
      overload: Global.WinScreen.ShowWinScreen*
  - id: Global.PlayerJoinCard
    commentId: T:Global.PlayerJoinCard
    language: CSharp
    name:
      CSharp: PlayerJoinCard
      VB: PlayerJoinCard
    nameWithType:
      CSharp: PlayerJoinCard
      VB: PlayerJoinCard
    qualifiedName:
      CSharp: PlayerJoinCard
      VB: PlayerJoinCard
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: PlayerJoinCard
      path: ''
      startLine: 1102
    syntax:
      content:
        CSharp: 'public class PlayerJoinCard : MonoBehaviour'
        VB: Public Class PlayerJoinCard Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.PlayerJoinCard.playerPreview
      commentId: F:Global.PlayerJoinCard.playerPreview
      language: CSharp
      name:
        CSharp: playerPreview
        VB: playerPreview
      nameWithType:
        CSharp: PlayerJoinCard.playerPreview
        VB: PlayerJoinCard.playerPreview
      qualifiedName:
        CSharp: PlayerJoinCard.playerPreview
        VB: PlayerJoinCard.playerPreview
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: playerPreview
        path: ''
        startLine: 1104
      syntax:
        content:
          CSharp: public GameObject playerPreview
          VB: Public playerPreview As GameObject
        return:
          type: Global.GameObject
    - id: Global.PlayerJoinCard.playerNumber
      commentId: F:Global.PlayerJoinCard.playerNumber
      language: CSharp
      name:
        CSharp: playerNumber
        VB: playerNumber
      nameWithType:
        CSharp: PlayerJoinCard.playerNumber
        VB: PlayerJoinCard.playerNumber
      qualifiedName:
        CSharp: PlayerJoinCard.playerNumber
        VB: PlayerJoinCard.playerNumber
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: playerNumber
        path: ''
        startLine: 1105
      syntax:
        content:
          CSharp: public int playerNumber
          VB: Public playerNumber As Integer
        return:
          type: System.Int32
    - id: Global.PlayerJoinCard.playerNumberText
      commentId: F:Global.PlayerJoinCard.playerNumberText
      language: CSharp
      name:
        CSharp: playerNumberText
        VB: playerNumberText
      nameWithType:
        CSharp: PlayerJoinCard.playerNumberText
        VB: PlayerJoinCard.playerNumberText
      qualifiedName:
        CSharp: PlayerJoinCard.playerNumberText
        VB: PlayerJoinCard.playerNumberText
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: playerNumberText
        path: ''
        startLine: 1106
      syntax:
        content:
          CSharp: public TextMeshProUGUI playerNumberText
          VB: Public playerNumberText As TextMeshProUGUI
        return:
          type: Global.TextMeshProUGUI
  - id: Global.PlayerCardCreator
    commentId: T:Global.PlayerCardCreator
    language: CSharp
    name:
      CSharp: PlayerCardCreator
      VB: PlayerCardCreator
    nameWithType:
      CSharp: PlayerCardCreator
      VB: PlayerCardCreator
    qualifiedName:
      CSharp: PlayerCardCreator
      VB: PlayerCardCreator
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: PlayerCardCreator
      path: ''
      startLine: 1117
    syntax:
      content:
        CSharp: 'public class PlayerCardCreator : MonoBehaviour'
        VB: Public Class PlayerCardCreator Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.PlayerCardCreator.Instance
      commentId: F:Global.PlayerCardCreator.Instance
      language: CSharp
      name:
        CSharp: Instance
        VB: Instance
      nameWithType:
        CSharp: PlayerCardCreator.Instance
        VB: PlayerCardCreator.Instance
      qualifiedName:
        CSharp: PlayerCardCreator.Instance
        VB: PlayerCardCreator.Instance
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Instance
        path: ''
        startLine: 1119
      syntax:
        content:
          CSharp: public static PlayerCardCreator Instance
          VB: Public Shared Instance As PlayerCardCreator
        return:
          type: Global.PlayerCardCreator
    - id: Global.PlayerCardCreator.playerJoinCardPrefab
      commentId: F:Global.PlayerCardCreator.playerJoinCardPrefab
      language: CSharp
      name:
        CSharp: playerJoinCardPrefab
        VB: playerJoinCardPrefab
      nameWithType:
        CSharp: PlayerCardCreator.playerJoinCardPrefab
        VB: PlayerCardCreator.playerJoinCardPrefab
      qualifiedName:
        CSharp: PlayerCardCreator.playerJoinCardPrefab
        VB: PlayerCardCreator.playerJoinCardPrefab
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: playerJoinCardPrefab
        path: ''
        startLine: 1121
      syntax:
        content:
          CSharp: public GameObject playerJoinCardPrefab
          VB: Public playerJoinCardPrefab As GameObject
        return:
          type: Global.GameObject
    - id: Global.PlayerCardCreator.CreateCard
      commentId: M:Global.PlayerCardCreator.CreateCard
      language: CSharp
      name:
        CSharp: CreateCard()
        VB: CreateCard()
      nameWithType:
        CSharp: PlayerCardCreator.CreateCard()
        VB: PlayerCardCreator.CreateCard()
      qualifiedName:
        CSharp: PlayerCardCreator.CreateCard()
        VB: PlayerCardCreator.CreateCard()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: CreateCard
        path: ''
        startLine: 1132
      syntax:
        content:
          CSharp: public PlayerJoinCard CreateCard()
          VB: Public Function CreateCard() As PlayerJoinCard
        return:
          type: Global.PlayerJoinCard
      overload: Global.PlayerCardCreator.CreateCard*
  - id: Global.MovingPlatform
    commentId: T:Global.MovingPlatform
    language: CSharp
    name:
      CSharp: MovingPlatform
      VB: MovingPlatform
    nameWithType:
      CSharp: MovingPlatform
      VB: MovingPlatform
    qualifiedName:
      CSharp: MovingPlatform
      VB: MovingPlatform
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: MovingPlatform
      path: ''
      startLine: 1141
    syntax:
      content:
        CSharp: 'public class MovingPlatform : MonoBehaviour'
        VB: Public Class MovingPlatform Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.MovingPlatform.platform
      commentId: F:Global.MovingPlatform.platform
      language: CSharp
      name:
        CSharp: platform
        VB: platform
      nameWithType:
        CSharp: MovingPlatform.platform
        VB: MovingPlatform.platform
      qualifiedName:
        CSharp: MovingPlatform.platform
        VB: MovingPlatform.platform
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: platform
        path: ''
        startLine: 1143
      syntax:
        content:
          CSharp: public Transform platform
          VB: Public platform As Transform
        return:
          type: Global.Transform
    - id: Global.MovingPlatform.startPoint
      commentId: F:Global.MovingPlatform.startPoint
      language: CSharp
      name:
        CSharp: startPoint
        VB: startPoint
      nameWithType:
        CSharp: MovingPlatform.startPoint
        VB: MovingPlatform.startPoint
      qualifiedName:
        CSharp: MovingPlatform.startPoint
        VB: MovingPlatform.startPoint
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: startPoint
        path: ''
        startLine: 1144
      syntax:
        content:
          CSharp: public int startPoint
          VB: Public startPoint As Integer
        return:
          type: System.Int32
    - id: Global.MovingPlatform.points
      commentId: F:Global.MovingPlatform.points
      language: CSharp
      name:
        CSharp: points
        VB: points
      nameWithType:
        CSharp: MovingPlatform.points
        VB: MovingPlatform.points
      qualifiedName:
        CSharp: MovingPlatform.points
        VB: MovingPlatform.points
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: points
        path: ''
        startLine: 1145
      syntax:
        content:
          CSharp: public Transform[] points
          VB: Public points As Transform()
        return:
          type: Global.Transform[]
    - id: Global.MovingPlatform.speed
      commentId: F:Global.MovingPlatform.speed
      language: CSharp
      name:
        CSharp: speed
        VB: speed
      nameWithType:
        CSharp: MovingPlatform.speed
        VB: MovingPlatform.speed
      qualifiedName:
        CSharp: MovingPlatform.speed
        VB: MovingPlatform.speed
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: speed
        path: ''
        startLine: 1146
      syntax:
        content:
          CSharp: public float speed
          VB: Public speed As Single
        return:
          type: System.Single
  - id: Global.ObjectVisibility
    commentId: T:Global.ObjectVisibility
    language: CSharp
    name:
      CSharp: ObjectVisibility
      VB: ObjectVisibility
    nameWithType:
      CSharp: ObjectVisibility
      VB: ObjectVisibility
    qualifiedName:
      CSharp: ObjectVisibility
      VB: ObjectVisibility
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: ObjectVisibility
      path: ''
      startLine: 1173
    syntax:
      content:
        CSharp: 'public class ObjectVisibility : MonoBehaviour'
        VB: Public Class ObjectVisibility Inherits MonoBehaviour
    inheritance:
    - System.Object
    items: []
  - id: Global.InfiniteScroll
    commentId: T:Global.InfiniteScroll
    language: CSharp
    name:
      CSharp: InfiniteScroll
      VB: InfiniteScroll
    nameWithType:
      CSharp: InfiniteScroll
      VB: InfiniteScroll
    qualifiedName:
      CSharp: InfiniteScroll
      VB: InfiniteScroll
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: InfiniteScroll
      path: ''
      startLine: 1200
    syntax:
      content:
        CSharp: 'public class InfiniteScroll : MonoBehaviour'
        VB: Public Class InfiniteScroll Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.InfiniteScroll.speed
      commentId: F:Global.InfiniteScroll.speed
      language: CSharp
      name:
        CSharp: speed
        VB: speed
      nameWithType:
        CSharp: InfiniteScroll.speed
        VB: InfiniteScroll.speed
      qualifiedName:
        CSharp: InfiniteScroll.speed
        VB: InfiniteScroll.speed
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: speed
        path: ''
        startLine: 1202
      syntax:
        content:
          CSharp: public float speed
          VB: Public speed As Single
        return:
          type: System.Single
    - id: Global.InfiniteScroll.start
      commentId: F:Global.InfiniteScroll.start
      language: CSharp
      name:
        CSharp: start
        VB: start
      nameWithType:
        CSharp: InfiniteScroll.start
        VB: InfiniteScroll.start
      qualifiedName:
        CSharp: InfiniteScroll.start
        VB: InfiniteScroll.start
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: start
        path: ''
        startLine: 1203
      syntax:
        content:
          CSharp: public float start
          VB: Public start As Single
        return:
          type: System.Single
    - id: Global.InfiniteScroll.end
      commentId: F:Global.InfiniteScroll.end
      language: CSharp
      name:
        CSharp: end
        VB: end
      nameWithType:
        CSharp: InfiniteScroll.end
        VB: InfiniteScroll.end
      qualifiedName:
        CSharp: InfiniteScroll.end
        VB: InfiniteScroll.end
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: end
        path: ''
        startLine: 1204
      syntax:
        content:
          CSharp: public float end
          VB: Public [end] As Single
        return:
          type: System.Single
  - id: Global.GameManagerHelper
    commentId: T:Global.GameManagerHelper
    language: CSharp
    name:
      CSharp: GameManagerHelper
      VB: GameManagerHelper
    nameWithType:
      CSharp: GameManagerHelper
      VB: GameManagerHelper
    qualifiedName:
      CSharp: GameManagerHelper
      VB: GameManagerHelper
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: GameManagerHelper
      path: ''
      startLine: 1223
    syntax:
      content:
        CSharp: 'public class GameManagerHelper : MonoBehaviour'
        VB: Public Class GameManagerHelper Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.GameManagerHelper.addHatPosition
      commentId: F:Global.GameManagerHelper.addHatPosition
      language: CSharp
      name:
        CSharp: addHatPosition
        VB: addHatPosition
      nameWithType:
        CSharp: GameManagerHelper.addHatPosition
        VB: GameManagerHelper.addHatPosition
      qualifiedName:
        CSharp: GameManagerHelper.addHatPosition
        VB: GameManagerHelper.addHatPosition
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: addHatPosition
        path: ''
        startLine: 1226
      syntax:
        content:
          CSharp: public bool addHatPosition
          VB: Public addHatPosition As Boolean
        return:
          type: System.Boolean
    - id: Global.GameManagerHelper.addSpawnPosition
      commentId: F:Global.GameManagerHelper.addSpawnPosition
      language: CSharp
      name:
        CSharp: addSpawnPosition
        VB: addSpawnPosition
      nameWithType:
        CSharp: GameManagerHelper.addSpawnPosition
        VB: GameManagerHelper.addSpawnPosition
      qualifiedName:
        CSharp: GameManagerHelper.addSpawnPosition
        VB: GameManagerHelper.addSpawnPosition
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: addSpawnPosition
        path: ''
        startLine: 1227
      syntax:
        content:
          CSharp: public bool addSpawnPosition
          VB: Public addSpawnPosition As Boolean
        return:
          type: System.Boolean
  - id: Global.GameTimer
    commentId: T:Global.GameTimer
    language: CSharp
    name:
      CSharp: GameTimer
      VB: GameTimer
    nameWithType:
      CSharp: GameTimer
      VB: GameTimer
    qualifiedName:
      CSharp: GameTimer
      VB: GameTimer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: GameTimer
      path: ''
      startLine: 1249
    syntax:
      content:
        CSharp: 'public class GameTimer : MonoBehaviour'
        VB: Public Class GameTimer Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.GameTimer.startTime
      commentId: F:Global.GameTimer.startTime
      language: CSharp
      name:
        CSharp: startTime
        VB: startTime
      nameWithType:
        CSharp: GameTimer.startTime
        VB: GameTimer.startTime
      qualifiedName:
        CSharp: GameTimer.startTime
        VB: GameTimer.startTime
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: startTime
        path: ''
        startLine: 1251
      syntax:
        content:
          CSharp: public float startTime
          VB: Public startTime As Single
        return:
          type: System.Single
    - id: Global.GameTimer.timerText
      commentId: F:Global.GameTimer.timerText
      language: CSharp
      name:
        CSharp: timerText
        VB: timerText
      nameWithType:
        CSharp: GameTimer.timerText
        VB: GameTimer.timerText
      qualifiedName:
        CSharp: GameTimer.timerText
        VB: GameTimer.timerText
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: timerText
        path: ''
        startLine: 1255
      syntax:
        content:
          CSharp: public Text timerText
          VB: Public timerText As Text
        return:
          type: Global.Text
    - id: Global.GameTimer.StartTimer
      commentId: M:Global.GameTimer.StartTimer
      language: CSharp
      name:
        CSharp: StartTimer()
        VB: StartTimer()
      nameWithType:
        CSharp: GameTimer.StartTimer()
        VB: GameTimer.StartTimer()
      qualifiedName:
        CSharp: GameTimer.StartTimer()
        VB: GameTimer.StartTimer()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: StartTimer
        path: ''
        startLine: 1282
      syntax:
        content:
          CSharp: public void StartTimer()
          VB: Public Sub StartTimer()
      overload: Global.GameTimer.StartTimer*
  - id: Global.HealthBarManager
    commentId: T:Global.HealthBarManager
    language: CSharp
    name:
      CSharp: HealthBarManager
      VB: HealthBarManager
    nameWithType:
      CSharp: HealthBarManager
      VB: HealthBarManager
    qualifiedName:
      CSharp: HealthBarManager
      VB: HealthBarManager
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: HealthBarManager
      path: ''
      startLine: 1307
    syntax:
      content:
        CSharp: 'public class HealthBarManager : MonoBehaviour'
        VB: Public Class HealthBarManager Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.HealthBarManager.healthBarPrefab
      commentId: F:Global.HealthBarManager.healthBarPrefab
      language: CSharp
      name:
        CSharp: healthBarPrefab
        VB: healthBarPrefab
      nameWithType:
        CSharp: HealthBarManager.healthBarPrefab
        VB: HealthBarManager.healthBarPrefab
      qualifiedName:
        CSharp: HealthBarManager.healthBarPrefab
        VB: HealthBarManager.healthBarPrefab
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: healthBarPrefab
        path: ''
        startLine: 1309
      syntax:
        content:
          CSharp: public GameObject healthBarPrefab
          VB: Public healthBarPrefab As GameObject
        return:
          type: Global.GameObject
  - id: Global.GameManager
    commentId: T:Global.GameManager
    language: CSharp
    name:
      CSharp: GameManager
      VB: GameManager
    nameWithType:
      CSharp: GameManager
      VB: GameManager
    qualifiedName:
      CSharp: GameManager
      VB: GameManager
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: GameManager
      path: ''
      startLine: 1373
    summary: "\nThe GameManager class manages the overall game logic, including game modes, player states, \ngame events, and game-over conditions. It ensures a single instance exists and provides \nfunctionality for starting, updating, and ending the game.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class GameManager : MonoBehaviour'
        VB: Public Class GameManager Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.GameManager.Instance
      commentId: P:Global.GameManager.Instance
      language: CSharp
      name:
        CSharp: Instance
        VB: Instance
      nameWithType:
        CSharp: GameManager.Instance
        VB: GameManager.Instance
      qualifiedName:
        CSharp: GameManager.Instance
        VB: GameManager.Instance
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Instance
        path: ''
        startLine: 1375
      syntax:
        content:
          CSharp: public static GameManager Instance { get; }
          VB: Public Shared Property Instance As GameManager
        parameters: []
        return:
          type: Global.GameManager
      overload: Global.GameManager.Instance*
    - id: Global.GameManager.time
      commentId: F:Global.GameManager.time
      language: CSharp
      name:
        CSharp: time
        VB: time
      nameWithType:
        CSharp: GameManager.time
        VB: GameManager.time
      qualifiedName:
        CSharp: GameManager.time
        VB: GameManager.time
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: time
        path: ''
        startLine: 1376
      syntax:
        content:
          CSharp: public float time
          VB: Public time As Single
        return:
          type: System.Single
    - id: Global.GameManager.StartGameEvent
      commentId: E:Global.GameManager.StartGameEvent
      language: CSharp
      name:
        CSharp: StartGameEvent
        VB: StartGameEvent
      nameWithType:
        CSharp: GameManager.StartGameEvent
        VB: GameManager.StartGameEvent
      qualifiedName:
        CSharp: GameManager.StartGameEvent
        VB: GameManager.StartGameEvent
      type: Event
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: StartGameEvent
        path: ''
        startLine: 1378
      syntax:
        content:
          CSharp: public event GameManager.GameEvent StartGameEvent
          VB: Public Event StartGameEvent As GameManager.GameEvent
        return:
          type: Global.GameManager.GameEvent
    - id: Global.GameManager.EndGameEvent
      commentId: E:Global.GameManager.EndGameEvent
      language: CSharp
      name:
        CSharp: EndGameEvent
        VB: EndGameEvent
      nameWithType:
        CSharp: GameManager.EndGameEvent
        VB: GameManager.EndGameEvent
      qualifiedName:
        CSharp: GameManager.EndGameEvent
        VB: GameManager.EndGameEvent
      type: Event
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: EndGameEvent
        path: ''
        startLine: 1379
      syntax:
        content:
          CSharp: public event GameManager.GameEvent EndGameEvent
          VB: Public Event EndGameEvent As GameManager.GameEvent
        return:
          type: Global.GameManager.GameEvent
    - id: Global.GameManager.players
      commentId: F:Global.GameManager.players
      language: CSharp
      name:
        CSharp: players
        VB: players
      nameWithType:
        CSharp: GameManager.players
        VB: GameManager.players
      qualifiedName:
        CSharp: GameManager.players
        VB: GameManager.players
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: players
        path: ''
        startLine: 1380
      syntax:
        content:
          CSharp: public static List<GameObject> players
          VB: Public Shared players As List(Of GameObject)
        return:
          type: Global.List{GameObject}
    - id: Global.GameManager.playerColors
      commentId: F:Global.GameManager.playerColors
      language: CSharp
      name:
        CSharp: playerColors
        VB: playerColors
      nameWithType:
        CSharp: GameManager.playerColors
        VB: GameManager.playerColors
      qualifiedName:
        CSharp: GameManager.playerColors
        VB: GameManager.playerColors
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: playerColors
        path: ''
        startLine: 1381
      syntax:
        content:
          CSharp: public static List<Color> playerColors
          VB: Public Shared playerColors As List(Of Color)
        return:
          type: Global.List{Color}
    - id: Global.GameManager.offset
      commentId: F:Global.GameManager.offset
      language: CSharp
      name:
        CSharp: offset
        VB: offset
      nameWithType:
        CSharp: GameManager.offset
        VB: GameManager.offset
      qualifiedName:
        CSharp: GameManager.offset
        VB: GameManager.offset
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: offset
        path: ''
        startLine: 1382
      syntax:
        content:
          CSharp: public float offset
          VB: Public offset As Single
        return:
          type: System.Single
    - id: Global.GameManager.music
      commentId: F:Global.GameManager.music
      language: CSharp
      name:
        CSharp: music
        VB: music
      nameWithType:
        CSharp: GameManager.music
        VB: GameManager.music
      qualifiedName:
        CSharp: GameManager.music
        VB: GameManager.music
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: music
        path: ''
        startLine: 1383
      syntax:
        content:
          CSharp: public static bool music
          VB: Public Shared music As Boolean
        return:
          type: System.Boolean
    - id: Global.GameManager.gameOver
      commentId: F:Global.GameManager.gameOver
      language: CSharp
      name:
        CSharp: gameOver
        VB: gameOver
      nameWithType:
        CSharp: GameManager.gameOver
        VB: GameManager.gameOver
      qualifiedName:
        CSharp: GameManager.gameOver
        VB: GameManager.gameOver
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: gameOver
        path: ''
        startLine: 1384
      syntax:
        content:
          CSharp: public bool gameOver
          VB: Public gameOver As Boolean
        return:
          type: System.Boolean
    - id: Global.GameManager.gameTimer
      commentId: F:Global.GameManager.gameTimer
      language: CSharp
      name:
        CSharp: gameTimer
        VB: gameTimer
      nameWithType:
        CSharp: GameManager.gameTimer
        VB: GameManager.gameTimer
      qualifiedName:
        CSharp: GameManager.gameTimer
        VB: GameManager.gameTimer
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: gameTimer
        path: ''
        startLine: 1385
      syntax:
        content:
          CSharp: public GameTimer gameTimer
          VB: Public gameTimer As GameTimer
        return:
          type: Global.GameTimer
    - id: Global.GameManager.playerHoldTimes
      commentId: F:Global.GameManager.playerHoldTimes
      language: CSharp
      name:
        CSharp: playerHoldTimes
        VB: playerHoldTimes
      nameWithType:
        CSharp: GameManager.playerHoldTimes
        VB: GameManager.playerHoldTimes
      qualifiedName:
        CSharp: GameManager.playerHoldTimes
        VB: GameManager.playerHoldTimes
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: playerHoldTimes
        path: ''
        startLine: 1386
      syntax:
        content:
          CSharp: public static Dictionary<GameObject, float> playerHoldTimes
          VB: Public Shared playerHoldTimes As Dictionary(Of GameObject, Single)
        return:
          type: Global.Dictionary{GameObject,System.Single}
    - id: Global.GameManager.gameMode
      commentId: F:Global.GameManager.gameMode
      language: CSharp
      name:
        CSharp: gameMode
        VB: gameMode
      nameWithType:
        CSharp: GameManager.gameMode
        VB: GameManager.gameMode
      qualifiedName:
        CSharp: GameManager.gameMode
        VB: GameManager.gameMode
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: gameMode
        path: ''
        startLine: 1387
      syntax:
        content:
          CSharp: public static GameManager.GameMode gameMode
          VB: Public Shared gameMode As GameManager.GameMode
        return:
          type: Global.GameManager.GameMode
    - id: Global.GameManager.map
      commentId: F:Global.GameManager.map
      language: CSharp
      name:
        CSharp: map
        VB: map
      nameWithType:
        CSharp: GameManager.map
        VB: GameManager.map
      qualifiedName:
        CSharp: GameManager.map
        VB: GameManager.map
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: map
        path: ''
        startLine: 1388
      syntax:
        content:
          CSharp: public static string map
          VB: Public Shared map As String
        return:
          type: System.String
    - id: Global.GameManager.spawnPosition
      commentId: F:Global.GameManager.spawnPosition
      language: CSharp
      name:
        CSharp: spawnPosition
        VB: spawnPosition
      nameWithType:
        CSharp: GameManager.spawnPosition
        VB: GameManager.spawnPosition
      qualifiedName:
        CSharp: GameManager.spawnPosition
        VB: GameManager.spawnPosition
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: spawnPosition
        path: ''
        startLine: 1389
      syntax:
        content:
          CSharp: public Vector2 spawnPosition
          VB: Public spawnPosition As Vector2
        return:
          type: Global.Vector2
    - id: Global.GameManager.obstacleCourseSpawnPosition
      commentId: F:Global.GameManager.obstacleCourseSpawnPosition
      language: CSharp
      name:
        CSharp: obstacleCourseSpawnPosition
        VB: obstacleCourseSpawnPosition
      nameWithType:
        CSharp: GameManager.obstacleCourseSpawnPosition
        VB: GameManager.obstacleCourseSpawnPosition
      qualifiedName:
        CSharp: GameManager.obstacleCourseSpawnPosition
        VB: GameManager.obstacleCourseSpawnPosition
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: obstacleCourseSpawnPosition
        path: ''
        startLine: 1390
      syntax:
        content:
          CSharp: public Vector2 obstacleCourseSpawnPosition
          VB: Public obstacleCourseSpawnPosition As Vector2
        return:
          type: Global.Vector2
    - id: Global.GameManager.hatSpawnPositions
      commentId: F:Global.GameManager.hatSpawnPositions
      language: CSharp
      name:
        CSharp: hatSpawnPositions
        VB: hatSpawnPositions
      nameWithType:
        CSharp: GameManager.hatSpawnPositions
        VB: GameManager.hatSpawnPositions
      qualifiedName:
        CSharp: GameManager.hatSpawnPositions
        VB: GameManager.hatSpawnPositions
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: hatSpawnPositions
        path: ''
        startLine: 1391
      syntax:
        content:
          CSharp: public List<Vector2> hatSpawnPositions
          VB: Public hatSpawnPositions As List(Of Vector2)
        return:
          type: Global.List{Vector2}
    - id: Global.GameManager.LeaderboardCanvas
      commentId: F:Global.GameManager.LeaderboardCanvas
      language: CSharp
      name:
        CSharp: LeaderboardCanvas
        VB: LeaderboardCanvas
      nameWithType:
        CSharp: GameManager.LeaderboardCanvas
        VB: GameManager.LeaderboardCanvas
      qualifiedName:
        CSharp: GameManager.LeaderboardCanvas
        VB: GameManager.LeaderboardCanvas
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: LeaderboardCanvas
        path: ''
        startLine: 1392
      syntax:
        content:
          CSharp: public Canvas LeaderboardCanvas
          VB: Public LeaderboardCanvas As Canvas
        return:
          type: Global.Canvas
    - id: Global.GameManager.TimerCanvas
      commentId: F:Global.GameManager.TimerCanvas
      language: CSharp
      name:
        CSharp: TimerCanvas
        VB: TimerCanvas
      nameWithType:
        CSharp: GameManager.TimerCanvas
        VB: GameManager.TimerCanvas
      qualifiedName:
        CSharp: GameManager.TimerCanvas
        VB: GameManager.TimerCanvas
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: TimerCanvas
        path: ''
        startLine: 1393
      syntax:
        content:
          CSharp: public Canvas TimerCanvas
          VB: Public TimerCanvas As Canvas
        return:
          type: Global.Canvas
    - id: Global.GameManager.hatObject
      commentId: F:Global.GameManager.hatObject
      language: CSharp
      name:
        CSharp: hatObject
        VB: hatObject
      nameWithType:
        CSharp: GameManager.hatObject
        VB: GameManager.hatObject
      qualifiedName:
        CSharp: GameManager.hatObject
        VB: GameManager.hatObject
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: hatObject
        path: ''
        startLine: 1394
      syntax:
        content:
          CSharp: public GameObject hatObject
          VB: Public hatObject As GameObject
        return:
          type: Global.GameObject
    - id: Global.GameManager.StartGame
      commentId: M:Global.GameManager.StartGame
      language: CSharp
      name:
        CSharp: StartGame()
        VB: StartGame()
      nameWithType:
        CSharp: GameManager.StartGame()
        VB: GameManager.StartGame()
      qualifiedName:
        CSharp: GameManager.StartGame()
        VB: GameManager.StartGame()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: StartGame
        path: ''
        startLine: 1465
      summary: "\nSets up the game based on the selected game mode.\n"
      example: []
      syntax:
        content:
          CSharp: public void StartGame()
          VB: Public Sub StartGame()
      overload: Global.GameManager.StartGame*
    - id: Global.GameManager.PlayerDied(Damageable)
      commentId: M:Global.GameManager.PlayerDied(Damageable)
      language: CSharp
      name:
        CSharp: PlayerDied(Damageable)
        VB: PlayerDied(Damageable)
      nameWithType:
        CSharp: GameManager.PlayerDied(Damageable)
        VB: GameManager.PlayerDied(Damageable)
      qualifiedName:
        CSharp: GameManager.PlayerDied(Damageable)
        VB: GameManager.PlayerDied(Damageable)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: PlayerDied
        path: ''
        startLine: 1504
      summary: "\nHandles player deaths based on the current game mode.\n"
      example: []
      syntax:
        content:
          CSharp: public void PlayerDied(Damageable player)
          VB: Public Sub PlayerDied(player As Damageable)
        parameters:
        - id: player
          type: Global.Damageable
          description: The player that died.
      overload: Global.GameManager.PlayerDied*
    - id: Global.GameManager.GameOver
      commentId: M:Global.GameManager.GameOver
      language: CSharp
      name:
        CSharp: GameOver()
        VB: GameOver()
      nameWithType:
        CSharp: GameManager.GameOver()
        VB: GameManager.GameOver()
      qualifiedName:
        CSharp: GameManager.GameOver()
        VB: GameManager.GameOver()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GameOver
        path: ''
        startLine: 1559
      summary: "\nEnds the game and determines the winner based on the game mode.\n"
      example: []
      syntax:
        content:
          CSharp: public void GameOver()
          VB: Public Sub GameOver()
      overload: Global.GameManager.GameOver*
    - id: Global.GameManager.AlivePlayers
      commentId: M:Global.GameManager.AlivePlayers
      language: CSharp
      name:
        CSharp: AlivePlayers()
        VB: AlivePlayers()
      nameWithType:
        CSharp: GameManager.AlivePlayers()
        VB: GameManager.AlivePlayers()
      qualifiedName:
        CSharp: GameManager.AlivePlayers()
        VB: GameManager.AlivePlayers()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: AlivePlayers
        path: ''
        startLine: 1628
      summary: "\nReturns a list of all players that are currently alive.\n"
      example: []
      syntax:
        content:
          CSharp: public List<GameObject> AlivePlayers()
          VB: Public Function AlivePlayers() As List(Of GameObject)
        return:
          type: Global.List{GameObject}
          description: A list of alive player GameObjects.
      overload: Global.GameManager.AlivePlayers*
    - id: Global.GameManager.UpdatePlayerHoldTime(GameObject,System.Single)
      commentId: M:Global.GameManager.UpdatePlayerHoldTime(GameObject,System.Single)
      language: CSharp
      name:
        CSharp: UpdatePlayerHoldTime(GameObject, float)
        VB: UpdatePlayerHoldTime(GameObject, Single)
      nameWithType:
        CSharp: GameManager.UpdatePlayerHoldTime(GameObject, float)
        VB: GameManager.UpdatePlayerHoldTime(GameObject, Single)
      qualifiedName:
        CSharp: GameManager.UpdatePlayerHoldTime(GameObject, float)
        VB: GameManager.UpdatePlayerHoldTime(GameObject, Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UpdatePlayerHoldTime
        path: ''
        startLine: 1645
      summary: "\nUpdates the player&apos;s hold time and updates the leaderboard.\n"
      example: []
      syntax:
        content:
          CSharp: public void UpdatePlayerHoldTime(GameObject player, float holdTime)
          VB: Public Sub UpdatePlayerHoldTime(player As GameObject, holdTime As Single)
        parameters:
        - id: player
          type: Global.GameObject
          description: The player GameObject.
        - id: holdTime
          type: System.Single
          description: The hold time to update.
      overload: Global.GameManager.UpdatePlayerHoldTime*
  - id: Global.GameManager.GameEvent
    commentId: T:Global.GameManager.GameEvent
    language: CSharp
    name:
      CSharp: GameManager.GameEvent
      VB: GameManager.GameEvent
    nameWithType:
      CSharp: GameManager.GameEvent
      VB: GameManager.GameEvent
    qualifiedName:
      CSharp: GameManager.GameEvent
      VB: GameManager.GameEvent
    type: Delegate
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: GameEvent
      path: ''
      startLine: 1377
    syntax:
      content:
        CSharp: public delegate void GameManager.GameEvent()
        VB: Public Delegate Sub GameManager.GameEvent()
    items: []
  - id: Global.GameManager.GameMode
    commentId: T:Global.GameManager.GameMode
    language: CSharp
    name:
      CSharp: GameManager.GameMode
      VB: GameManager.GameMode
    nameWithType:
      CSharp: GameManager.GameMode
      VB: GameManager.GameMode
    qualifiedName:
      CSharp: GameManager.GameMode
      VB: GameManager.GameMode
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: GameMode
      path: ''
      startLine: 1399
    summary: "\nEnum representing the different game modes.\n"
    example: []
    syntax:
      content:
        CSharp: public enum GameManager.GameMode
        VB: Public Enum GameManager.GameMode
    items:
    - id: Global.GameManager.GameMode.freeForAll
      commentId: F:Global.GameManager.GameMode.freeForAll
      language: CSharp
      name:
        CSharp: freeForAll
        VB: freeForAll
      nameWithType:
        CSharp: GameManager.GameMode.freeForAll
        VB: GameManager.GameMode.freeForAll
      qualifiedName:
        CSharp: GameManager.GameMode.freeForAll
        VB: GameManager.GameMode.freeForAll
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: freeForAll
        path: ''
        startLine: 1401
      syntax:
        content:
          CSharp: freeForAll = 0
          VB: freeForAll = 0
        return:
          type: Global.GameManager.GameMode
    - id: Global.GameManager.GameMode.keepAway
      commentId: F:Global.GameManager.GameMode.keepAway
      language: CSharp
      name:
        CSharp: keepAway
        VB: keepAway
      nameWithType:
        CSharp: GameManager.GameMode.keepAway
        VB: GameManager.GameMode.keepAway
      qualifiedName:
        CSharp: GameManager.GameMode.keepAway
        VB: GameManager.GameMode.keepAway
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: keepAway
        path: ''
        startLine: 1402
      syntax:
        content:
          CSharp: keepAway = 1
          VB: keepAway = 1
        return:
          type: Global.GameManager.GameMode
    - id: Global.GameManager.GameMode.obstacleCourse
      commentId: F:Global.GameManager.GameMode.obstacleCourse
      language: CSharp
      name:
        CSharp: obstacleCourse
        VB: obstacleCourse
      nameWithType:
        CSharp: GameManager.GameMode.obstacleCourse
        VB: GameManager.GameMode.obstacleCourse
      qualifiedName:
        CSharp: GameManager.GameMode.obstacleCourse
        VB: GameManager.GameMode.obstacleCourse
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: obstacleCourse
        path: ''
        startLine: 1403
      syntax:
        content:
          CSharp: obstacleCourse = 2
          VB: obstacleCourse = 2
        return:
          type: Global.GameManager.GameMode
  - id: Global.FallPlatform
    commentId: T:Global.FallPlatform
    language: CSharp
    name:
      CSharp: FallPlatform
      VB: FallPlatform
    nameWithType:
      CSharp: FallPlatform
      VB: FallPlatform
    qualifiedName:
      CSharp: FallPlatform
      VB: FallPlatform
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: FallPlatform
      path: ''
      startLine: 1673
    syntax:
      content:
        CSharp: 'public class FallPlatform : MonoBehaviour'
        VB: Public Class FallPlatform Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.FallPlatform.fallDelay
      commentId: F:Global.FallPlatform.fallDelay
      language: CSharp
      name:
        CSharp: fallDelay
        VB: fallDelay
      nameWithType:
        CSharp: FallPlatform.fallDelay
        VB: FallPlatform.fallDelay
      qualifiedName:
        CSharp: FallPlatform.fallDelay
        VB: FallPlatform.fallDelay
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: fallDelay
        path: ''
        startLine: 1675
      syntax:
        content:
          CSharp: public float fallDelay
          VB: Public fallDelay As Single
        return:
          type: System.Single
    - id: Global.FallPlatform.resetDelay
      commentId: F:Global.FallPlatform.resetDelay
      language: CSharp
      name:
        CSharp: resetDelay
        VB: resetDelay
      nameWithType:
        CSharp: FallPlatform.resetDelay
        VB: FallPlatform.resetDelay
      qualifiedName:
        CSharp: FallPlatform.resetDelay
        VB: FallPlatform.resetDelay
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: resetDelay
        path: ''
        startLine: 1676
      syntax:
        content:
          CSharp: public float resetDelay
          VB: Public resetDelay As Single
        return:
          type: System.Single
  - id: Global.HatRespawn
    commentId: T:Global.HatRespawn
    language: CSharp
    name:
      CSharp: HatRespawn
      VB: HatRespawn
    nameWithType:
      CSharp: HatRespawn
      VB: HatRespawn
    qualifiedName:
      CSharp: HatRespawn
      VB: HatRespawn
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: HatRespawn
      path: ''
      startLine: 1727
    syntax:
      content:
        CSharp: 'public class HatRespawn : MonoBehaviour'
        VB: Public Class HatRespawn Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.HatRespawn.respawnTime
      commentId: F:Global.HatRespawn.respawnTime
      language: CSharp
      name:
        CSharp: respawnTime
        VB: respawnTime
      nameWithType:
        CSharp: HatRespawn.respawnTime
        VB: HatRespawn.respawnTime
      qualifiedName:
        CSharp: HatRespawn.respawnTime
        VB: HatRespawn.respawnTime
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: respawnTime
        path: ''
        startLine: 1730
      syntax:
        content:
          CSharp: public const float respawnTime = 10
          VB: Public Const respawnTime As Single = 10
        return:
          type: System.Single
    - id: Global.HatRespawn.canBePickedUp
      commentId: F:Global.HatRespawn.canBePickedUp
      language: CSharp
      name:
        CSharp: canBePickedUp
        VB: canBePickedUp
      nameWithType:
        CSharp: HatRespawn.canBePickedUp
        VB: HatRespawn.canBePickedUp
      qualifiedName:
        CSharp: HatRespawn.canBePickedUp
        VB: HatRespawn.canBePickedUp
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: canBePickedUp
        path: ''
        startLine: 1733
      syntax:
        content:
          CSharp: public static bool canBePickedUp
          VB: Public Shared canBePickedUp As Boolean
        return:
          type: System.Boolean
    - id: Global.HatRespawn.Interact
      commentId: M:Global.HatRespawn.Interact
      language: CSharp
      name:
        CSharp: Interact()
        VB: Interact()
      nameWithType:
        CSharp: HatRespawn.Interact()
        VB: HatRespawn.Interact()
      qualifiedName:
        CSharp: HatRespawn.Interact()
        VB: HatRespawn.Interact()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Interact
        path: ''
        startLine: 1759
      syntax:
        content:
          CSharp: public void Interact()
          VB: Public Sub Interact()
      overload: Global.HatRespawn.Interact*
    - id: Global.HatRespawn.OnHatDropped
      commentId: M:Global.HatRespawn.OnHatDropped
      language: CSharp
      name:
        CSharp: OnHatDropped()
        VB: OnHatDropped()
      nameWithType:
        CSharp: HatRespawn.OnHatDropped()
        VB: HatRespawn.OnHatDropped()
      qualifiedName:
        CSharp: HatRespawn.OnHatDropped()
        VB: HatRespawn.OnHatDropped()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnHatDropped
        path: ''
        startLine: 1765
      syntax:
        content:
          CSharp: public void OnHatDropped()
          VB: Public Sub OnHatDropped()
      overload: Global.HatRespawn.OnHatDropped*
  - id: Global.RespawnOnTriggerEnter
    commentId: T:Global.RespawnOnTriggerEnter
    language: CSharp
    name:
      CSharp: RespawnOnTriggerEnter
      VB: RespawnOnTriggerEnter
    nameWithType:
      CSharp: RespawnOnTriggerEnter
      VB: RespawnOnTriggerEnter
    qualifiedName:
      CSharp: RespawnOnTriggerEnter
      VB: RespawnOnTriggerEnter
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: RespawnOnTriggerEnter
      path: ''
      startLine: 1784
    syntax:
      content:
        CSharp: 'public class RespawnOnTriggerEnter : MonoBehaviour'
        VB: Public Class RespawnOnTriggerEnter Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.RespawnOnTriggerEnter.spawnPoint
      commentId: F:Global.RespawnOnTriggerEnter.spawnPoint
      language: CSharp
      name:
        CSharp: spawnPoint
        VB: spawnPoint
      nameWithType:
        CSharp: RespawnOnTriggerEnter.spawnPoint
        VB: RespawnOnTriggerEnter.spawnPoint
      qualifiedName:
        CSharp: RespawnOnTriggerEnter.spawnPoint
        VB: RespawnOnTriggerEnter.spawnPoint
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: spawnPoint
        path: ''
        startLine: 1786
      syntax:
        content:
          CSharp: public Vector2 spawnPoint
          VB: Public spawnPoint As Vector2
        return:
          type: Global.Vector2
    - id: Global.RespawnOnTriggerEnter.spawnPointIsInitialPosition
      commentId: F:Global.RespawnOnTriggerEnter.spawnPointIsInitialPosition
      language: CSharp
      name:
        CSharp: spawnPointIsInitialPosition
        VB: spawnPointIsInitialPosition
      nameWithType:
        CSharp: RespawnOnTriggerEnter.spawnPointIsInitialPosition
        VB: RespawnOnTriggerEnter.spawnPointIsInitialPosition
      qualifiedName:
        CSharp: RespawnOnTriggerEnter.spawnPointIsInitialPosition
        VB: RespawnOnTriggerEnter.spawnPointIsInitialPosition
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: spawnPointIsInitialPosition
        path: ''
        startLine: 1787
      syntax:
        content:
          CSharp: public bool spawnPointIsInitialPosition
          VB: Public spawnPointIsInitialPosition As Boolean
        return:
          type: System.Boolean
    - id: Global.RespawnOnTriggerEnter.respawnTag
      commentId: F:Global.RespawnOnTriggerEnter.respawnTag
      language: CSharp
      name:
        CSharp: respawnTag
        VB: respawnTag
      nameWithType:
        CSharp: RespawnOnTriggerEnter.respawnTag
        VB: RespawnOnTriggerEnter.respawnTag
      qualifiedName:
        CSharp: RespawnOnTriggerEnter.respawnTag
        VB: RespawnOnTriggerEnter.respawnTag
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: respawnTag
        path: ''
        startLine: 1788
      syntax:
        content:
          CSharp: public string respawnTag
          VB: Public respawnTag As String
        return:
          type: System.String
  - id: Global.MapSelect
    commentId: T:Global.MapSelect
    language: CSharp
    name:
      CSharp: MapSelect
      VB: MapSelect
    nameWithType:
      CSharp: MapSelect
      VB: MapSelect
    qualifiedName:
      CSharp: MapSelect
      VB: MapSelect
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: MapSelect
      path: ''
      startLine: 1813
    syntax:
      content:
        CSharp: 'public class MapSelect : MonoBehaviour'
        VB: Public Class MapSelect Inherits MonoBehaviour
    inheritance:
    - System.Object
    items: []
  - id: Global.LifeDisplayManager
    commentId: T:Global.LifeDisplayManager
    language: CSharp
    name:
      CSharp: LifeDisplayManager
      VB: LifeDisplayManager
    nameWithType:
      CSharp: LifeDisplayManager
      VB: LifeDisplayManager
    qualifiedName:
      CSharp: LifeDisplayManager
      VB: LifeDisplayManager
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: LifeDisplayManager
      path: ''
      startLine: 1833
    syntax:
      content:
        CSharp: 'public class LifeDisplayManager : MonoBehaviour'
        VB: Public Class LifeDisplayManager Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.LifeDisplayManager.players
      commentId: F:Global.LifeDisplayManager.players
      language: CSharp
      name:
        CSharp: players
        VB: players
      nameWithType:
        CSharp: LifeDisplayManager.players
        VB: LifeDisplayManager.players
      qualifiedName:
        CSharp: LifeDisplayManager.players
        VB: LifeDisplayManager.players
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: players
        path: ''
        startLine: 1835
      syntax:
        content:
          CSharp: public GameObject players
          VB: Public players As GameObject
        return:
          type: Global.GameObject
    - id: Global.LifeDisplayManager.playerPrefab
      commentId: F:Global.LifeDisplayManager.playerPrefab
      language: CSharp
      name:
        CSharp: playerPrefab
        VB: playerPrefab
      nameWithType:
        CSharp: LifeDisplayManager.playerPrefab
        VB: LifeDisplayManager.playerPrefab
      qualifiedName:
        CSharp: LifeDisplayManager.playerPrefab
        VB: LifeDisplayManager.playerPrefab
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: playerPrefab
        path: ''
        startLine: 1836
      syntax:
        content:
          CSharp: public GameObject playerPrefab
          VB: Public playerPrefab As GameObject
        return:
          type: Global.GameObject
    - id: Global.LifeDisplayManager.lifePrefab
      commentId: F:Global.LifeDisplayManager.lifePrefab
      language: CSharp
      name:
        CSharp: lifePrefab
        VB: lifePrefab
      nameWithType:
        CSharp: LifeDisplayManager.lifePrefab
        VB: LifeDisplayManager.lifePrefab
      qualifiedName:
        CSharp: LifeDisplayManager.lifePrefab
        VB: LifeDisplayManager.lifePrefab
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: lifePrefab
        path: ''
        startLine: 1837
      syntax:
        content:
          CSharp: public GameObject lifePrefab
          VB: Public lifePrefab As GameObject
        return:
          type: Global.GameObject
    - id: Global.LifeDisplayManager.lifeDisplays
      commentId: F:Global.LifeDisplayManager.lifeDisplays
      language: CSharp
      name:
        CSharp: lifeDisplays
        VB: lifeDisplays
      nameWithType:
        CSharp: LifeDisplayManager.lifeDisplays
        VB: LifeDisplayManager.lifeDisplays
      qualifiedName:
        CSharp: LifeDisplayManager.lifeDisplays
        VB: LifeDisplayManager.lifeDisplays
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: lifeDisplays
        path: ''
        startLine: 1838
      syntax:
        content:
          CSharp: public Dictionary<Damageable, List<GameObject>> lifeDisplays
          VB: Public lifeDisplays As Dictionary(Of Damageable, List(Of GameObject))
        return:
          type: Global.Dictionary{Damageable,List{GameObject}}
    - id: Global.LifeDisplayManager.HideLifeDisplay
      commentId: M:Global.LifeDisplayManager.HideLifeDisplay
      language: CSharp
      name:
        CSharp: HideLifeDisplay()
        VB: HideLifeDisplay()
      nameWithType:
        CSharp: LifeDisplayManager.HideLifeDisplay()
        VB: LifeDisplayManager.HideLifeDisplay()
      qualifiedName:
        CSharp: LifeDisplayManager.HideLifeDisplay()
        VB: LifeDisplayManager.HideLifeDisplay()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: HideLifeDisplay
        path: ''
        startLine: 1870
      syntax:
        content:
          CSharp: public void HideLifeDisplay()
          VB: Public Sub HideLifeDisplay()
      overload: Global.LifeDisplayManager.HideLifeDisplay*
  - id: Global.TerribleHealthBarScript
    commentId: T:Global.TerribleHealthBarScript
    language: CSharp
    name:
      CSharp: TerribleHealthBarScript
      VB: TerribleHealthBarScript
    nameWithType:
      CSharp: TerribleHealthBarScript
      VB: TerribleHealthBarScript
    qualifiedName:
      CSharp: TerribleHealthBarScript
      VB: TerribleHealthBarScript
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: TerribleHealthBarScript
      path: ''
      startLine: 1881
    syntax:
      content:
        CSharp: 'public class TerribleHealthBarScript : MonoBehaviour'
        VB: Public Class TerribleHealthBarScript Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.TerribleHealthBarScript.fullHealthColor
      commentId: F:Global.TerribleHealthBarScript.fullHealthColor
      language: CSharp
      name:
        CSharp: fullHealthColor
        VB: fullHealthColor
      nameWithType:
        CSharp: TerribleHealthBarScript.fullHealthColor
        VB: TerribleHealthBarScript.fullHealthColor
      qualifiedName:
        CSharp: TerribleHealthBarScript.fullHealthColor
        VB: TerribleHealthBarScript.fullHealthColor
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: fullHealthColor
        path: ''
        startLine: 1883
      syntax:
        content:
          CSharp: public Color fullHealthColor
          VB: Public fullHealthColor As Color
        return:
          type: Global.Color
    - id: Global.TerribleHealthBarScript.fullDeathColor
      commentId: F:Global.TerribleHealthBarScript.fullDeathColor
      language: CSharp
      name:
        CSharp: fullDeathColor
        VB: fullDeathColor
      nameWithType:
        CSharp: TerribleHealthBarScript.fullDeathColor
        VB: TerribleHealthBarScript.fullDeathColor
      qualifiedName:
        CSharp: TerribleHealthBarScript.fullDeathColor
        VB: TerribleHealthBarScript.fullDeathColor
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: fullDeathColor
        path: ''
        startLine: 1884
      syntax:
        content:
          CSharp: public Color fullDeathColor
          VB: Public fullDeathColor As Color
        return:
          type: Global.Color
    - id: Global.TerribleHealthBarScript.subtractionColor
      commentId: F:Global.TerribleHealthBarScript.subtractionColor
      language: CSharp
      name:
        CSharp: subtractionColor
        VB: subtractionColor
      nameWithType:
        CSharp: TerribleHealthBarScript.subtractionColor
        VB: TerribleHealthBarScript.subtractionColor
      qualifiedName:
        CSharp: TerribleHealthBarScript.subtractionColor
        VB: TerribleHealthBarScript.subtractionColor
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: subtractionColor
        path: ''
        startLine: 1885
      syntax:
        content:
          CSharp: public Color subtractionColor
          VB: Public subtractionColor As Color
        return:
          type: Global.Color
    - id: Global.TerribleHealthBarScript.healthVisual
      commentId: F:Global.TerribleHealthBarScript.healthVisual
      language: CSharp
      name:
        CSharp: healthVisual
        VB: healthVisual
      nameWithType:
        CSharp: TerribleHealthBarScript.healthVisual
        VB: TerribleHealthBarScript.healthVisual
      qualifiedName:
        CSharp: TerribleHealthBarScript.healthVisual
        VB: TerribleHealthBarScript.healthVisual
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: healthVisual
        path: ''
        startLine: 1886
      syntax:
        content:
          CSharp: public GameObject healthVisual
          VB: Public healthVisual As GameObject
        return:
          type: Global.GameObject
    - id: Global.TerribleHealthBarScript.actualHealthVisual
      commentId: F:Global.TerribleHealthBarScript.actualHealthVisual
      language: CSharp
      name:
        CSharp: actualHealthVisual
        VB: actualHealthVisual
      nameWithType:
        CSharp: TerribleHealthBarScript.actualHealthVisual
        VB: TerribleHealthBarScript.actualHealthVisual
      qualifiedName:
        CSharp: TerribleHealthBarScript.actualHealthVisual
        VB: TerribleHealthBarScript.actualHealthVisual
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: actualHealthVisual
        path: ''
        startLine: 1887
      syntax:
        content:
          CSharp: public GameObject actualHealthVisual
          VB: Public actualHealthVisual As GameObject
        return:
          type: Global.GameObject
    - id: Global.TerribleHealthBarScript.deathVisual
      commentId: F:Global.TerribleHealthBarScript.deathVisual
      language: CSharp
      name:
        CSharp: deathVisual
        VB: deathVisual
      nameWithType:
        CSharp: TerribleHealthBarScript.deathVisual
        VB: TerribleHealthBarScript.deathVisual
      qualifiedName:
        CSharp: TerribleHealthBarScript.deathVisual
        VB: TerribleHealthBarScript.deathVisual
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: deathVisual
        path: ''
        startLine: 1888
      syntax:
        content:
          CSharp: public GameObject deathVisual
          VB: Public deathVisual As GameObject
        return:
          type: Global.GameObject
    - id: Global.TerribleHealthBarScript.smoothSpeed
      commentId: F:Global.TerribleHealthBarScript.smoothSpeed
      language: CSharp
      name:
        CSharp: smoothSpeed
        VB: smoothSpeed
      nameWithType:
        CSharp: TerribleHealthBarScript.smoothSpeed
        VB: TerribleHealthBarScript.smoothSpeed
      qualifiedName:
        CSharp: TerribleHealthBarScript.smoothSpeed
        VB: TerribleHealthBarScript.smoothSpeed
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: smoothSpeed
        path: ''
        startLine: 1889
      syntax:
        content:
          CSharp: public float smoothSpeed
          VB: Public smoothSpeed As Single
        return:
          type: System.Single
    - id: Global.TerribleHealthBarScript.text
      commentId: F:Global.TerribleHealthBarScript.text
      language: CSharp
      name:
        CSharp: text
        VB: text
      nameWithType:
        CSharp: TerribleHealthBarScript.text
        VB: TerribleHealthBarScript.text
      qualifiedName:
        CSharp: TerribleHealthBarScript.text
        VB: TerribleHealthBarScript.text
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: text
        path: ''
        startLine: 1890
      syntax:
        content:
          CSharp: public TextMeshProUGUI text
          VB: Public text As TextMeshProUGUI
        return:
          type: Global.TextMeshProUGUI
    - id: Global.TerribleHealthBarScript.player
      commentId: F:Global.TerribleHealthBarScript.player
      language: CSharp
      name:
        CSharp: player
        VB: player
      nameWithType:
        CSharp: TerribleHealthBarScript.player
        VB: TerribleHealthBarScript.player
      qualifiedName:
        CSharp: TerribleHealthBarScript.player
        VB: TerribleHealthBarScript.player
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: player
        path: ''
        startLine: 1899
      syntax:
        content:
          CSharp: public GameObject player
          VB: Public player As GameObject
        return:
          type: Global.GameObject
    - id: Global.TerribleHealthBarScript.SetPlayer(GameObject)
      commentId: M:Global.TerribleHealthBarScript.SetPlayer(GameObject)
      language: CSharp
      name:
        CSharp: SetPlayer(GameObject)
        VB: SetPlayer(GameObject)
      nameWithType:
        CSharp: TerribleHealthBarScript.SetPlayer(GameObject)
        VB: TerribleHealthBarScript.SetPlayer(GameObject)
      qualifiedName:
        CSharp: TerribleHealthBarScript.SetPlayer(GameObject)
        VB: TerribleHealthBarScript.SetPlayer(GameObject)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetPlayer
        path: ''
        startLine: 1927
      syntax:
        content:
          CSharp: public void SetPlayer(GameObject player)
          VB: Public Sub SetPlayer(player As GameObject)
        parameters:
        - id: player
          type: Global.GameObject
      overload: Global.TerribleHealthBarScript.SetPlayer*
  - id: Global.LeaderboardManager
    commentId: T:Global.LeaderboardManager
    language: CSharp
    name:
      CSharp: LeaderboardManager
      VB: LeaderboardManager
    nameWithType:
      CSharp: LeaderboardManager
      VB: LeaderboardManager
    qualifiedName:
      CSharp: LeaderboardManager
      VB: LeaderboardManager
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: LeaderboardManager
      path: ''
      startLine: 1962
    syntax:
      content:
        CSharp: 'public class LeaderboardManager : MonoBehaviour'
        VB: Public Class LeaderboardManager Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.LeaderboardManager.Instance
      commentId: P:Global.LeaderboardManager.Instance
      language: CSharp
      name:
        CSharp: Instance
        VB: Instance
      nameWithType:
        CSharp: LeaderboardManager.Instance
        VB: LeaderboardManager.Instance
      qualifiedName:
        CSharp: LeaderboardManager.Instance
        VB: LeaderboardManager.Instance
      type: Property
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Instance
        path: ''
        startLine: 1964
      syntax:
        content:
          CSharp: public static LeaderboardManager Instance { get; }
          VB: Public Shared Property Instance As LeaderboardManager
        parameters: []
        return:
          type: Global.LeaderboardManager
      overload: Global.LeaderboardManager.Instance*
    - id: Global.LeaderboardManager.UpdateLeaderboard
      commentId: M:Global.LeaderboardManager.UpdateLeaderboard
      language: CSharp
      name:
        CSharp: UpdateLeaderboard()
        VB: UpdateLeaderboard()
      nameWithType:
        CSharp: LeaderboardManager.UpdateLeaderboard()
        VB: LeaderboardManager.UpdateLeaderboard()
      qualifiedName:
        CSharp: LeaderboardManager.UpdateLeaderboard()
        VB: LeaderboardManager.UpdateLeaderboard()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UpdateLeaderboard
        path: ''
        startLine: 2003
      syntax:
        content:
          CSharp: public void UpdateLeaderboard()
          VB: Public Sub UpdateLeaderboard()
      overload: Global.LeaderboardManager.UpdateLeaderboard*
    - id: Global.LeaderboardManager.UpdatePlayerHoldTimeText(GameObject,System.Single)
      commentId: M:Global.LeaderboardManager.UpdatePlayerHoldTimeText(GameObject,System.Single)
      language: CSharp
      name:
        CSharp: UpdatePlayerHoldTimeText(GameObject, float)
        VB: UpdatePlayerHoldTimeText(GameObject, Single)
      nameWithType:
        CSharp: LeaderboardManager.UpdatePlayerHoldTimeText(GameObject, float)
        VB: LeaderboardManager.UpdatePlayerHoldTimeText(GameObject, Single)
      qualifiedName:
        CSharp: LeaderboardManager.UpdatePlayerHoldTimeText(GameObject, float)
        VB: LeaderboardManager.UpdatePlayerHoldTimeText(GameObject, Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: UpdatePlayerHoldTimeText
        path: ''
        startLine: 2026
      syntax:
        content:
          CSharp: public void UpdatePlayerHoldTimeText(GameObject player, float holdTime)
          VB: Public Sub UpdatePlayerHoldTimeText(player As GameObject, holdTime As Single)
        parameters:
        - id: player
          type: Global.GameObject
        - id: holdTime
          type: System.Single
      overload: Global.LeaderboardManager.UpdatePlayerHoldTimeText*
  - id: Global.Damageable
    commentId: T:Global.Damageable
    language: CSharp
    name:
      CSharp: Damageable
      VB: Damageable
    nameWithType:
      CSharp: Damageable
      VB: Damageable
    qualifiedName:
      CSharp: Damageable
      VB: Damageable
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: Damageable
      path: ''
      startLine: 2050
    syntax:
      content:
        CSharp: 'public class Damageable : MonoBehaviour'
        VB: Public Class Damageable Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.Damageable.force
      commentId: F:Global.Damageable.force
      language: CSharp
      name:
        CSharp: force
        VB: force
      nameWithType:
        CSharp: Damageable.force
        VB: Damageable.force
      qualifiedName:
        CSharp: Damageable.force
        VB: Damageable.force
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: force
        path: ''
        startLine: 2055
      syntax:
        content:
          CSharp: public float force
          VB: Public force As Single
        return:
          type: System.Single
    - id: Global.Damageable.damage
      commentId: F:Global.Damageable.damage
      language: CSharp
      name:
        CSharp: damage
        VB: damage
      nameWithType:
        CSharp: Damageable.damage
        VB: Damageable.damage
      qualifiedName:
        CSharp: Damageable.damage
        VB: Damageable.damage
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: damage
        path: ''
        startLine: 2056
      syntax:
        content:
          CSharp: public float damage
          VB: Public damage As Single
        return:
          type: System.Single
    - id: Global.Damageable.maxDamage
      commentId: F:Global.Damageable.maxDamage
      language: CSharp
      name:
        CSharp: maxDamage
        VB: maxDamage
      nameWithType:
        CSharp: Damageable.maxDamage
        VB: Damageable.maxDamage
      qualifiedName:
        CSharp: Damageable.maxDamage
        VB: Damageable.maxDamage
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: maxDamage
        path: ''
        startLine: 2057
      syntax:
        content:
          CSharp: public float maxDamage
          VB: Public maxDamage As Single
        return:
          type: System.Single
    - id: Global.Damageable.lives
      commentId: F:Global.Damageable.lives
      language: CSharp
      name:
        CSharp: lives
        VB: lives
      nameWithType:
        CSharp: Damageable.lives
        VB: Damageable.lives
      qualifiedName:
        CSharp: Damageable.lives
        VB: Damageable.lives
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: lives
        path: ''
        startLine: 2058
      syntax:
        content:
          CSharp: public int lives
          VB: Public lives As Integer
        return:
          type: System.Int32
    - id: Global.Damageable.damageSelfDebug
      commentId: F:Global.Damageable.damageSelfDebug
      language: CSharp
      name:
        CSharp: damageSelfDebug
        VB: damageSelfDebug
      nameWithType:
        CSharp: Damageable.damageSelfDebug
        VB: Damageable.damageSelfDebug
      qualifiedName:
        CSharp: Damageable.damageSelfDebug
        VB: Damageable.damageSelfDebug
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: damageSelfDebug
        path: ''
        startLine: 2060
      syntax:
        content:
          CSharp: public bool damageSelfDebug
          VB: Public damageSelfDebug As Boolean
        return:
          type: System.Boolean
    - id: Global.Damageable.dying
      commentId: F:Global.Damageable.dying
      language: CSharp
      name:
        CSharp: dying
        VB: dying
      nameWithType:
        CSharp: Damageable.dying
        VB: Damageable.dying
      qualifiedName:
        CSharp: Damageable.dying
        VB: Damageable.dying
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: dying
        path: ''
        startLine: 2061
      syntax:
        content:
          CSharp: public bool dying
          VB: Public dying As Boolean
        return:
          type: System.Boolean
    - id: Global.Damageable.OnPlayerPunched
      commentId: E:Global.Damageable.OnPlayerPunched
      language: CSharp
      name:
        CSharp: OnPlayerPunched
        VB: OnPlayerPunched
      nameWithType:
        CSharp: Damageable.OnPlayerPunched
        VB: Damageable.OnPlayerPunched
      qualifiedName:
        CSharp: Damageable.OnPlayerPunched
        VB: Damageable.OnPlayerPunched
      type: Event
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: OnPlayerPunched
        path: ''
        startLine: 2062
      syntax:
        content:
          CSharp: public event Action<GameObject> OnPlayerPunched
          VB: Public Event OnPlayerPunched As Action(Of GameObject)
        return:
          type: System.Action{GameObject}
    - id: Global.Damageable.Damage(System.Single)
      commentId: M:Global.Damageable.Damage(System.Single)
      language: CSharp
      name:
        CSharp: Damage(float)
        VB: Damage(Single)
      nameWithType:
        CSharp: Damageable.Damage(float)
        VB: Damageable.Damage(Single)
      qualifiedName:
        CSharp: Damageable.Damage(float)
        VB: Damageable.Damage(Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Damage
        path: ''
        startLine: 2123
      syntax:
        content:
          CSharp: public void Damage(float damage)
          VB: Public Sub Damage(damage As Single)
        parameters:
        - id: damage
          type: System.Single
      overload: Global.Damageable.Damage*
    - id: Global.Damageable.HandleDeath
      commentId: M:Global.Damageable.HandleDeath
      language: CSharp
      name:
        CSharp: HandleDeath()
        VB: HandleDeath()
      nameWithType:
        CSharp: Damageable.HandleDeath()
        VB: Damageable.HandleDeath()
      qualifiedName:
        CSharp: Damageable.HandleDeath()
        VB: Damageable.HandleDeath()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: HandleDeath
        path: ''
        startLine: 2162
      syntax:
        content:
          CSharp: public void HandleDeath()
          VB: Public Sub HandleDeath()
      overload: Global.Damageable.HandleDeath*
    - id: Global.Damageable.Respawn
      commentId: M:Global.Damageable.Respawn
      language: CSharp
      name:
        CSharp: Respawn()
        VB: Respawn()
      nameWithType:
        CSharp: Damageable.Respawn()
        VB: Damageable.Respawn()
      qualifiedName:
        CSharp: Damageable.Respawn()
        VB: Damageable.Respawn()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Respawn
        path: ''
        startLine: 2169
      syntax:
        content:
          CSharp: public void Respawn()
          VB: Public Sub Respawn()
      overload: Global.Damageable.Respawn*
    - id: Global.Damageable.ResetDamage
      commentId: M:Global.Damageable.ResetDamage
      language: CSharp
      name:
        CSharp: ResetDamage()
        VB: ResetDamage()
      nameWithType:
        CSharp: Damageable.ResetDamage()
        VB: Damageable.ResetDamage()
      qualifiedName:
        CSharp: Damageable.ResetDamage()
        VB: Damageable.ResetDamage()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ResetDamage
        path: ''
        startLine: 2183
      syntax:
        content:
          CSharp: public void ResetDamage()
          VB: Public Sub ResetDamage()
      overload: Global.Damageable.ResetDamage*
  - id: Global.Punch
    commentId: T:Global.Punch
    language: CSharp
    name:
      CSharp: Punch
      VB: Punch
    nameWithType:
      CSharp: Punch
      VB: Punch
    qualifiedName:
      CSharp: Punch
      VB: Punch
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: Punch
      path: ''
      startLine: 2192
    syntax:
      content:
        CSharp: 'public class Punch : MonoBehaviour'
        VB: Public Class Punch Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.Punch.cancelable
      commentId: F:Global.Punch.cancelable
      language: CSharp
      name:
        CSharp: cancelable
        VB: cancelable
      nameWithType:
        CSharp: Punch.cancelable
        VB: Punch.cancelable
      qualifiedName:
        CSharp: Punch.cancelable
        VB: Punch.cancelable
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: cancelable
        path: ''
        startLine: 2196
      syntax:
        content:
          CSharp: public bool cancelable
          VB: Public cancelable As Boolean
        return:
          type: System.Boolean
    - id: Global.Punch.EnableHurtbox
      commentId: M:Global.Punch.EnableHurtbox
      language: CSharp
      name:
        CSharp: EnableHurtbox()
        VB: EnableHurtbox()
      nameWithType:
        CSharp: Punch.EnableHurtbox()
        VB: Punch.EnableHurtbox()
      qualifiedName:
        CSharp: Punch.EnableHurtbox()
        VB: Punch.EnableHurtbox()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: EnableHurtbox
        path: ''
        startLine: 2223
      syntax:
        content:
          CSharp: public void EnableHurtbox()
          VB: Public Sub EnableHurtbox()
      overload: Global.Punch.EnableHurtbox*
    - id: Global.Punch.DisableHurtbox
      commentId: M:Global.Punch.DisableHurtbox
      language: CSharp
      name:
        CSharp: DisableHurtbox()
        VB: DisableHurtbox()
      nameWithType:
        CSharp: Punch.DisableHurtbox()
        VB: Punch.DisableHurtbox()
      qualifiedName:
        CSharp: Punch.DisableHurtbox()
        VB: Punch.DisableHurtbox()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: DisableHurtbox
        path: ''
        startLine: 2228
      syntax:
        content:
          CSharp: public void DisableHurtbox()
          VB: Public Sub DisableHurtbox()
      overload: Global.Punch.DisableHurtbox*
    - id: Global.Punch.DisableCancellation
      commentId: M:Global.Punch.DisableCancellation
      language: CSharp
      name:
        CSharp: DisableCancellation()
        VB: DisableCancellation()
      nameWithType:
        CSharp: Punch.DisableCancellation()
        VB: Punch.DisableCancellation()
      qualifiedName:
        CSharp: Punch.DisableCancellation()
        VB: Punch.DisableCancellation()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: DisableCancellation
        path: ''
        startLine: 2233
      syntax:
        content:
          CSharp: public void DisableCancellation()
          VB: Public Sub DisableCancellation()
      overload: Global.Punch.DisableCancellation*
    - id: Global.Punch.EnableCancellation
      commentId: M:Global.Punch.EnableCancellation
      language: CSharp
      name:
        CSharp: EnableCancellation()
        VB: EnableCancellation()
      nameWithType:
        CSharp: Punch.EnableCancellation()
        VB: Punch.EnableCancellation()
      qualifiedName:
        CSharp: Punch.EnableCancellation()
        VB: Punch.EnableCancellation()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: EnableCancellation
        path: ''
        startLine: 2238
      syntax:
        content:
          CSharp: public void EnableCancellation()
          VB: Public Sub EnableCancellation()
      overload: Global.Punch.EnableCancellation*
    - id: Global.Punch.ReturnToMaxSpeed
      commentId: M:Global.Punch.ReturnToMaxSpeed
      language: CSharp
      name:
        CSharp: ReturnToMaxSpeed()
        VB: ReturnToMaxSpeed()
      nameWithType:
        CSharp: Punch.ReturnToMaxSpeed()
        VB: Punch.ReturnToMaxSpeed()
      qualifiedName:
        CSharp: Punch.ReturnToMaxSpeed()
        VB: Punch.ReturnToMaxSpeed()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ReturnToMaxSpeed
        path: ''
        startLine: 2243
      syntax:
        content:
          CSharp: public void ReturnToMaxSpeed()
          VB: Public Sub ReturnToMaxSpeed()
      overload: Global.Punch.ReturnToMaxSpeed*
  - id: Global.TeleportPlatform
    commentId: T:Global.TeleportPlatform
    language: CSharp
    name:
      CSharp: TeleportPlatform
      VB: TeleportPlatform
    nameWithType:
      CSharp: TeleportPlatform
      VB: TeleportPlatform
    qualifiedName:
      CSharp: TeleportPlatform
      VB: TeleportPlatform
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: TeleportPlatform
      path: ''
      startLine: 2251
    syntax:
      content:
        CSharp: 'public class TeleportPlatform : MonoBehaviour'
        VB: Public Class TeleportPlatform Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.TeleportPlatform.teleportPoint
      commentId: F:Global.TeleportPlatform.teleportPoint
      language: CSharp
      name:
        CSharp: teleportPoint
        VB: teleportPoint
      nameWithType:
        CSharp: TeleportPlatform.teleportPoint
        VB: TeleportPlatform.teleportPoint
      qualifiedName:
        CSharp: TeleportPlatform.teleportPoint
        VB: TeleportPlatform.teleportPoint
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: teleportPoint
        path: ''
        startLine: 2253
      syntax:
        content:
          CSharp: public Vector2 teleportPoint
          VB: Public teleportPoint As Vector2
        return:
          type: Global.Vector2
    - id: Global.TeleportPlatform.teleportTag
      commentId: F:Global.TeleportPlatform.teleportTag
      language: CSharp
      name:
        CSharp: teleportTag
        VB: teleportTag
      nameWithType:
        CSharp: TeleportPlatform.teleportTag
        VB: TeleportPlatform.teleportTag
      qualifiedName:
        CSharp: TeleportPlatform.teleportTag
        VB: TeleportPlatform.teleportTag
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: teleportTag
        path: ''
        startLine: 2254
      syntax:
        content:
          CSharp: public string teleportTag
          VB: Public teleportTag As String
        return:
          type: System.String
    - id: Global.TeleportPlatform.playerTag
      commentId: F:Global.TeleportPlatform.playerTag
      language: CSharp
      name:
        CSharp: playerTag
        VB: playerTag
      nameWithType:
        CSharp: TeleportPlatform.playerTag
        VB: TeleportPlatform.playerTag
      qualifiedName:
        CSharp: TeleportPlatform.playerTag
        VB: TeleportPlatform.playerTag
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: playerTag
        path: ''
        startLine: 2255
      syntax:
        content:
          CSharp: public string playerTag
          VB: Public playerTag As String
        return:
          type: System.String
    - id: Global.TeleportPlatform.isPlatform
      commentId: F:Global.TeleportPlatform.isPlatform
      language: CSharp
      name:
        CSharp: isPlatform
        VB: isPlatform
      nameWithType:
        CSharp: TeleportPlatform.isPlatform
        VB: TeleportPlatform.isPlatform
      qualifiedName:
        CSharp: TeleportPlatform.isPlatform
        VB: TeleportPlatform.isPlatform
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: isPlatform
        path: ''
        startLine: 2256
      syntax:
        content:
          CSharp: public bool isPlatform
          VB: Public isPlatform As Boolean
        return:
          type: System.Boolean
  - id: Global.PlayerManager
    commentId: T:Global.PlayerManager
    language: CSharp
    name:
      CSharp: PlayerManager
      VB: PlayerManager
    nameWithType:
      CSharp: PlayerManager
      VB: PlayerManager
    qualifiedName:
      CSharp: PlayerManager
      VB: PlayerManager
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: PlayerManager
      path: ''
      startLine: 2292
    syntax:
      content:
        CSharp: 'public class PlayerManager : MonoBehaviour'
        VB: Public Class PlayerManager Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.PlayerManager.Instance
      commentId: F:Global.PlayerManager.Instance
      language: CSharp
      name:
        CSharp: Instance
        VB: Instance
      nameWithType:
        CSharp: PlayerManager.Instance
        VB: PlayerManager.Instance
      qualifiedName:
        CSharp: PlayerManager.Instance
        VB: PlayerManager.Instance
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Instance
        path: ''
        startLine: 2294
      syntax:
        content:
          CSharp: public static PlayerManager Instance
          VB: Public Shared Instance As PlayerManager
        return:
          type: Global.PlayerManager
    - id: Global.PlayerManager.cards
      commentId: F:Global.PlayerManager.cards
      language: CSharp
      name:
        CSharp: cards
        VB: cards
      nameWithType:
        CSharp: PlayerManager.cards
        VB: PlayerManager.cards
      qualifiedName:
        CSharp: PlayerManager.cards
        VB: PlayerManager.cards
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: cards
        path: ''
        startLine: 2295
      syntax:
        content:
          CSharp: public List<PlayerJoinCard> cards
          VB: Public cards As List(Of PlayerJoinCard)
        return:
          type: Global.List{PlayerJoinCard}
    - id: Global.PlayerManager.playerColors
      commentId: F:Global.PlayerManager.playerColors
      language: CSharp
      name:
        CSharp: playerColors
        VB: playerColors
      nameWithType:
        CSharp: PlayerManager.playerColors
        VB: PlayerManager.playerColors
      qualifiedName:
        CSharp: PlayerManager.playerColors
        VB: PlayerManager.playerColors
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: playerColors
        path: ''
        startLine: 2297
      syntax:
        content:
          CSharp: public List<Color> playerColors
          VB: Public playerColors As List(Of Color)
        return:
          type: Global.List{Color}
    - id: Global.PlayerManager.playerSelect
      commentId: F:Global.PlayerManager.playerSelect
      language: CSharp
      name:
        CSharp: playerSelect
        VB: playerSelect
      nameWithType:
        CSharp: PlayerManager.playerSelect
        VB: PlayerManager.playerSelect
      qualifiedName:
        CSharp: PlayerManager.playerSelect
        VB: PlayerManager.playerSelect
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: playerSelect
        path: ''
        startLine: 2298
      syntax:
        content:
          CSharp: public GameObject playerSelect
          VB: Public playerSelect As GameObject
        return:
          type: Global.GameObject
    - id: Global.PlayerManager.StartGame
      commentId: M:Global.PlayerManager.StartGame
      language: CSharp
      name:
        CSharp: StartGame()
        VB: StartGame()
      nameWithType:
        CSharp: PlayerManager.StartGame()
        VB: PlayerManager.StartGame()
      qualifiedName:
        CSharp: PlayerManager.StartGame()
        VB: PlayerManager.StartGame()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: StartGame
        path: ''
        startLine: 2348
      syntax:
        content:
          CSharp: public void StartGame()
          VB: Public Sub StartGame()
      overload: Global.PlayerManager.StartGame*
  - id: Global.AnimationPlayer
    commentId: T:Global.AnimationPlayer
    language: CSharp
    name:
      CSharp: AnimationPlayer
      VB: AnimationPlayer
    nameWithType:
      CSharp: AnimationPlayer
      VB: AnimationPlayer
    qualifiedName:
      CSharp: AnimationPlayer
      VB: AnimationPlayer
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: AnimationPlayer
      path: ''
      startLine: 2386
    syntax:
      content:
        CSharp: 'public class AnimationPlayer : MonoBehaviour'
        VB: Public Class AnimationPlayer Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.AnimationPlayer.state
      commentId: F:Global.AnimationPlayer.state
      language: CSharp
      name:
        CSharp: state
        VB: state
      nameWithType:
        CSharp: AnimationPlayer.state
        VB: AnimationPlayer.state
      qualifiedName:
        CSharp: AnimationPlayer.state
        VB: AnimationPlayer.state
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: state
        path: ''
        startLine: 2390
      syntax:
        content:
          CSharp: public AnimationPlayer.AnimationState state
          VB: Public state As AnimationPlayer.AnimationState
        return:
          type: Global.AnimationPlayer.AnimationState
    - id: Global.AnimationPlayer.backwards
      commentId: F:Global.AnimationPlayer.backwards
      language: CSharp
      name:
        CSharp: backwards
        VB: backwards
      nameWithType:
        CSharp: AnimationPlayer.backwards
        VB: AnimationPlayer.backwards
      qualifiedName:
        CSharp: AnimationPlayer.backwards
        VB: AnimationPlayer.backwards
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: backwards
        path: ''
        startLine: 2391
      syntax:
        content:
          CSharp: public bool backwards
          VB: Public backwards As Boolean
        return:
          type: System.Boolean
    - id: Global.AnimationPlayer.block
      commentId: F:Global.AnimationPlayer.block
      language: CSharp
      name:
        CSharp: block
        VB: block
      nameWithType:
        CSharp: AnimationPlayer.block
        VB: AnimationPlayer.block
      qualifiedName:
        CSharp: AnimationPlayer.block
        VB: AnimationPlayer.block
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: block
        path: ''
        startLine: 2392
      syntax:
        content:
          CSharp: public bool block
          VB: Public block As Boolean
        return:
          type: System.Boolean
    - id: Global.AnimationPlayer.clip
      commentId: F:Global.AnimationPlayer.clip
      language: CSharp
      name:
        CSharp: clip
        VB: clip
      nameWithType:
        CSharp: AnimationPlayer.clip
        VB: AnimationPlayer.clip
      qualifiedName:
        CSharp: AnimationPlayer.clip
        VB: AnimationPlayer.clip
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: clip
        path: ''
        startLine: 2393
      syntax:
        content:
          CSharp: public AnimationClip clip
          VB: Public clip As AnimationClip
        return:
          type: Global.AnimationClip
    - id: Global.AnimationPlayer.SetState(AnimationPlayer.AnimationState)
      commentId: M:Global.AnimationPlayer.SetState(AnimationPlayer.AnimationState)
      language: CSharp
      name:
        CSharp: SetState(AnimationState)
        VB: SetState(AnimationState)
      nameWithType:
        CSharp: AnimationPlayer.SetState(AnimationPlayer.AnimationState)
        VB: AnimationPlayer.SetState(AnimationPlayer.AnimationState)
      qualifiedName:
        CSharp: AnimationPlayer.SetState(AnimationPlayer.AnimationState)
        VB: AnimationPlayer.SetState(AnimationPlayer.AnimationState)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: SetState
        path: ''
        startLine: 2409
      syntax:
        content:
          CSharp: public void SetState(AnimationPlayer.AnimationState state)
          VB: Public Sub SetState(state As AnimationPlayer.AnimationState)
        parameters:
        - id: state
          type: Global.AnimationPlayer.AnimationState
      overload: Global.AnimationPlayer.SetState*
    - id: Global.AnimationPlayer.Punch
      commentId: M:Global.AnimationPlayer.Punch
      language: CSharp
      name:
        CSharp: Punch()
        VB: Punch()
      nameWithType:
        CSharp: AnimationPlayer.Punch()
        VB: AnimationPlayer.Punch()
      qualifiedName:
        CSharp: AnimationPlayer.Punch()
        VB: AnimationPlayer.Punch()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Punch
        path: ''
        startLine: 2414
      syntax:
        content:
          CSharp: public void Punch()
          VB: Public Sub Punch()
      overload: Global.AnimationPlayer.Punch*
  - id: Global.AnimationPlayer.AnimationState
    commentId: T:Global.AnimationPlayer.AnimationState
    language: CSharp
    name:
      CSharp: AnimationPlayer.AnimationState
      VB: AnimationPlayer.AnimationState
    nameWithType:
      CSharp: AnimationPlayer.AnimationState
      VB: AnimationPlayer.AnimationState
    qualifiedName:
      CSharp: AnimationPlayer.AnimationState
      VB: AnimationPlayer.AnimationState
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: AnimationState
      path: ''
      startLine: 2389
    syntax:
      content:
        CSharp: public enum AnimationPlayer.AnimationState
        VB: Public Enum AnimationPlayer.AnimationState
    items:
    - id: Global.AnimationPlayer.AnimationState.Idle
      commentId: F:Global.AnimationPlayer.AnimationState.Idle
      language: CSharp
      name:
        CSharp: Idle
        VB: Idle
      nameWithType:
        CSharp: AnimationPlayer.AnimationState.Idle
        VB: AnimationPlayer.AnimationState.Idle
      qualifiedName:
        CSharp: AnimationPlayer.AnimationState.Idle
        VB: AnimationPlayer.AnimationState.Idle
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Idle
        path: ''
        startLine: 2389
      syntax:
        content:
          CSharp: Idle = 0
          VB: Idle = 0
        return:
          type: Global.AnimationPlayer.AnimationState
    - id: Global.AnimationPlayer.AnimationState.Run
      commentId: F:Global.AnimationPlayer.AnimationState.Run
      language: CSharp
      name:
        CSharp: Run
        VB: Run
      nameWithType:
        CSharp: AnimationPlayer.AnimationState.Run
        VB: AnimationPlayer.AnimationState.Run
      qualifiedName:
        CSharp: AnimationPlayer.AnimationState.Run
        VB: AnimationPlayer.AnimationState.Run
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Run
        path: ''
        startLine: 2389
      syntax:
        content:
          CSharp: Run = 1
          VB: Run = 1
        return:
          type: Global.AnimationPlayer.AnimationState
    - id: Global.AnimationPlayer.AnimationState.Jump
      commentId: F:Global.AnimationPlayer.AnimationState.Jump
      language: CSharp
      name:
        CSharp: Jump
        VB: Jump
      nameWithType:
        CSharp: AnimationPlayer.AnimationState.Jump
        VB: AnimationPlayer.AnimationState.Jump
      qualifiedName:
        CSharp: AnimationPlayer.AnimationState.Jump
        VB: AnimationPlayer.AnimationState.Jump
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Jump
        path: ''
        startLine: 2389
      syntax:
        content:
          CSharp: Jump = 2
          VB: Jump = 2
        return:
          type: Global.AnimationPlayer.AnimationState
    - id: Global.AnimationPlayer.AnimationState.Walk
      commentId: F:Global.AnimationPlayer.AnimationState.Walk
      language: CSharp
      name:
        CSharp: Walk
        VB: Walk
      nameWithType:
        CSharp: AnimationPlayer.AnimationState.Walk
        VB: AnimationPlayer.AnimationState.Walk
      qualifiedName:
        CSharp: AnimationPlayer.AnimationState.Walk
        VB: AnimationPlayer.AnimationState.Walk
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: Walk
        path: ''
        startLine: 2389
      syntax:
        content:
          CSharp: Walk = 3
          VB: Walk = 3
        return:
          type: Global.AnimationPlayer.AnimationState
  - id: Global.Block
    commentId: T:Global.Block
    language: CSharp
    name:
      CSharp: Block
      VB: Block
    nameWithType:
      CSharp: Block
      VB: Block
    qualifiedName:
      CSharp: Block
      VB: Block
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: Block
      path: ''
      startLine: 2423
    syntax:
      content:
        CSharp: 'public class Block : MonoBehaviour'
        VB: Public Class Block Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.Block.blocking
      commentId: F:Global.Block.blocking
      language: CSharp
      name:
        CSharp: blocking
        VB: blocking
      nameWithType:
        CSharp: Block.blocking
        VB: Block.blocking
      qualifiedName:
        CSharp: Block.blocking
        VB: Block.blocking
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: blocking
        path: ''
        startLine: 2426
      syntax:
        content:
          CSharp: public bool blocking
          VB: Public blocking As Boolean
        return:
          type: System.Boolean
    - id: Global.Block.IsParrying
      commentId: M:Global.Block.IsParrying
      language: CSharp
      name:
        CSharp: IsParrying()
        VB: IsParrying()
      nameWithType:
        CSharp: Block.IsParrying()
        VB: Block.IsParrying()
      qualifiedName:
        CSharp: Block.IsParrying()
        VB: Block.IsParrying()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: IsParrying
        path: ''
        startLine: 2472
      syntax:
        content:
          CSharp: public bool IsParrying()
          VB: Public Function IsParrying() As Boolean
        return:
          type: System.Boolean
      overload: Global.Block.IsParrying*
  - id: Global.PlayerMovement
    commentId: T:Global.PlayerMovement
    language: CSharp
    name:
      CSharp: PlayerMovement
      VB: PlayerMovement
    nameWithType:
      CSharp: PlayerMovement
      VB: PlayerMovement
    qualifiedName:
      CSharp: PlayerMovement
      VB: PlayerMovement
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: PlayerMovement
      path: ''
      startLine: 2484
    syntax:
      content:
        CSharp: 'public class PlayerMovement : MonoBehaviour'
        VB: Public Class PlayerMovement Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.PlayerMovement.ground
      commentId: F:Global.PlayerMovement.ground
      language: CSharp
      name:
        CSharp: ground
        VB: ground
      nameWithType:
        CSharp: PlayerMovement.ground
        VB: PlayerMovement.ground
      qualifiedName:
        CSharp: PlayerMovement.ground
        VB: PlayerMovement.ground
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: ground
        path: ''
        startLine: 2492
      syntax:
        content:
          CSharp: public LayerMask ground
          VB: Public ground As LayerMask
        return:
          type: Global.LayerMask
    - id: Global.PlayerMovement.playerText
      commentId: F:Global.PlayerMovement.playerText
      language: CSharp
      name:
        CSharp: playerText
        VB: playerText
      nameWithType:
        CSharp: PlayerMovement.playerText
        VB: PlayerMovement.playerText
      qualifiedName:
        CSharp: PlayerMovement.playerText
        VB: PlayerMovement.playerText
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: playerText
        path: ''
        startLine: 2494
      syntax:
        content:
          CSharp: public TextMeshProUGUI playerText
          VB: Public playerText As TextMeshProUGUI
        return:
          type: Global.TextMeshProUGUI
    - id: Global.PlayerMovement.walkSpeed
      commentId: F:Global.PlayerMovement.walkSpeed
      language: CSharp
      name:
        CSharp: walkSpeed
        VB: walkSpeed
      nameWithType:
        CSharp: PlayerMovement.walkSpeed
        VB: PlayerMovement.walkSpeed
      qualifiedName:
        CSharp: PlayerMovement.walkSpeed
        VB: PlayerMovement.walkSpeed
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: walkSpeed
        path: ''
        startLine: 2497
      syntax:
        content:
          CSharp: public float walkSpeed
          VB: Public walkSpeed As Single
        return:
          type: System.Single
    - id: Global.PlayerMovement.walkSpeedFactor
      commentId: F:Global.PlayerMovement.walkSpeedFactor
      language: CSharp
      name:
        CSharp: walkSpeedFactor
        VB: walkSpeedFactor
      nameWithType:
        CSharp: PlayerMovement.walkSpeedFactor
        VB: PlayerMovement.walkSpeedFactor
      qualifiedName:
        CSharp: PlayerMovement.walkSpeedFactor
        VB: PlayerMovement.walkSpeedFactor
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: walkSpeedFactor
        path: ''
        startLine: 2498
      syntax:
        content:
          CSharp: public float walkSpeedFactor
          VB: Public walkSpeedFactor As Single
        return:
          type: System.Single
    - id: Global.PlayerMovement.maxSpeed
      commentId: F:Global.PlayerMovement.maxSpeed
      language: CSharp
      name:
        CSharp: maxSpeed
        VB: maxSpeed
      nameWithType:
        CSharp: PlayerMovement.maxSpeed
        VB: PlayerMovement.maxSpeed
      qualifiedName:
        CSharp: PlayerMovement.maxSpeed
        VB: PlayerMovement.maxSpeed
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: maxSpeed
        path: ''
        startLine: 2499
      syntax:
        content:
          CSharp: public float maxSpeed
          VB: Public maxSpeed As Single
        return:
          type: System.Single
    - id: Global.PlayerMovement.maxSpeedOverride
      commentId: F:Global.PlayerMovement.maxSpeedOverride
      language: CSharp
      name:
        CSharp: maxSpeedOverride
        VB: maxSpeedOverride
      nameWithType:
        CSharp: PlayerMovement.maxSpeedOverride
        VB: PlayerMovement.maxSpeedOverride
      qualifiedName:
        CSharp: PlayerMovement.maxSpeedOverride
        VB: PlayerMovement.maxSpeedOverride
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: maxSpeedOverride
        path: ''
        startLine: 2500
      syntax:
        content:
          CSharp: public float maxSpeedOverride
          VB: Public maxSpeedOverride As Single
        return:
          type: System.Single
    - id: Global.PlayerMovement.slowdownMultiplier
      commentId: F:Global.PlayerMovement.slowdownMultiplier
      language: CSharp
      name:
        CSharp: slowdownMultiplier
        VB: slowdownMultiplier
      nameWithType:
        CSharp: PlayerMovement.slowdownMultiplier
        VB: PlayerMovement.slowdownMultiplier
      qualifiedName:
        CSharp: PlayerMovement.slowdownMultiplier
        VB: PlayerMovement.slowdownMultiplier
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: slowdownMultiplier
        path: ''
        startLine: 2501
      syntax:
        content:
          CSharp: public float slowdownMultiplier
          VB: Public slowdownMultiplier As Single
        return:
          type: System.Single
    - id: Global.PlayerMovement.virtualAxisX
      commentId: F:Global.PlayerMovement.virtualAxisX
      language: CSharp
      name:
        CSharp: virtualAxisX
        VB: virtualAxisX
      nameWithType:
        CSharp: PlayerMovement.virtualAxisX
        VB: PlayerMovement.virtualAxisX
      qualifiedName:
        CSharp: PlayerMovement.virtualAxisX
        VB: PlayerMovement.virtualAxisX
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: virtualAxisX
        path: ''
        startLine: 2502
      syntax:
        content:
          CSharp: public float virtualAxisX
          VB: Public virtualAxisX As Single
        return:
          type: System.Single
    - id: Global.PlayerMovement.virtualButtonJump
      commentId: F:Global.PlayerMovement.virtualButtonJump
      language: CSharp
      name:
        CSharp: virtualButtonJump
        VB: virtualButtonJump
      nameWithType:
        CSharp: PlayerMovement.virtualButtonJump
        VB: PlayerMovement.virtualButtonJump
      qualifiedName:
        CSharp: PlayerMovement.virtualButtonJump
        VB: PlayerMovement.virtualButtonJump
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: virtualButtonJump
        path: ''
        startLine: 2503
      syntax:
        content:
          CSharp: public float virtualButtonJump
          VB: Public virtualButtonJump As Single
        return:
          type: System.Single
    - id: Global.PlayerMovement.virtualButtonJumpLastFrame
      commentId: F:Global.PlayerMovement.virtualButtonJumpLastFrame
      language: CSharp
      name:
        CSharp: virtualButtonJumpLastFrame
        VB: virtualButtonJumpLastFrame
      nameWithType:
        CSharp: PlayerMovement.virtualButtonJumpLastFrame
        VB: PlayerMovement.virtualButtonJumpLastFrame
      qualifiedName:
        CSharp: PlayerMovement.virtualButtonJumpLastFrame
        VB: PlayerMovement.virtualButtonJumpLastFrame
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: virtualButtonJumpLastFrame
        path: ''
        startLine: 2504
      syntax:
        content:
          CSharp: public float virtualButtonJumpLastFrame
          VB: Public virtualButtonJumpLastFrame As Single
        return:
          type: System.Single
    - id: Global.PlayerMovement.turnaroundMultiplier
      commentId: F:Global.PlayerMovement.turnaroundMultiplier
      language: CSharp
      name:
        CSharp: turnaroundMultiplier
        VB: turnaroundMultiplier
      nameWithType:
        CSharp: PlayerMovement.turnaroundMultiplier
        VB: PlayerMovement.turnaroundMultiplier
      qualifiedName:
        CSharp: PlayerMovement.turnaroundMultiplier
        VB: PlayerMovement.turnaroundMultiplier
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: turnaroundMultiplier
        path: ''
        startLine: 2505
      syntax:
        content:
          CSharp: public float turnaroundMultiplier
          VB: Public turnaroundMultiplier As Single
        return:
          type: System.Single
    - id: Global.PlayerMovement.walkSmooth
      commentId: F:Global.PlayerMovement.walkSmooth
      language: CSharp
      name:
        CSharp: walkSmooth
        VB: walkSmooth
      nameWithType:
        CSharp: PlayerMovement.walkSmooth
        VB: PlayerMovement.walkSmooth
      qualifiedName:
        CSharp: PlayerMovement.walkSmooth
        VB: PlayerMovement.walkSmooth
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: walkSmooth
        path: ''
        startLine: 2506
      syntax:
        content:
          CSharp: public float walkSmooth
          VB: Public walkSmooth As Single
        return:
          type: System.Single
    - id: Global.PlayerMovement.secondsToFullSpeed
      commentId: F:Global.PlayerMovement.secondsToFullSpeed
      language: CSharp
      name:
        CSharp: secondsToFullSpeed
        VB: secondsToFullSpeed
      nameWithType:
        CSharp: PlayerMovement.secondsToFullSpeed
        VB: PlayerMovement.secondsToFullSpeed
      qualifiedName:
        CSharp: PlayerMovement.secondsToFullSpeed
        VB: PlayerMovement.secondsToFullSpeed
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: secondsToFullSpeed
        path: ''
        startLine: 2507
      syntax:
        content:
          CSharp: public float secondsToFullSpeed
          VB: Public secondsToFullSpeed As Single
        return:
          type: System.Single
    - id: Global.PlayerMovement.jumpSpeed
      commentId: F:Global.PlayerMovement.jumpSpeed
      language: CSharp
      name:
        CSharp: jumpSpeed
        VB: jumpSpeed
      nameWithType:
        CSharp: PlayerMovement.jumpSpeed
        VB: PlayerMovement.jumpSpeed
      qualifiedName:
        CSharp: PlayerMovement.jumpSpeed
        VB: PlayerMovement.jumpSpeed
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: jumpSpeed
        path: ''
        startLine: 2508
      syntax:
        content:
          CSharp: public float jumpSpeed
          VB: Public jumpSpeed As Single
        return:
          type: System.Single
    - id: Global.PlayerMovement.coyoteTime
      commentId: F:Global.PlayerMovement.coyoteTime
      language: CSharp
      name:
        CSharp: coyoteTime
        VB: coyoteTime
      nameWithType:
        CSharp: PlayerMovement.coyoteTime
        VB: PlayerMovement.coyoteTime
      qualifiedName:
        CSharp: PlayerMovement.coyoteTime
        VB: PlayerMovement.coyoteTime
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: coyoteTime
        path: ''
        startLine: 2509
      syntax:
        content:
          CSharp: public float coyoteTime
          VB: Public coyoteTime As Single
        return:
          type: System.Single
    - id: Global.PlayerMovement.jumpLenience
      commentId: F:Global.PlayerMovement.jumpLenience
      language: CSharp
      name:
        CSharp: jumpLenience
        VB: jumpLenience
      nameWithType:
        CSharp: PlayerMovement.jumpLenience
        VB: PlayerMovement.jumpLenience
      qualifiedName:
        CSharp: PlayerMovement.jumpLenience
        VB: PlayerMovement.jumpLenience
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: jumpLenience
        path: ''
        startLine: 2510
      syntax:
        content:
          CSharp: public float jumpLenience
          VB: Public jumpLenience As Single
        return:
          type: System.Single
    - id: Global.PlayerMovement.timeUnableToBeDeclaredNotJumping
      commentId: F:Global.PlayerMovement.timeUnableToBeDeclaredNotJumping
      language: CSharp
      name:
        CSharp: timeUnableToBeDeclaredNotJumping
        VB: timeUnableToBeDeclaredNotJumping
      nameWithType:
        CSharp: PlayerMovement.timeUnableToBeDeclaredNotJumping
        VB: PlayerMovement.timeUnableToBeDeclaredNotJumping
      qualifiedName:
        CSharp: PlayerMovement.timeUnableToBeDeclaredNotJumping
        VB: PlayerMovement.timeUnableToBeDeclaredNotJumping
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: timeUnableToBeDeclaredNotJumping
        path: ''
        startLine: 2511
      syntax:
        content:
          CSharp: public float timeUnableToBeDeclaredNotJumping
          VB: Public timeUnableToBeDeclaredNotJumping As Single
        return:
          type: System.Single
    - id: Global.PlayerMovement.groundCheckDistance
      commentId: F:Global.PlayerMovement.groundCheckDistance
      language: CSharp
      name:
        CSharp: groundCheckDistance
        VB: groundCheckDistance
      nameWithType:
        CSharp: PlayerMovement.groundCheckDistance
        VB: PlayerMovement.groundCheckDistance
      qualifiedName:
        CSharp: PlayerMovement.groundCheckDistance
        VB: PlayerMovement.groundCheckDistance
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: groundCheckDistance
        path: ''
        startLine: 2512
      syntax:
        content:
          CSharp: public float groundCheckDistance
          VB: Public groundCheckDistance As Single
        return:
          type: System.Single
    - id: Global.PlayerMovement.IsBasicallyGrounded
      commentId: M:Global.PlayerMovement.IsBasicallyGrounded
      language: CSharp
      name:
        CSharp: IsBasicallyGrounded()
        VB: IsBasicallyGrounded()
      nameWithType:
        CSharp: PlayerMovement.IsBasicallyGrounded()
        VB: PlayerMovement.IsBasicallyGrounded()
      qualifiedName:
        CSharp: PlayerMovement.IsBasicallyGrounded()
        VB: PlayerMovement.IsBasicallyGrounded()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: IsBasicallyGrounded
        path: ''
        startLine: 2694
      syntax:
        content:
          CSharp: public bool IsBasicallyGrounded()
          VB: Public Function IsBasicallyGrounded() As Boolean
        return:
          type: System.Boolean
      overload: Global.PlayerMovement.IsBasicallyGrounded*
    - id: Global.PlayerMovement.IsPhysicallyGrounded
      commentId: M:Global.PlayerMovement.IsPhysicallyGrounded
      language: CSharp
      name:
        CSharp: IsPhysicallyGrounded()
        VB: IsPhysicallyGrounded()
      nameWithType:
        CSharp: PlayerMovement.IsPhysicallyGrounded()
        VB: PlayerMovement.IsPhysicallyGrounded()
      qualifiedName:
        CSharp: PlayerMovement.IsPhysicallyGrounded()
        VB: PlayerMovement.IsPhysicallyGrounded()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: IsPhysicallyGrounded
        path: ''
        startLine: 2709
      syntax:
        content:
          CSharp: public bool IsPhysicallyGrounded()
          VB: Public Function IsPhysicallyGrounded() As Boolean
        return:
          type: System.Boolean
      overload: Global.PlayerMovement.IsPhysicallyGrounded*
    - id: Global.PlayerMovement.GetPointInBoxCollider(BoxCollider2D,System.Single,System.Single)
      commentId: M:Global.PlayerMovement.GetPointInBoxCollider(BoxCollider2D,System.Single,System.Single)
      language: CSharp
      name:
        CSharp: GetPointInBoxCollider(BoxCollider2D, float, float)
        VB: GetPointInBoxCollider(BoxCollider2D, Single, Single)
      nameWithType:
        CSharp: PlayerMovement.GetPointInBoxCollider(BoxCollider2D, float, float)
        VB: PlayerMovement.GetPointInBoxCollider(BoxCollider2D, Single, Single)
      qualifiedName:
        CSharp: PlayerMovement.GetPointInBoxCollider(BoxCollider2D, float, float)
        VB: PlayerMovement.GetPointInBoxCollider(BoxCollider2D, Single, Single)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: GetPointInBoxCollider
        path: ''
        startLine: 2723
      syntax:
        content:
          CSharp: public Vector2 GetPointInBoxCollider(BoxCollider2D boxCollider2D, float horizontal, float vertical)
          VB: Public Function GetPointInBoxCollider(boxCollider2D As BoxCollider2D, horizontal As Single, vertical As Single) As Vector2
        parameters:
        - id: boxCollider2D
          type: Global.BoxCollider2D
        - id: horizontal
          type: System.Single
        - id: vertical
          type: System.Single
        return:
          type: Global.Vector2
      overload: Global.PlayerMovement.GetPointInBoxCollider*
    - id: Global.PlayerMovement.StopVelocity
      commentId: M:Global.PlayerMovement.StopVelocity
      language: CSharp
      name:
        CSharp: StopVelocity()
        VB: StopVelocity()
      nameWithType:
        CSharp: PlayerMovement.StopVelocity()
        VB: PlayerMovement.StopVelocity()
      qualifiedName:
        CSharp: PlayerMovement.StopVelocity()
        VB: PlayerMovement.StopVelocity()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: StopVelocity
        path: ''
        startLine: 2732
      syntax:
        content:
          CSharp: public void StopVelocity()
          VB: Public Sub StopVelocity()
      overload: Global.PlayerMovement.StopVelocity*
  - id: Global.UseItem
    commentId: T:Global.UseItem
    language: CSharp
    name:
      CSharp: UseItem
      VB: UseItem
    nameWithType:
      CSharp: UseItem
      VB: UseItem
    qualifiedName:
      CSharp: UseItem
      VB: UseItem
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: UseItem
      path: ''
      startLine: 2741
    syntax:
      content:
        CSharp: 'public class UseItem : MonoBehaviour'
        VB: Public Class UseItem Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.UseItem.holdTime
      commentId: F:Global.UseItem.holdTime
      language: CSharp
      name:
        CSharp: holdTime
        VB: holdTime
      nameWithType:
        CSharp: UseItem.holdTime
        VB: UseItem.holdTime
      qualifiedName:
        CSharp: UseItem.holdTime
        VB: UseItem.holdTime
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: holdTime
        path: ''
        startLine: 2747
      syntax:
        content:
          CSharp: public float holdTime
          VB: Public holdTime As Single
        return:
          type: System.Single
    - id: Global.UseItem.head
      commentId: F:Global.UseItem.head
      language: CSharp
      name:
        CSharp: head
        VB: head
      nameWithType:
        CSharp: UseItem.head
        VB: UseItem.head
      qualifiedName:
        CSharp: UseItem.head
        VB: UseItem.head
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: head
        path: ''
        startLine: 2750
      syntax:
        content:
          CSharp: public Transform head
          VB: Public head As Transform
        return:
          type: Global.Transform
    - id: Global.UseItem.PickUpItem(GameObject)
      commentId: M:Global.UseItem.PickUpItem(GameObject)
      language: CSharp
      name:
        CSharp: PickUpItem(GameObject)
        VB: PickUpItem(GameObject)
      nameWithType:
        CSharp: UseItem.PickUpItem(GameObject)
        VB: UseItem.PickUpItem(GameObject)
      qualifiedName:
        CSharp: UseItem.PickUpItem(GameObject)
        VB: UseItem.PickUpItem(GameObject)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: PickUpItem
        path: ''
        startLine: 2780
      syntax:
        content:
          CSharp: public void PickUpItem(GameObject item)
          VB: Public Sub PickUpItem(item As GameObject)
        parameters:
        - id: item
          type: Global.GameObject
      overload: Global.UseItem.PickUpItem*
    - id: Global.UseItem.DropItem
      commentId: M:Global.UseItem.DropItem
      language: CSharp
      name:
        CSharp: DropItem()
        VB: DropItem()
      nameWithType:
        CSharp: UseItem.DropItem()
        VB: UseItem.DropItem()
      qualifiedName:
        CSharp: UseItem.DropItem()
        VB: UseItem.DropItem()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: DropItem
        path: ''
        startLine: 2802
      syntax:
        content:
          CSharp: public void DropItem()
          VB: Public Sub DropItem()
      overload: Global.UseItem.DropItem*
    - id: Global.UseItem.IsHoldingItem
      commentId: M:Global.UseItem.IsHoldingItem
      language: CSharp
      name:
        CSharp: IsHoldingItem()
        VB: IsHoldingItem()
      nameWithType:
        CSharp: UseItem.IsHoldingItem()
        VB: UseItem.IsHoldingItem()
      qualifiedName:
        CSharp: UseItem.IsHoldingItem()
        VB: UseItem.IsHoldingItem()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: IsHoldingItem
        path: ''
        startLine: 2831
      syntax:
        content:
          CSharp: public bool IsHoldingItem()
          VB: Public Function IsHoldingItem() As Boolean
        return:
          type: System.Boolean
      overload: Global.UseItem.IsHoldingItem*
  - id: Global.PlayerCameraMovement
    commentId: T:Global.PlayerCameraMovement
    language: CSharp
    name:
      CSharp: PlayerCameraMovement
      VB: PlayerCameraMovement
    nameWithType:
      CSharp: PlayerCameraMovement
      VB: PlayerCameraMovement
    qualifiedName:
      CSharp: PlayerCameraMovement
      VB: PlayerCameraMovement
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: PlayerCameraMovement
      path: ''
      startLine: 2840
    syntax:
      content:
        CSharp: 'public class PlayerCameraMovement : MonoBehaviour'
        VB: Public Class PlayerCameraMovement Inherits MonoBehaviour
    inheritance:
    - System.Object
    items:
    - id: Global.PlayerCameraMovement.weight
      commentId: F:Global.PlayerCameraMovement.weight
      language: CSharp
      name:
        CSharp: weight
        VB: weight
      nameWithType:
        CSharp: PlayerCameraMovement.weight
        VB: PlayerCameraMovement.weight
      qualifiedName:
        CSharp: PlayerCameraMovement.weight
        VB: PlayerCameraMovement.weight
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: weight
        path: ''
        startLine: 2844
      syntax:
        content:
          CSharp: public float weight
          VB: Public weight As Single
        return:
          type: System.Single
    - id: Global.PlayerCameraMovement.speed
      commentId: F:Global.PlayerCameraMovement.speed
      language: CSharp
      name:
        CSharp: speed
        VB: speed
      nameWithType:
        CSharp: PlayerCameraMovement.speed
        VB: PlayerCameraMovement.speed
      qualifiedName:
        CSharp: PlayerCameraMovement.speed
        VB: PlayerCameraMovement.speed
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: speed
        path: ''
        startLine: 2845
      syntax:
        content:
          CSharp: public float speed
          VB: Public speed As Single
        return:
          type: System.Single
    - id: Global.PlayerCameraMovement.lowerBound
      commentId: F:Global.PlayerCameraMovement.lowerBound
      language: CSharp
      name:
        CSharp: lowerBound
        VB: lowerBound
      nameWithType:
        CSharp: PlayerCameraMovement.lowerBound
        VB: PlayerCameraMovement.lowerBound
      qualifiedName:
        CSharp: PlayerCameraMovement.lowerBound
        VB: PlayerCameraMovement.lowerBound
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: lowerBound
        path: ''
        startLine: 2847
      syntax:
        content:
          CSharp: public float lowerBound
          VB: Public lowerBound As Single
        return:
          type: System.Single
    - id: Global.PlayerCameraMovement.winScene
      commentId: F:Global.PlayerCameraMovement.winScene
      language: CSharp
      name:
        CSharp: winScene
        VB: winScene
      nameWithType:
        CSharp: PlayerCameraMovement.winScene
        VB: PlayerCameraMovement.winScene
      qualifiedName:
        CSharp: PlayerCameraMovement.winScene
        VB: PlayerCameraMovement.winScene
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: winScene
        path: ''
        startLine: 2848
      syntax:
        content:
          CSharp: public bool winScene
          VB: Public winScene As Boolean
        return:
          type: System.Boolean
    - id: Global.PlayerCameraMovement.staticCamera
      commentId: F:Global.PlayerCameraMovement.staticCamera
      language: CSharp
      name:
        CSharp: staticCamera
        VB: staticCamera
      nameWithType:
        CSharp: PlayerCameraMovement.staticCamera
        VB: PlayerCameraMovement.staticCamera
      qualifiedName:
        CSharp: PlayerCameraMovement.staticCamera
        VB: PlayerCameraMovement.staticCamera
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: staticCamera
        path: ''
        startLine: 2850
      syntax:
        content:
          CSharp: public bool staticCamera
          VB: Public staticCamera As Boolean
        return:
          type: System.Boolean
    - id: Global.PlayerCameraMovement.WinScene(GameObject)
      commentId: M:Global.PlayerCameraMovement.WinScene(GameObject)
      language: CSharp
      name:
        CSharp: WinScene(GameObject)
        VB: WinScene(GameObject)
      nameWithType:
        CSharp: PlayerCameraMovement.WinScene(GameObject)
        VB: PlayerCameraMovement.WinScene(GameObject)
      qualifiedName:
        CSharp: PlayerCameraMovement.WinScene(GameObject)
        VB: PlayerCameraMovement.WinScene(GameObject)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: Global
      source:
        id: WinScene
        path: ''
        startLine: 2905
      syntax:
        content:
          CSharp: public void WinScene(GameObject player)
          VB: Public Sub WinScene(player As GameObject)
        parameters:
        - id: player
          type: Global.GameObject
      overload: Global.PlayerCameraMovement.WinScene*
  - id: Global.Trevor
    commentId: T:Global.Trevor
    language: CSharp
    name:
      CSharp: Trevor
      VB: Trevor
    nameWithType:
      CSharp: Trevor
      VB: Trevor
    qualifiedName:
      CSharp: Trevor
      VB: Trevor
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: Global
    source:
      id: Trevor
      path: ''
      startLine: 2927
    syntax:
      content:
        CSharp: 'public class Trevor : MonoBehaviour'
        VB: Public Class Trevor Inherits MonoBehaviour
    inheritance:
    - System.Object
    items: []
references:
  System:
    name:
      CSharp:
      - id: System
        name: System
        isExternal: true
      VB:
      - id: System
        name: System
        isExternal: true
    nameWithType:
      CSharp:
      - id: System
        name: System
        isExternal: true
      VB:
      - id: System
        name: System
        isExternal: true
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      VB:
      - id: System
        name: System
        isExternal: true
    isDefinition: true
    commentId: N:System
  System.Single:
    name:
      CSharp:
      - id: System.Single
        name: float
        isExternal: true
      VB:
      - id: System.Single
        name: Single
        isExternal: true
    nameWithType:
      CSharp:
      - id: System.Single
        name: float
        isExternal: true
      VB:
      - id: System.Single
        name: Single
        isExternal: true
    qualifiedName:
      CSharp:
      - id: System.Single
        name: float
        isExternal: true
      VB:
      - id: System.Single
        name: Single
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Single
  Global.ParallaxLayer.Move*:
    name:
      CSharp:
      - id: Global.ParallaxLayer.Move*
        name: Move
      VB:
      - id: Global.ParallaxLayer.Move*
        name: Move
    nameWithType:
      CSharp:
      - id: Global.ParallaxLayer*
        name: ParallaxLayer
      - name: .
      - id: Global.ParallaxLayer.Move*
        name: Move
      VB:
      - id: Global.ParallaxLayer*
        name: ParallaxLayer
      - name: .
      - id: Global.ParallaxLayer.Move*
        name: Move
    qualifiedName:
      CSharp:
      - id: Global.ParallaxLayer*
        name: ParallaxLayer
      - name: .
      - id: Global.ParallaxLayer.Move*
        name: Move
      VB:
      - id: Global.ParallaxLayer*
        name: ParallaxLayer
      - name: .
      - id: Global.ParallaxLayer.Move*
        name: Move
    isDefinition: true
    commentId: Overload:Global.ParallaxLayer.Move
  Global.ParallaxLayer:
    name:
      CSharp:
      - id: Global.ParallaxLayer
        name: ParallaxLayer
      VB:
      - id: Global.ParallaxLayer
        name: ParallaxLayer
    nameWithType:
      CSharp:
      - id: Global.ParallaxLayer
        name: ParallaxLayer
      VB:
      - id: Global.ParallaxLayer
        name: ParallaxLayer
    qualifiedName:
      CSharp:
      - id: Global.ParallaxLayer
        name: ParallaxLayer
      VB:
      - id: Global.ParallaxLayer
        name: ParallaxLayer
    isDefinition: true
    commentId: T:Global.ParallaxLayer
  Global.SpriteRenderer:
    name:
      CSharp:
      - id: Global.SpriteRenderer
        name: SpriteRenderer
        isExternal: true
      VB:
      - id: Global.SpriteRenderer
        name: SpriteRenderer
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.SpriteRenderer
        name: SpriteRenderer
        isExternal: true
      VB:
      - id: Global.SpriteRenderer
        name: SpriteRenderer
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.SpriteRenderer
        name: SpriteRenderer
        isExternal: true
      VB:
      - id: Global.SpriteRenderer
        name: SpriteRenderer
        isExternal: true
    isDefinition: true
  Global.DayNightCycle:
    name:
      CSharp:
      - id: Global.DayNightCycle
        name: DayNightCycle
      VB:
      - id: Global.DayNightCycle
        name: DayNightCycle
    nameWithType:
      CSharp:
      - id: Global.DayNightCycle
        name: DayNightCycle
      VB:
      - id: Global.DayNightCycle
        name: DayNightCycle
    qualifiedName:
      CSharp:
      - id: Global.DayNightCycle
        name: DayNightCycle
      VB:
      - id: Global.DayNightCycle
        name: DayNightCycle
    isDefinition: true
    commentId: T:Global.DayNightCycle
  Global.ParallaxCamera.ParallaxCameraDelegate:
    name:
      CSharp:
      - id: Global.ParallaxCamera
        name: ParallaxCamera
      - name: .
      - id: Global.ParallaxCamera.ParallaxCameraDelegate
        name: ParallaxCameraDelegate
      VB:
      - id: Global.ParallaxCamera
        name: ParallaxCamera
      - name: .
      - id: Global.ParallaxCamera.ParallaxCameraDelegate
        name: ParallaxCameraDelegate
    nameWithType:
      CSharp:
      - id: Global.ParallaxCamera
        name: ParallaxCamera
      - name: .
      - id: Global.ParallaxCamera.ParallaxCameraDelegate
        name: ParallaxCameraDelegate
      VB:
      - id: Global.ParallaxCamera
        name: ParallaxCamera
      - name: .
      - id: Global.ParallaxCamera.ParallaxCameraDelegate
        name: ParallaxCameraDelegate
    qualifiedName:
      CSharp:
      - id: Global.ParallaxCamera
        name: ParallaxCamera
      - name: .
      - id: Global.ParallaxCamera.ParallaxCameraDelegate
        name: ParallaxCameraDelegate
      VB:
      - id: Global.ParallaxCamera
        name: ParallaxCamera
      - name: .
      - id: Global.ParallaxCamera.ParallaxCameraDelegate
        name: ParallaxCameraDelegate
    isDefinition: true
    commentId: T:Global.ParallaxCamera.ParallaxCameraDelegate
  Global.ParallaxCamera:
    name:
      CSharp:
      - id: Global.ParallaxCamera
        name: ParallaxCamera
      VB:
      - id: Global.ParallaxCamera
        name: ParallaxCamera
    nameWithType:
      CSharp:
      - id: Global.ParallaxCamera
        name: ParallaxCamera
      VB:
      - id: Global.ParallaxCamera
        name: ParallaxCamera
    qualifiedName:
      CSharp:
      - id: Global.ParallaxCamera
        name: ParallaxCamera
      VB:
      - id: Global.ParallaxCamera
        name: ParallaxCamera
    isDefinition: true
    commentId: T:Global.ParallaxCamera
  Global.ParallaxBackground:
    name:
      CSharp:
      - id: Global.ParallaxBackground
        name: ParallaxBackground
      VB:
      - id: Global.ParallaxBackground
        name: ParallaxBackground
    nameWithType:
      CSharp:
      - id: Global.ParallaxBackground
        name: ParallaxBackground
      VB:
      - id: Global.ParallaxBackground
        name: ParallaxBackground
    qualifiedName:
      CSharp:
      - id: Global.ParallaxBackground
        name: ParallaxBackground
      VB:
      - id: Global.ParallaxBackground
        name: ParallaxBackground
    isDefinition: true
    commentId: T:Global.ParallaxBackground
  Global.TextMeshProUGUI:
    name:
      CSharp:
      - id: Global.TextMeshProUGUI
        name: TextMeshProUGUI
        isExternal: true
      VB:
      - id: Global.TextMeshProUGUI
        name: TextMeshProUGUI
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.TextMeshProUGUI
        name: TextMeshProUGUI
        isExternal: true
      VB:
      - id: Global.TextMeshProUGUI
        name: TextMeshProUGUI
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.TextMeshProUGUI
        name: TextMeshProUGUI
        isExternal: true
      VB:
      - id: Global.TextMeshProUGUI
        name: TextMeshProUGUI
        isExternal: true
    isDefinition: true
  Global.PongScorekeeper:
    name:
      CSharp:
      - id: Global.PongScorekeeper
        name: PongScorekeeper
      VB:
      - id: Global.PongScorekeeper
        name: PongScorekeeper
    nameWithType:
      CSharp:
      - id: Global.PongScorekeeper
        name: PongScorekeeper
      VB:
      - id: Global.PongScorekeeper
        name: PongScorekeeper
    qualifiedName:
      CSharp:
      - id: Global.PongScorekeeper
        name: PongScorekeeper
      VB:
      - id: Global.PongScorekeeper
        name: PongScorekeeper
    isDefinition: true
    commentId: T:Global.PongScorekeeper
  Global.Vector2:
    name:
      CSharp:
      - id: Global.Vector2
        name: Vector2
        isExternal: true
      VB:
      - id: Global.Vector2
        name: Vector2
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.Vector2
        name: Vector2
        isExternal: true
      VB:
      - id: Global.Vector2
        name: Vector2
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.Vector2
        name: Vector2
        isExternal: true
      VB:
      - id: Global.Vector2
        name: Vector2
        isExternal: true
    isDefinition: true
  Global.PongBallBehavior.IncreaseSpeed*:
    name:
      CSharp:
      - id: Global.PongBallBehavior.IncreaseSpeed*
        name: IncreaseSpeed
      VB:
      - id: Global.PongBallBehavior.IncreaseSpeed*
        name: IncreaseSpeed
    nameWithType:
      CSharp:
      - id: Global.PongBallBehavior*
        name: PongBallBehavior
      - name: .
      - id: Global.PongBallBehavior.IncreaseSpeed*
        name: IncreaseSpeed
      VB:
      - id: Global.PongBallBehavior*
        name: PongBallBehavior
      - name: .
      - id: Global.PongBallBehavior.IncreaseSpeed*
        name: IncreaseSpeed
    qualifiedName:
      CSharp:
      - id: Global.PongBallBehavior*
        name: PongBallBehavior
      - name: .
      - id: Global.PongBallBehavior.IncreaseSpeed*
        name: IncreaseSpeed
      VB:
      - id: Global.PongBallBehavior*
        name: PongBallBehavior
      - name: .
      - id: Global.PongBallBehavior.IncreaseSpeed*
        name: IncreaseSpeed
    isDefinition: true
    commentId: Overload:Global.PongBallBehavior.IncreaseSpeed
  Global.PongBallBehavior:
    name:
      CSharp:
      - id: Global.PongBallBehavior
        name: PongBallBehavior
      VB:
      - id: Global.PongBallBehavior
        name: PongBallBehavior
    nameWithType:
      CSharp:
      - id: Global.PongBallBehavior
        name: PongBallBehavior
      VB:
      - id: Global.PongBallBehavior
        name: PongBallBehavior
    qualifiedName:
      CSharp:
      - id: Global.PongBallBehavior
        name: PongBallBehavior
      VB:
      - id: Global.PongBallBehavior
        name: PongBallBehavior
    isDefinition: true
    commentId: T:Global.PongBallBehavior
  System.Boolean:
    name:
      CSharp:
      - id: System.Boolean
        name: bool
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        isExternal: true
    nameWithType:
      CSharp:
      - id: System.Boolean
        name: bool
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        isExternal: true
    qualifiedName:
      CSharp:
      - id: System.Boolean
        name: bool
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Boolean
  Global.PongPaddleBehavior:
    name:
      CSharp:
      - id: Global.PongPaddleBehavior
        name: PongPaddleBehavior
      VB:
      - id: Global.PongPaddleBehavior
        name: PongPaddleBehavior
    nameWithType:
      CSharp:
      - id: Global.PongPaddleBehavior
        name: PongPaddleBehavior
      VB:
      - id: Global.PongPaddleBehavior
        name: PongPaddleBehavior
    qualifiedName:
      CSharp:
      - id: Global.PongPaddleBehavior
        name: PongPaddleBehavior
      VB:
      - id: Global.PongPaddleBehavior
        name: PongPaddleBehavior
    isDefinition: true
    commentId: T:Global.PongPaddleBehavior
  Global.List`1:
    name:
      CSharp:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: <
      - name: ''
      - name: '>'
      VB:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: ''
      - name: )
    nameWithType:
      CSharp:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: <
      - name: ''
      - name: '>'
      VB:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: ''
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: <
      - name: ''
      - name: '>'
      VB:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: ''
      - name: )
    isDefinition: true
  Global.List{GameObject}:
    name:
      CSharp:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.GameObject
        name: GameObject
        isExternal: true
      - name: '>'
      VB:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.GameObject
        name: GameObject
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.GameObject
        name: GameObject
        isExternal: true
      - name: '>'
      VB:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.GameObject
        name: GameObject
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.GameObject
        name: GameObject
        isExternal: true
      - name: '>'
      VB:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.GameObject
        name: GameObject
        isExternal: true
      - name: )
    isDefinition: false
    definition: Global.List`1
    commentId: '!:Global.List{GameObject}'
  Global.HubPolygonCreator:
    name:
      CSharp:
      - id: Global.HubPolygonCreator
        name: HubPolygonCreator
      VB:
      - id: Global.HubPolygonCreator
        name: HubPolygonCreator
    nameWithType:
      CSharp:
      - id: Global.HubPolygonCreator
        name: HubPolygonCreator
      VB:
      - id: Global.HubPolygonCreator
        name: HubPolygonCreator
    qualifiedName:
      CSharp:
      - id: Global.HubPolygonCreator
        name: HubPolygonCreator
      VB:
      - id: Global.HubPolygonCreator
        name: HubPolygonCreator
    isDefinition: true
    commentId: T:Global.HubPolygonCreator
  Global.HubManager:
    name:
      CSharp:
      - id: Global.HubManager
        name: HubManager
      VB:
      - id: Global.HubManager
        name: HubManager
    nameWithType:
      CSharp:
      - id: Global.HubManager
        name: HubManager
      VB:
      - id: Global.HubManager
        name: HubManager
    qualifiedName:
      CSharp:
      - id: Global.HubManager
        name: HubManager
      VB:
      - id: Global.HubManager
        name: HubManager
    isDefinition: true
    commentId: T:Global.HubManager
  Global.GameObject:
    name:
      CSharp:
      - id: Global.GameObject
        name: GameObject
        isExternal: true
      VB:
      - id: Global.GameObject
        name: GameObject
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.GameObject
        name: GameObject
        isExternal: true
      VB:
      - id: Global.GameObject
        name: GameObject
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.GameObject
        name: GameObject
        isExternal: true
      VB:
      - id: Global.GameObject
        name: GameObject
        isExternal: true
    isDefinition: true
  System.String:
    name:
      CSharp:
      - id: System.String
        name: string
        isExternal: true
      VB:
      - id: System.String
        name: String
        isExternal: true
    nameWithType:
      CSharp:
      - id: System.String
        name: string
        isExternal: true
      VB:
      - id: System.String
        name: String
        isExternal: true
    qualifiedName:
      CSharp:
      - id: System.String
        name: string
        isExternal: true
      VB:
      - id: System.String
        name: String
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.String
  Global.HubManager.LoadScene*:
    name:
      CSharp:
      - id: Global.HubManager.LoadScene*
        name: LoadScene
      VB:
      - id: Global.HubManager.LoadScene*
        name: LoadScene
    nameWithType:
      CSharp:
      - id: Global.HubManager*
        name: HubManager
      - name: .
      - id: Global.HubManager.LoadScene*
        name: LoadScene
      VB:
      - id: Global.HubManager*
        name: HubManager
      - name: .
      - id: Global.HubManager.LoadScene*
        name: LoadScene
    qualifiedName:
      CSharp:
      - id: Global.HubManager*
        name: HubManager
      - name: .
      - id: Global.HubManager.LoadScene*
        name: LoadScene
      VB:
      - id: Global.HubManager*
        name: HubManager
      - name: .
      - id: Global.HubManager.LoadScene*
        name: LoadScene
    isDefinition: true
    commentId: Overload:Global.HubManager.LoadScene
  Global.HubManager.UnloadGameScene*:
    name:
      CSharp:
      - id: Global.HubManager.UnloadGameScene*
        name: UnloadGameScene
      VB:
      - id: Global.HubManager.UnloadGameScene*
        name: UnloadGameScene
    nameWithType:
      CSharp:
      - id: Global.HubManager*
        name: HubManager
      - name: .
      - id: Global.HubManager.UnloadGameScene*
        name: UnloadGameScene
      VB:
      - id: Global.HubManager*
        name: HubManager
      - name: .
      - id: Global.HubManager.UnloadGameScene*
        name: UnloadGameScene
    qualifiedName:
      CSharp:
      - id: Global.HubManager*
        name: HubManager
      - name: .
      - id: Global.HubManager.UnloadGameScene*
        name: UnloadGameScene
      VB:
      - id: Global.HubManager*
        name: HubManager
      - name: .
      - id: Global.HubManager.UnloadGameScene*
        name: UnloadGameScene
    isDefinition: true
    commentId: Overload:Global.HubManager.UnloadGameScene
  Global.ObstacleCourse:
    name:
      CSharp:
      - id: Global.ObstacleCourse
        name: ObstacleCourse
      VB:
      - id: Global.ObstacleCourse
        name: ObstacleCourse
    nameWithType:
      CSharp:
      - id: Global.ObstacleCourse
        name: ObstacleCourse
      VB:
      - id: Global.ObstacleCourse
        name: ObstacleCourse
    qualifiedName:
      CSharp:
      - id: Global.ObstacleCourse
        name: ObstacleCourse
      VB:
      - id: Global.ObstacleCourse
        name: ObstacleCourse
    isDefinition: true
    commentId: T:Global.ObstacleCourse
  Global.List{SoundEffect}:
    name:
      CSharp:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.SoundEffect
        name: SoundEffect
      - name: '>'
      VB:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.SoundEffect
        name: SoundEffect
      - name: )
    nameWithType:
      CSharp:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.SoundEffect
        name: SoundEffect
      - name: '>'
      VB:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.SoundEffect
        name: SoundEffect
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.SoundEffect
        name: SoundEffect
      - name: '>'
      VB:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.SoundEffect
        name: SoundEffect
      - name: )
    isDefinition: false
    definition: Global.List`1
    commentId: '!:Global.List{SoundEffect}'
  Global.AudioManager:
    name:
      CSharp:
      - id: Global.AudioManager
        name: AudioManager
      VB:
      - id: Global.AudioManager
        name: AudioManager
    nameWithType:
      CSharp:
      - id: Global.AudioManager
        name: AudioManager
      VB:
      - id: Global.AudioManager
        name: AudioManager
    qualifiedName:
      CSharp:
      - id: Global.AudioManager
        name: AudioManager
      VB:
      - id: Global.AudioManager
        name: AudioManager
    isDefinition: true
    commentId: T:Global.AudioManager
  Global.AudioManager.PlaySound*:
    name:
      CSharp:
      - id: Global.AudioManager.PlaySound*
        name: PlaySound
      VB:
      - id: Global.AudioManager.PlaySound*
        name: PlaySound
    nameWithType:
      CSharp:
      - id: Global.AudioManager*
        name: AudioManager
      - name: .
      - id: Global.AudioManager.PlaySound*
        name: PlaySound
      VB:
      - id: Global.AudioManager*
        name: AudioManager
      - name: .
      - id: Global.AudioManager.PlaySound*
        name: PlaySound
    qualifiedName:
      CSharp:
      - id: Global.AudioManager*
        name: AudioManager
      - name: .
      - id: Global.AudioManager.PlaySound*
        name: PlaySound
      VB:
      - id: Global.AudioManager*
        name: AudioManager
      - name: .
      - id: Global.AudioManager.PlaySound*
        name: PlaySound
    isDefinition: true
    commentId: Overload:Global.AudioManager.PlaySound
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        isExternal: true
    nameWithType:
      CSharp:
      - id: System.Object
        name: object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        isExternal: true
    qualifiedName:
      CSharp:
      - id: System.Object
        name: object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  System.Object.Equals(System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object)
        name: Equals
        isExternal: true
      - name: (
      - id: System.Object
        name: object
        isExternal: true
      - name: )
      VB:
      - id: System.Object.Equals(System.Object)
        name: Equals
        isExternal: true
      - name: (
      - id: System.Object
        name: Object
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: System.Object
        name: object
        isExternal: true
      - name: .
      - id: System.Object.Equals(System.Object)
        name: Equals
        isExternal: true
      - name: (
      - id: System.Object
        name: object
        isExternal: true
      - name: )
      VB:
      - id: System.Object
        name: Object
        isExternal: true
      - name: .
      - id: System.Object.Equals(System.Object)
        name: Equals
        isExternal: true
      - name: (
      - id: System.Object
        name: Object
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: System.Object
        name: object
        isExternal: true
      - name: .
      - id: System.Object.Equals(System.Object)
        name: Equals
        isExternal: true
      - name: (
      - id: System.Object
        name: object
        isExternal: true
      - name: )
      VB:
      - id: System.Object
        name: Object
        isExternal: true
      - name: .
      - id: System.Object.Equals(System.Object)
        name: Equals
        isExternal: true
      - name: (
      - id: System.Object
        name: Object
        isExternal: true
      - name: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object)
  System.Object.Equals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        isExternal: true
      - name: (
      - id: System.Object
        name: object
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Object
        name: object
        isExternal: true
      - name: )
      VB:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        isExternal: true
      - name: (
      - id: System.Object
        name: Object
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Object
        name: Object
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: System.Object
        name: object
        isExternal: true
      - name: .
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        isExternal: true
      - name: (
      - id: System.Object
        name: object
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Object
        name: object
        isExternal: true
      - name: )
      VB:
      - id: System.Object
        name: Object
        isExternal: true
      - name: .
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        isExternal: true
      - name: (
      - id: System.Object
        name: Object
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Object
        name: Object
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: System.Object
        name: object
        isExternal: true
      - name: .
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        isExternal: true
      - name: (
      - id: System.Object
        name: object
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Object
        name: object
        isExternal: true
      - name: )
      VB:
      - id: System.Object
        name: Object
        isExternal: true
      - name: .
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        isExternal: true
      - name: (
      - id: System.Object
        name: Object
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Object
        name: Object
        isExternal: true
      - name: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object,System.Object)
  System.Object.GetHashCode:
    name:
      CSharp:
      - id: System.Object.GetHashCode
        name: GetHashCode
        isExternal: true
      - name: (
      - name: )
      VB:
      - id: System.Object.GetHashCode
        name: GetHashCode
        isExternal: true
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: System.Object
        name: object
        isExternal: true
      - name: .
      - id: System.Object.GetHashCode
        name: GetHashCode
        isExternal: true
      - name: (
      - name: )
      VB:
      - id: System.Object
        name: Object
        isExternal: true
      - name: .
      - id: System.Object.GetHashCode
        name: GetHashCode
        isExternal: true
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: System.Object
        name: object
        isExternal: true
      - name: .
      - id: System.Object.GetHashCode
        name: GetHashCode
        isExternal: true
      - name: (
      - name: )
      VB:
      - id: System.Object
        name: Object
        isExternal: true
      - name: .
      - id: System.Object.GetHashCode
        name: GetHashCode
        isExternal: true
      - name: (
      - name: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetHashCode
  System.Object.GetType:
    name:
      CSharp:
      - id: System.Object.GetType
        name: GetType
        isExternal: true
      - name: (
      - name: )
      VB:
      - id: System.Object.GetType
        name: GetType
        isExternal: true
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: System.Object
        name: object
        isExternal: true
      - name: .
      - id: System.Object.GetType
        name: GetType
        isExternal: true
      - name: (
      - name: )
      VB:
      - id: System.Object
        name: Object
        isExternal: true
      - name: .
      - id: System.Object.GetType
        name: GetType
        isExternal: true
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: System.Object
        name: object
        isExternal: true
      - name: .
      - id: System.Object.GetType
        name: GetType
        isExternal: true
      - name: (
      - name: )
      VB:
      - id: System.Object
        name: Object
        isExternal: true
      - name: .
      - id: System.Object.GetType
        name: GetType
        isExternal: true
      - name: (
      - name: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetType
  System.Object.MemberwiseClone:
    name:
      CSharp:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        isExternal: true
      - name: (
      - name: )
      VB:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        isExternal: true
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: System.Object
        name: object
        isExternal: true
      - name: .
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        isExternal: true
      - name: (
      - name: )
      VB:
      - id: System.Object
        name: Object
        isExternal: true
      - name: .
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        isExternal: true
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: System.Object
        name: object
        isExternal: true
      - name: .
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        isExternal: true
      - name: (
      - name: )
      VB:
      - id: System.Object
        name: Object
        isExternal: true
      - name: .
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        isExternal: true
      - name: (
      - name: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.MemberwiseClone
  System.Object.ReferenceEquals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        isExternal: true
      - name: (
      - id: System.Object
        name: object
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Object
        name: object
        isExternal: true
      - name: )
      VB:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        isExternal: true
      - name: (
      - id: System.Object
        name: Object
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Object
        name: Object
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: System.Object
        name: object
        isExternal: true
      - name: .
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        isExternal: true
      - name: (
      - id: System.Object
        name: object
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Object
        name: object
        isExternal: true
      - name: )
      VB:
      - id: System.Object
        name: Object
        isExternal: true
      - name: .
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        isExternal: true
      - name: (
      - id: System.Object
        name: Object
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Object
        name: Object
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: System.Object
        name: object
        isExternal: true
      - name: .
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        isExternal: true
      - name: (
      - id: System.Object
        name: object
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Object
        name: object
        isExternal: true
      - name: )
      VB:
      - id: System.Object
        name: Object
        isExternal: true
      - name: .
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        isExternal: true
      - name: (
      - id: System.Object
        name: Object
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Object
        name: Object
        isExternal: true
      - name: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  System.Object.ToString:
    name:
      CSharp:
      - id: System.Object.ToString
        name: ToString
        isExternal: true
      - name: (
      - name: )
      VB:
      - id: System.Object.ToString
        name: ToString
        isExternal: true
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: System.Object
        name: object
        isExternal: true
      - name: .
      - id: System.Object.ToString
        name: ToString
        isExternal: true
      - name: (
      - name: )
      VB:
      - id: System.Object
        name: Object
        isExternal: true
      - name: .
      - id: System.Object.ToString
        name: ToString
        isExternal: true
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: System.Object
        name: object
        isExternal: true
      - name: .
      - id: System.Object.ToString
        name: ToString
        isExternal: true
      - name: (
      - name: )
      VB:
      - id: System.Object
        name: Object
        isExternal: true
      - name: .
      - id: System.Object.ToString
        name: ToString
        isExternal: true
      - name: (
      - name: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ToString
  Global.AudioSource:
    name:
      CSharp:
      - id: Global.AudioSource
        name: AudioSource
        isExternal: true
      VB:
      - id: Global.AudioSource
        name: AudioSource
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.AudioSource
        name: AudioSource
        isExternal: true
      VB:
      - id: Global.AudioSource
        name: AudioSource
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.AudioSource
        name: AudioSource
        isExternal: true
      VB:
      - id: Global.AudioSource
        name: AudioSource
        isExternal: true
    isDefinition: true
  Global.SoundEffect.#ctor*:
    name:
      CSharp:
      - id: Global.SoundEffect.#ctor*
        name: SoundEffect
      VB:
      - name: New
    nameWithType:
      CSharp:
      - id: Global.SoundEffect*
        name: SoundEffect
      - name: .
      - id: Global.SoundEffect.#ctor*
        name: SoundEffect
      VB:
      - id: Global.SoundEffect*
        name: SoundEffect
      - name: .
      - name: New
    qualifiedName:
      CSharp:
      - id: Global.SoundEffect*
        name: SoundEffect
      - name: .
      - id: Global.SoundEffect.#ctor*
        name: SoundEffect
      VB:
      - id: Global.SoundEffect*
        name: SoundEffect
      - name: .
      - name: New
    isDefinition: true
    commentId: Overload:Global.SoundEffect.#ctor
  Global.SoundEffect:
    name:
      CSharp:
      - id: Global.SoundEffect
        name: SoundEffect
      VB:
      - id: Global.SoundEffect
        name: SoundEffect
    nameWithType:
      CSharp:
      - id: Global.SoundEffect
        name: SoundEffect
      VB:
      - id: Global.SoundEffect
        name: SoundEffect
    qualifiedName:
      CSharp:
      - id: Global.SoundEffect
        name: SoundEffect
      VB:
      - id: Global.SoundEffect
        name: SoundEffect
    isDefinition: true
    commentId: T:Global.SoundEffect
  Global.MusicManager:
    name:
      CSharp:
      - id: Global.MusicManager
        name: MusicManager
      VB:
      - id: Global.MusicManager
        name: MusicManager
    nameWithType:
      CSharp:
      - id: Global.MusicManager
        name: MusicManager
      VB:
      - id: Global.MusicManager
        name: MusicManager
    qualifiedName:
      CSharp:
      - id: Global.MusicManager
        name: MusicManager
      VB:
      - id: Global.MusicManager
        name: MusicManager
    isDefinition: true
    commentId: T:Global.MusicManager
  Global.List{Playlist}:
    name:
      CSharp:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.Playlist
        name: Playlist
      - name: '>'
      VB:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.Playlist
        name: Playlist
      - name: )
    nameWithType:
      CSharp:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.Playlist
        name: Playlist
      - name: '>'
      VB:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.Playlist
        name: Playlist
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.Playlist
        name: Playlist
      - name: '>'
      VB:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.Playlist
        name: Playlist
      - name: )
    isDefinition: false
    definition: Global.List`1
    commentId: '!:Global.List{Playlist}'
  Global.MusicManager.StartPlaylist*:
    name:
      CSharp:
      - id: Global.MusicManager.StartPlaylist*
        name: StartPlaylist
      VB:
      - id: Global.MusicManager.StartPlaylist*
        name: StartPlaylist
    nameWithType:
      CSharp:
      - id: Global.MusicManager*
        name: MusicManager
      - name: .
      - id: Global.MusicManager.StartPlaylist*
        name: StartPlaylist
      VB:
      - id: Global.MusicManager*
        name: MusicManager
      - name: .
      - id: Global.MusicManager.StartPlaylist*
        name: StartPlaylist
    qualifiedName:
      CSharp:
      - id: Global.MusicManager*
        name: MusicManager
      - name: .
      - id: Global.MusicManager.StartPlaylist*
        name: StartPlaylist
      VB:
      - id: Global.MusicManager*
        name: MusicManager
      - name: .
      - id: Global.MusicManager.StartPlaylist*
        name: StartPlaylist
    isDefinition: true
    commentId: Overload:Global.MusicManager.StartPlaylist
  Global.MusicManager.GetActiveSceneNotTitleScreen*:
    name:
      CSharp:
      - id: Global.MusicManager.GetActiveSceneNotTitleScreen*
        name: GetActiveSceneNotTitleScreen
      VB:
      - id: Global.MusicManager.GetActiveSceneNotTitleScreen*
        name: GetActiveSceneNotTitleScreen
    nameWithType:
      CSharp:
      - id: Global.MusicManager*
        name: MusicManager
      - name: .
      - id: Global.MusicManager.GetActiveSceneNotTitleScreen*
        name: GetActiveSceneNotTitleScreen
      VB:
      - id: Global.MusicManager*
        name: MusicManager
      - name: .
      - id: Global.MusicManager.GetActiveSceneNotTitleScreen*
        name: GetActiveSceneNotTitleScreen
    qualifiedName:
      CSharp:
      - id: Global.MusicManager*
        name: MusicManager
      - name: .
      - id: Global.MusicManager.GetActiveSceneNotTitleScreen*
        name: GetActiveSceneNotTitleScreen
      VB:
      - id: Global.MusicManager*
        name: MusicManager
      - name: .
      - id: Global.MusicManager.GetActiveSceneNotTitleScreen*
        name: GetActiveSceneNotTitleScreen
    isDefinition: true
    commentId: Overload:Global.MusicManager.GetActiveSceneNotTitleScreen
  Global.AudioClip:
    name:
      CSharp:
      - id: Global.AudioClip
        name: AudioClip
        isExternal: true
      VB:
      - id: Global.AudioClip
        name: AudioClip
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.AudioClip
        name: AudioClip
        isExternal: true
      VB:
      - id: Global.AudioClip
        name: AudioClip
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.AudioClip
        name: AudioClip
        isExternal: true
      VB:
      - id: Global.AudioClip
        name: AudioClip
        isExternal: true
    isDefinition: true
    commentId: '!:Global.AudioClip'
  Global.TrackLayer.EnableTrigger:
    name:
      CSharp:
      - id: Global.TrackLayer
        name: TrackLayer
      - name: .
      - id: Global.TrackLayer.EnableTrigger
        name: EnableTrigger
      VB:
      - id: Global.TrackLayer
        name: TrackLayer
      - name: .
      - id: Global.TrackLayer.EnableTrigger
        name: EnableTrigger
    nameWithType:
      CSharp:
      - id: Global.TrackLayer
        name: TrackLayer
      - name: .
      - id: Global.TrackLayer.EnableTrigger
        name: EnableTrigger
      VB:
      - id: Global.TrackLayer
        name: TrackLayer
      - name: .
      - id: Global.TrackLayer.EnableTrigger
        name: EnableTrigger
    qualifiedName:
      CSharp:
      - id: Global.TrackLayer
        name: TrackLayer
      - name: .
      - id: Global.TrackLayer.EnableTrigger
        name: EnableTrigger
      VB:
      - id: Global.TrackLayer
        name: TrackLayer
      - name: .
      - id: Global.TrackLayer.EnableTrigger
        name: EnableTrigger
    isDefinition: true
    commentId: T:Global.TrackLayer.EnableTrigger
  Global.List{System.String}:
    name:
      CSharp:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: <
      - id: System.String
        name: string
        isExternal: true
      - name: '>'
      VB:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: System.String
        name: String
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: <
      - id: System.String
        name: string
        isExternal: true
      - name: '>'
      VB:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: System.String
        name: String
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: <
      - id: System.String
        name: string
        isExternal: true
      - name: '>'
      VB:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: System.String
        name: String
        isExternal: true
      - name: )
    isDefinition: false
    definition: Global.List`1
    commentId: '!:Global.List{System.String}'
  Global.TrackLayer:
    name:
      CSharp:
      - id: Global.TrackLayer
        name: TrackLayer
      VB:
      - id: Global.TrackLayer
        name: TrackLayer
    nameWithType:
      CSharp:
      - id: Global.TrackLayer
        name: TrackLayer
      VB:
      - id: Global.TrackLayer
        name: TrackLayer
    qualifiedName:
      CSharp:
      - id: Global.TrackLayer
        name: TrackLayer
      VB:
      - id: Global.TrackLayer
        name: TrackLayer
    isDefinition: true
    commentId: T:Global.TrackLayer
  System.SerializableAttribute:
    name:
      CSharp:
      - id: System.SerializableAttribute
        name: SerializableAttribute
        isExternal: true
      VB:
      - id: System.SerializableAttribute
        name: SerializableAttribute
        isExternal: true
    nameWithType:
      CSharp:
      - id: System.SerializableAttribute
        name: SerializableAttribute
        isExternal: true
      VB:
      - id: System.SerializableAttribute
        name: SerializableAttribute
        isExternal: true
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.SerializableAttribute
        name: SerializableAttribute
        isExternal: true
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.SerializableAttribute
        name: SerializableAttribute
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.SerializableAttribute
  System.SerializableAttribute.#ctor:
    name:
      CSharp:
      - id: System.SerializableAttribute.#ctor
        name: SerializableAttribute
        isExternal: true
      - name: (
      - name: )
      VB:
      - name: New
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: System.SerializableAttribute
        name: SerializableAttribute
        isExternal: true
      - name: .
      - id: System.SerializableAttribute.#ctor
        name: SerializableAttribute
        isExternal: true
      - name: (
      - name: )
      VB:
      - id: System.SerializableAttribute
        name: SerializableAttribute
        isExternal: true
      - name: .
      - name: New
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.SerializableAttribute
        name: SerializableAttribute
        isExternal: true
      - name: .
      - id: System.SerializableAttribute.#ctor
        name: SerializableAttribute
        isExternal: true
      - name: (
      - name: )
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.SerializableAttribute
        name: SerializableAttribute
        isExternal: true
      - name: .
      - name: New
      - name: (
      - name: )
    isDefinition: true
    parent: System.SerializableAttribute
    commentId: M:System.SerializableAttribute.#ctor
  Global.List{AudioClip}:
    name:
      CSharp:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.AudioClip
        name: AudioClip
        isExternal: true
      - name: '>'
      VB:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.AudioClip
        name: AudioClip
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.AudioClip
        name: AudioClip
        isExternal: true
      - name: '>'
      VB:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.AudioClip
        name: AudioClip
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.AudioClip
        name: AudioClip
        isExternal: true
      - name: '>'
      VB:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.AudioClip
        name: AudioClip
        isExternal: true
      - name: )
    isDefinition: false
    definition: Global.List`1
    commentId: '!:Global.List{AudioClip}'
  Global.Playlist:
    name:
      CSharp:
      - id: Global.Playlist
        name: Playlist
      VB:
      - id: Global.Playlist
        name: Playlist
    nameWithType:
      CSharp:
      - id: Global.Playlist
        name: Playlist
      VB:
      - id: Global.Playlist
        name: Playlist
    qualifiedName:
      CSharp:
      - id: Global.Playlist
        name: Playlist
      VB:
      - id: Global.Playlist
        name: Playlist
    isDefinition: true
    commentId: T:Global.Playlist
  Global.EventSystemizer:
    name:
      CSharp:
      - id: Global.EventSystemizer
        name: EventSystemizer
      VB:
      - id: Global.EventSystemizer
        name: EventSystemizer
    nameWithType:
      CSharp:
      - id: Global.EventSystemizer
        name: EventSystemizer
      VB:
      - id: Global.EventSystemizer
        name: EventSystemizer
    qualifiedName:
      CSharp:
      - id: Global.EventSystemizer
        name: EventSystemizer
      VB:
      - id: Global.EventSystemizer
        name: EventSystemizer
    isDefinition: true
    commentId: T:Global.EventSystemizer
  Global.ModeSelect:
    name:
      CSharp:
      - id: Global.ModeSelect
        name: ModeSelect
      VB:
      - id: Global.ModeSelect
        name: ModeSelect
    nameWithType:
      CSharp:
      - id: Global.ModeSelect
        name: ModeSelect
      VB:
      - id: Global.ModeSelect
        name: ModeSelect
    qualifiedName:
      CSharp:
      - id: Global.ModeSelect
        name: ModeSelect
      VB:
      - id: Global.ModeSelect
        name: ModeSelect
    isDefinition: true
    commentId: T:Global.ModeSelect
  Global.WinScreen:
    name:
      CSharp:
      - id: Global.WinScreen
        name: WinScreen
      VB:
      - id: Global.WinScreen
        name: WinScreen
    nameWithType:
      CSharp:
      - id: Global.WinScreen
        name: WinScreen
      VB:
      - id: Global.WinScreen
        name: WinScreen
    qualifiedName:
      CSharp:
      - id: Global.WinScreen
        name: WinScreen
      VB:
      - id: Global.WinScreen
        name: WinScreen
    isDefinition: true
    commentId: T:Global.WinScreen
  Global.List{TextMeshProUGUI}:
    name:
      CSharp:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.TextMeshProUGUI
        name: TextMeshProUGUI
        isExternal: true
      - name: '>'
      VB:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.TextMeshProUGUI
        name: TextMeshProUGUI
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.TextMeshProUGUI
        name: TextMeshProUGUI
        isExternal: true
      - name: '>'
      VB:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.TextMeshProUGUI
        name: TextMeshProUGUI
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.TextMeshProUGUI
        name: TextMeshProUGUI
        isExternal: true
      - name: '>'
      VB:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.TextMeshProUGUI
        name: TextMeshProUGUI
        isExternal: true
      - name: )
    isDefinition: false
    definition: Global.List`1
    commentId: '!:Global.List{TextMeshProUGUI}'
  System.Int32:
    name:
      CSharp:
      - id: System.Int32
        name: int
        isExternal: true
      VB:
      - id: System.Int32
        name: Integer
        isExternal: true
    nameWithType:
      CSharp:
      - id: System.Int32
        name: int
        isExternal: true
      VB:
      - id: System.Int32
        name: Integer
        isExternal: true
    qualifiedName:
      CSharp:
      - id: System.Int32
        name: int
        isExternal: true
      VB:
      - id: System.Int32
        name: Integer
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int32
  Global.WinScreen.ShowWinScreen*:
    name:
      CSharp:
      - id: Global.WinScreen.ShowWinScreen*
        name: ShowWinScreen
      VB:
      - id: Global.WinScreen.ShowWinScreen*
        name: ShowWinScreen
    nameWithType:
      CSharp:
      - id: Global.WinScreen*
        name: WinScreen
      - name: .
      - id: Global.WinScreen.ShowWinScreen*
        name: ShowWinScreen
      VB:
      - id: Global.WinScreen*
        name: WinScreen
      - name: .
      - id: Global.WinScreen.ShowWinScreen*
        name: ShowWinScreen
    qualifiedName:
      CSharp:
      - id: Global.WinScreen*
        name: WinScreen
      - name: .
      - id: Global.WinScreen.ShowWinScreen*
        name: ShowWinScreen
      VB:
      - id: Global.WinScreen*
        name: WinScreen
      - name: .
      - id: Global.WinScreen.ShowWinScreen*
        name: ShowWinScreen
    isDefinition: true
    commentId: Overload:Global.WinScreen.ShowWinScreen
  Global.PlayerJoinCard:
    name:
      CSharp:
      - id: Global.PlayerJoinCard
        name: PlayerJoinCard
      VB:
      - id: Global.PlayerJoinCard
        name: PlayerJoinCard
    nameWithType:
      CSharp:
      - id: Global.PlayerJoinCard
        name: PlayerJoinCard
      VB:
      - id: Global.PlayerJoinCard
        name: PlayerJoinCard
    qualifiedName:
      CSharp:
      - id: Global.PlayerJoinCard
        name: PlayerJoinCard
      VB:
      - id: Global.PlayerJoinCard
        name: PlayerJoinCard
    isDefinition: true
    commentId: T:Global.PlayerJoinCard
  Global.PlayerCardCreator:
    name:
      CSharp:
      - id: Global.PlayerCardCreator
        name: PlayerCardCreator
      VB:
      - id: Global.PlayerCardCreator
        name: PlayerCardCreator
    nameWithType:
      CSharp:
      - id: Global.PlayerCardCreator
        name: PlayerCardCreator
      VB:
      - id: Global.PlayerCardCreator
        name: PlayerCardCreator
    qualifiedName:
      CSharp:
      - id: Global.PlayerCardCreator
        name: PlayerCardCreator
      VB:
      - id: Global.PlayerCardCreator
        name: PlayerCardCreator
    isDefinition: true
    commentId: T:Global.PlayerCardCreator
  Global.PlayerCardCreator.CreateCard*:
    name:
      CSharp:
      - id: Global.PlayerCardCreator.CreateCard*
        name: CreateCard
      VB:
      - id: Global.PlayerCardCreator.CreateCard*
        name: CreateCard
    nameWithType:
      CSharp:
      - id: Global.PlayerCardCreator*
        name: PlayerCardCreator
      - name: .
      - id: Global.PlayerCardCreator.CreateCard*
        name: CreateCard
      VB:
      - id: Global.PlayerCardCreator*
        name: PlayerCardCreator
      - name: .
      - id: Global.PlayerCardCreator.CreateCard*
        name: CreateCard
    qualifiedName:
      CSharp:
      - id: Global.PlayerCardCreator*
        name: PlayerCardCreator
      - name: .
      - id: Global.PlayerCardCreator.CreateCard*
        name: CreateCard
      VB:
      - id: Global.PlayerCardCreator*
        name: PlayerCardCreator
      - name: .
      - id: Global.PlayerCardCreator.CreateCard*
        name: CreateCard
    isDefinition: true
    commentId: Overload:Global.PlayerCardCreator.CreateCard
  Global.Transform:
    name:
      CSharp:
      - id: Global.Transform
        name: Transform
        isExternal: true
      VB:
      - id: Global.Transform
        name: Transform
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.Transform
        name: Transform
        isExternal: true
      VB:
      - id: Global.Transform
        name: Transform
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.Transform
        name: Transform
        isExternal: true
      VB:
      - id: Global.Transform
        name: Transform
        isExternal: true
    isDefinition: true
  Global.Transform[]:
    name:
      CSharp:
      - id: Global.Transform
        name: Transform
        isExternal: true
      - name: '['
      - name: ']'
      VB:
      - id: Global.Transform
        name: Transform
        isExternal: true
      - name: (
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Transform
        name: Transform
        isExternal: true
      - name: '['
      - name: ']'
      VB:
      - id: Global.Transform
        name: Transform
        isExternal: true
      - name: (
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Transform
        name: Transform
        isExternal: true
      - name: '['
      - name: ']'
      VB:
      - id: Global.Transform
        name: Transform
        isExternal: true
      - name: (
      - name: )
    isDefinition: false
  Global.MovingPlatform:
    name:
      CSharp:
      - id: Global.MovingPlatform
        name: MovingPlatform
      VB:
      - id: Global.MovingPlatform
        name: MovingPlatform
    nameWithType:
      CSharp:
      - id: Global.MovingPlatform
        name: MovingPlatform
      VB:
      - id: Global.MovingPlatform
        name: MovingPlatform
    qualifiedName:
      CSharp:
      - id: Global.MovingPlatform
        name: MovingPlatform
      VB:
      - id: Global.MovingPlatform
        name: MovingPlatform
    isDefinition: true
    commentId: T:Global.MovingPlatform
  Global.ObjectVisibility:
    name:
      CSharp:
      - id: Global.ObjectVisibility
        name: ObjectVisibility
      VB:
      - id: Global.ObjectVisibility
        name: ObjectVisibility
    nameWithType:
      CSharp:
      - id: Global.ObjectVisibility
        name: ObjectVisibility
      VB:
      - id: Global.ObjectVisibility
        name: ObjectVisibility
    qualifiedName:
      CSharp:
      - id: Global.ObjectVisibility
        name: ObjectVisibility
      VB:
      - id: Global.ObjectVisibility
        name: ObjectVisibility
    isDefinition: true
    commentId: T:Global.ObjectVisibility
  Global.InfiniteScroll:
    name:
      CSharp:
      - id: Global.InfiniteScroll
        name: InfiniteScroll
      VB:
      - id: Global.InfiniteScroll
        name: InfiniteScroll
    nameWithType:
      CSharp:
      - id: Global.InfiniteScroll
        name: InfiniteScroll
      VB:
      - id: Global.InfiniteScroll
        name: InfiniteScroll
    qualifiedName:
      CSharp:
      - id: Global.InfiniteScroll
        name: InfiniteScroll
      VB:
      - id: Global.InfiniteScroll
        name: InfiniteScroll
    isDefinition: true
    commentId: T:Global.InfiniteScroll
  Global.GameManagerHelper:
    name:
      CSharp:
      - id: Global.GameManagerHelper
        name: GameManagerHelper
      VB:
      - id: Global.GameManagerHelper
        name: GameManagerHelper
    nameWithType:
      CSharp:
      - id: Global.GameManagerHelper
        name: GameManagerHelper
      VB:
      - id: Global.GameManagerHelper
        name: GameManagerHelper
    qualifiedName:
      CSharp:
      - id: Global.GameManagerHelper
        name: GameManagerHelper
      VB:
      - id: Global.GameManagerHelper
        name: GameManagerHelper
    isDefinition: true
    commentId: T:Global.GameManagerHelper
  Global.Text:
    name:
      CSharp:
      - id: Global.Text
        name: Text
        isExternal: true
      VB:
      - id: Global.Text
        name: Text
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.Text
        name: Text
        isExternal: true
      VB:
      - id: Global.Text
        name: Text
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.Text
        name: Text
        isExternal: true
      VB:
      - id: Global.Text
        name: Text
        isExternal: true
    isDefinition: true
    commentId: '!:Global.Text'
  Global.GameTimer.StartTimer*:
    name:
      CSharp:
      - id: Global.GameTimer.StartTimer*
        name: StartTimer
      VB:
      - id: Global.GameTimer.StartTimer*
        name: StartTimer
    nameWithType:
      CSharp:
      - id: Global.GameTimer*
        name: GameTimer
      - name: .
      - id: Global.GameTimer.StartTimer*
        name: StartTimer
      VB:
      - id: Global.GameTimer*
        name: GameTimer
      - name: .
      - id: Global.GameTimer.StartTimer*
        name: StartTimer
    qualifiedName:
      CSharp:
      - id: Global.GameTimer*
        name: GameTimer
      - name: .
      - id: Global.GameTimer.StartTimer*
        name: StartTimer
      VB:
      - id: Global.GameTimer*
        name: GameTimer
      - name: .
      - id: Global.GameTimer.StartTimer*
        name: StartTimer
    isDefinition: true
    commentId: Overload:Global.GameTimer.StartTimer
  Global.GameTimer:
    name:
      CSharp:
      - id: Global.GameTimer
        name: GameTimer
      VB:
      - id: Global.GameTimer
        name: GameTimer
    nameWithType:
      CSharp:
      - id: Global.GameTimer
        name: GameTimer
      VB:
      - id: Global.GameTimer
        name: GameTimer
    qualifiedName:
      CSharp:
      - id: Global.GameTimer
        name: GameTimer
      VB:
      - id: Global.GameTimer
        name: GameTimer
    isDefinition: true
    commentId: T:Global.GameTimer
  Global.HealthBarManager:
    name:
      CSharp:
      - id: Global.HealthBarManager
        name: HealthBarManager
      VB:
      - id: Global.HealthBarManager
        name: HealthBarManager
    nameWithType:
      CSharp:
      - id: Global.HealthBarManager
        name: HealthBarManager
      VB:
      - id: Global.HealthBarManager
        name: HealthBarManager
    qualifiedName:
      CSharp:
      - id: Global.HealthBarManager
        name: HealthBarManager
      VB:
      - id: Global.HealthBarManager
        name: HealthBarManager
    isDefinition: true
    commentId: T:Global.HealthBarManager
  Global.GameManager:
    name:
      CSharp:
      - id: Global.GameManager
        name: GameManager
      VB:
      - id: Global.GameManager
        name: GameManager
    nameWithType:
      CSharp:
      - id: Global.GameManager
        name: GameManager
      VB:
      - id: Global.GameManager
        name: GameManager
    qualifiedName:
      CSharp:
      - id: Global.GameManager
        name: GameManager
      VB:
      - id: Global.GameManager
        name: GameManager
    isDefinition: true
    commentId: T:Global.GameManager
  Global.GameManager.Instance*:
    name:
      CSharp:
      - id: Global.GameManager.Instance*
        name: Instance
      VB:
      - id: Global.GameManager.Instance*
        name: Instance
    nameWithType:
      CSharp:
      - id: Global.GameManager*
        name: GameManager
      - name: .
      - id: Global.GameManager.Instance*
        name: Instance
      VB:
      - id: Global.GameManager*
        name: GameManager
      - name: .
      - id: Global.GameManager.Instance*
        name: Instance
    qualifiedName:
      CSharp:
      - id: Global.GameManager*
        name: GameManager
      - name: .
      - id: Global.GameManager.Instance*
        name: Instance
      VB:
      - id: Global.GameManager*
        name: GameManager
      - name: .
      - id: Global.GameManager.Instance*
        name: Instance
    isDefinition: true
    commentId: Overload:Global.GameManager.Instance
  Global.GameManager.GameEvent:
    name:
      CSharp:
      - id: Global.GameManager
        name: GameManager
      - name: .
      - id: Global.GameManager.GameEvent
        name: GameEvent
      VB:
      - id: Global.GameManager
        name: GameManager
      - name: .
      - id: Global.GameManager.GameEvent
        name: GameEvent
    nameWithType:
      CSharp:
      - id: Global.GameManager
        name: GameManager
      - name: .
      - id: Global.GameManager.GameEvent
        name: GameEvent
      VB:
      - id: Global.GameManager
        name: GameManager
      - name: .
      - id: Global.GameManager.GameEvent
        name: GameEvent
    qualifiedName:
      CSharp:
      - id: Global.GameManager
        name: GameManager
      - name: .
      - id: Global.GameManager.GameEvent
        name: GameEvent
      VB:
      - id: Global.GameManager
        name: GameManager
      - name: .
      - id: Global.GameManager.GameEvent
        name: GameEvent
    isDefinition: true
    commentId: T:Global.GameManager.GameEvent
  Global.List{Color}:
    name:
      CSharp:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.Color
        name: Color
        isExternal: true
      - name: '>'
      VB:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.Color
        name: Color
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.Color
        name: Color
        isExternal: true
      - name: '>'
      VB:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.Color
        name: Color
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.Color
        name: Color
        isExternal: true
      - name: '>'
      VB:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.Color
        name: Color
        isExternal: true
      - name: )
    isDefinition: false
    definition: Global.List`1
    commentId: '!:Global.List{Color}'
  Global.Dictionary`2:
    name:
      CSharp:
      - id: Global.Dictionary`2
        name: Dictionary
        isExternal: true
      - name: <
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: '>'
      VB:
      - id: Global.Dictionary`2
        name: Dictionary
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Dictionary`2
        name: Dictionary
        isExternal: true
      - name: <
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: '>'
      VB:
      - id: Global.Dictionary`2
        name: Dictionary
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Dictionary`2
        name: Dictionary
        isExternal: true
      - name: <
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: '>'
      VB:
      - id: Global.Dictionary`2
        name: Dictionary
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: ''
      - name: ','
      - name: " "
      - name: ''
      - name: )
    isDefinition: true
  Global.Dictionary{GameObject,System.Single}:
    name:
      CSharp:
      - id: Global.Dictionary`2
        name: Dictionary
        isExternal: true
      - name: <
      - id: Global.GameObject
        name: GameObject
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Single
        name: float
        isExternal: true
      - name: '>'
      VB:
      - id: Global.Dictionary`2
        name: Dictionary
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.GameObject
        name: GameObject
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Single
        name: Single
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Dictionary`2
        name: Dictionary
        isExternal: true
      - name: <
      - id: Global.GameObject
        name: GameObject
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Single
        name: float
        isExternal: true
      - name: '>'
      VB:
      - id: Global.Dictionary`2
        name: Dictionary
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.GameObject
        name: GameObject
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Single
        name: Single
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Dictionary`2
        name: Dictionary
        isExternal: true
      - name: <
      - id: Global.GameObject
        name: GameObject
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Single
        name: float
        isExternal: true
      - name: '>'
      VB:
      - id: Global.Dictionary`2
        name: Dictionary
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.GameObject
        name: GameObject
        isExternal: true
      - name: ','
      - name: " "
      - id: System.Single
        name: Single
        isExternal: true
      - name: )
    isDefinition: false
    definition: Global.Dictionary`2
    commentId: '!:Global.Dictionary{GameObject,System.Single}'
  Global.GameManager.GameMode:
    name:
      CSharp:
      - id: Global.GameManager
        name: GameManager
      - name: .
      - id: Global.GameManager.GameMode
        name: GameMode
      VB:
      - id: Global.GameManager
        name: GameManager
      - name: .
      - id: Global.GameManager.GameMode
        name: GameMode
    nameWithType:
      CSharp:
      - id: Global.GameManager
        name: GameManager
      - name: .
      - id: Global.GameManager.GameMode
        name: GameMode
      VB:
      - id: Global.GameManager
        name: GameManager
      - name: .
      - id: Global.GameManager.GameMode
        name: GameMode
    qualifiedName:
      CSharp:
      - id: Global.GameManager
        name: GameManager
      - name: .
      - id: Global.GameManager.GameMode
        name: GameMode
      VB:
      - id: Global.GameManager
        name: GameManager
      - name: .
      - id: Global.GameManager.GameMode
        name: GameMode
    isDefinition: true
    commentId: T:Global.GameManager.GameMode
  Global.List{Vector2}:
    name:
      CSharp:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.Vector2
        name: Vector2
        isExternal: true
      - name: '>'
      VB:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.Vector2
        name: Vector2
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.Vector2
        name: Vector2
        isExternal: true
      - name: '>'
      VB:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.Vector2
        name: Vector2
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.Vector2
        name: Vector2
        isExternal: true
      - name: '>'
      VB:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.Vector2
        name: Vector2
        isExternal: true
      - name: )
    isDefinition: false
    definition: Global.List`1
    commentId: '!:Global.List{Vector2}'
  Global.Canvas:
    name:
      CSharp:
      - id: Global.Canvas
        name: Canvas
        isExternal: true
      VB:
      - id: Global.Canvas
        name: Canvas
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.Canvas
        name: Canvas
        isExternal: true
      VB:
      - id: Global.Canvas
        name: Canvas
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.Canvas
        name: Canvas
        isExternal: true
      VB:
      - id: Global.Canvas
        name: Canvas
        isExternal: true
    isDefinition: true
  Global.GameManager.StartGame*:
    name:
      CSharp:
      - id: Global.GameManager.StartGame*
        name: StartGame
      VB:
      - id: Global.GameManager.StartGame*
        name: StartGame
    nameWithType:
      CSharp:
      - id: Global.GameManager*
        name: GameManager
      - name: .
      - id: Global.GameManager.StartGame*
        name: StartGame
      VB:
      - id: Global.GameManager*
        name: GameManager
      - name: .
      - id: Global.GameManager.StartGame*
        name: StartGame
    qualifiedName:
      CSharp:
      - id: Global.GameManager*
        name: GameManager
      - name: .
      - id: Global.GameManager.StartGame*
        name: StartGame
      VB:
      - id: Global.GameManager*
        name: GameManager
      - name: .
      - id: Global.GameManager.StartGame*
        name: StartGame
    isDefinition: true
    commentId: Overload:Global.GameManager.StartGame
  Global.Damageable:
    name:
      CSharp:
      - id: Global.Damageable
        name: Damageable
      VB:
      - id: Global.Damageable
        name: Damageable
    nameWithType:
      CSharp:
      - id: Global.Damageable
        name: Damageable
      VB:
      - id: Global.Damageable
        name: Damageable
    qualifiedName:
      CSharp:
      - id: Global.Damageable
        name: Damageable
      VB:
      - id: Global.Damageable
        name: Damageable
    isDefinition: true
    commentId: T:Global.Damageable
  Global.GameManager.PlayerDied*:
    name:
      CSharp:
      - id: Global.GameManager.PlayerDied*
        name: PlayerDied
      VB:
      - id: Global.GameManager.PlayerDied*
        name: PlayerDied
    nameWithType:
      CSharp:
      - id: Global.GameManager*
        name: GameManager
      - name: .
      - id: Global.GameManager.PlayerDied*
        name: PlayerDied
      VB:
      - id: Global.GameManager*
        name: GameManager
      - name: .
      - id: Global.GameManager.PlayerDied*
        name: PlayerDied
    qualifiedName:
      CSharp:
      - id: Global.GameManager*
        name: GameManager
      - name: .
      - id: Global.GameManager.PlayerDied*
        name: PlayerDied
      VB:
      - id: Global.GameManager*
        name: GameManager
      - name: .
      - id: Global.GameManager.PlayerDied*
        name: PlayerDied
    isDefinition: true
    commentId: Overload:Global.GameManager.PlayerDied
  Global.GameManager.GameOver*:
    name:
      CSharp:
      - id: Global.GameManager.GameOver*
        name: GameOver
      VB:
      - id: Global.GameManager.GameOver*
        name: GameOver
    nameWithType:
      CSharp:
      - id: Global.GameManager*
        name: GameManager
      - name: .
      - id: Global.GameManager.GameOver*
        name: GameOver
      VB:
      - id: Global.GameManager*
        name: GameManager
      - name: .
      - id: Global.GameManager.GameOver*
        name: GameOver
    qualifiedName:
      CSharp:
      - id: Global.GameManager*
        name: GameManager
      - name: .
      - id: Global.GameManager.GameOver*
        name: GameOver
      VB:
      - id: Global.GameManager*
        name: GameManager
      - name: .
      - id: Global.GameManager.GameOver*
        name: GameOver
    isDefinition: true
    commentId: Overload:Global.GameManager.GameOver
  Global.GameManager.AlivePlayers*:
    name:
      CSharp:
      - id: Global.GameManager.AlivePlayers*
        name: AlivePlayers
      VB:
      - id: Global.GameManager.AlivePlayers*
        name: AlivePlayers
    nameWithType:
      CSharp:
      - id: Global.GameManager*
        name: GameManager
      - name: .
      - id: Global.GameManager.AlivePlayers*
        name: AlivePlayers
      VB:
      - id: Global.GameManager*
        name: GameManager
      - name: .
      - id: Global.GameManager.AlivePlayers*
        name: AlivePlayers
    qualifiedName:
      CSharp:
      - id: Global.GameManager*
        name: GameManager
      - name: .
      - id: Global.GameManager.AlivePlayers*
        name: AlivePlayers
      VB:
      - id: Global.GameManager*
        name: GameManager
      - name: .
      - id: Global.GameManager.AlivePlayers*
        name: AlivePlayers
    isDefinition: true
    commentId: Overload:Global.GameManager.AlivePlayers
  Global.GameManager.UpdatePlayerHoldTime*:
    name:
      CSharp:
      - id: Global.GameManager.UpdatePlayerHoldTime*
        name: UpdatePlayerHoldTime
      VB:
      - id: Global.GameManager.UpdatePlayerHoldTime*
        name: UpdatePlayerHoldTime
    nameWithType:
      CSharp:
      - id: Global.GameManager*
        name: GameManager
      - name: .
      - id: Global.GameManager.UpdatePlayerHoldTime*
        name: UpdatePlayerHoldTime
      VB:
      - id: Global.GameManager*
        name: GameManager
      - name: .
      - id: Global.GameManager.UpdatePlayerHoldTime*
        name: UpdatePlayerHoldTime
    qualifiedName:
      CSharp:
      - id: Global.GameManager*
        name: GameManager
      - name: .
      - id: Global.GameManager.UpdatePlayerHoldTime*
        name: UpdatePlayerHoldTime
      VB:
      - id: Global.GameManager*
        name: GameManager
      - name: .
      - id: Global.GameManager.UpdatePlayerHoldTime*
        name: UpdatePlayerHoldTime
    isDefinition: true
    commentId: Overload:Global.GameManager.UpdatePlayerHoldTime
  Global.FallPlatform:
    name:
      CSharp:
      - id: Global.FallPlatform
        name: FallPlatform
      VB:
      - id: Global.FallPlatform
        name: FallPlatform
    nameWithType:
      CSharp:
      - id: Global.FallPlatform
        name: FallPlatform
      VB:
      - id: Global.FallPlatform
        name: FallPlatform
    qualifiedName:
      CSharp:
      - id: Global.FallPlatform
        name: FallPlatform
      VB:
      - id: Global.FallPlatform
        name: FallPlatform
    isDefinition: true
    commentId: T:Global.FallPlatform
  Global.HatRespawn.Interact*:
    name:
      CSharp:
      - id: Global.HatRespawn.Interact*
        name: Interact
      VB:
      - id: Global.HatRespawn.Interact*
        name: Interact
    nameWithType:
      CSharp:
      - id: Global.HatRespawn*
        name: HatRespawn
      - name: .
      - id: Global.HatRespawn.Interact*
        name: Interact
      VB:
      - id: Global.HatRespawn*
        name: HatRespawn
      - name: .
      - id: Global.HatRespawn.Interact*
        name: Interact
    qualifiedName:
      CSharp:
      - id: Global.HatRespawn*
        name: HatRespawn
      - name: .
      - id: Global.HatRespawn.Interact*
        name: Interact
      VB:
      - id: Global.HatRespawn*
        name: HatRespawn
      - name: .
      - id: Global.HatRespawn.Interact*
        name: Interact
    isDefinition: true
    commentId: Overload:Global.HatRespawn.Interact
  Global.HatRespawn.OnHatDropped*:
    name:
      CSharp:
      - id: Global.HatRespawn.OnHatDropped*
        name: OnHatDropped
      VB:
      - id: Global.HatRespawn.OnHatDropped*
        name: OnHatDropped
    nameWithType:
      CSharp:
      - id: Global.HatRespawn*
        name: HatRespawn
      - name: .
      - id: Global.HatRespawn.OnHatDropped*
        name: OnHatDropped
      VB:
      - id: Global.HatRespawn*
        name: HatRespawn
      - name: .
      - id: Global.HatRespawn.OnHatDropped*
        name: OnHatDropped
    qualifiedName:
      CSharp:
      - id: Global.HatRespawn*
        name: HatRespawn
      - name: .
      - id: Global.HatRespawn.OnHatDropped*
        name: OnHatDropped
      VB:
      - id: Global.HatRespawn*
        name: HatRespawn
      - name: .
      - id: Global.HatRespawn.OnHatDropped*
        name: OnHatDropped
    isDefinition: true
    commentId: Overload:Global.HatRespawn.OnHatDropped
  Global.HatRespawn:
    name:
      CSharp:
      - id: Global.HatRespawn
        name: HatRespawn
      VB:
      - id: Global.HatRespawn
        name: HatRespawn
    nameWithType:
      CSharp:
      - id: Global.HatRespawn
        name: HatRespawn
      VB:
      - id: Global.HatRespawn
        name: HatRespawn
    qualifiedName:
      CSharp:
      - id: Global.HatRespawn
        name: HatRespawn
      VB:
      - id: Global.HatRespawn
        name: HatRespawn
    isDefinition: true
    commentId: T:Global.HatRespawn
  Global.RespawnOnTriggerEnter:
    name:
      CSharp:
      - id: Global.RespawnOnTriggerEnter
        name: RespawnOnTriggerEnter
      VB:
      - id: Global.RespawnOnTriggerEnter
        name: RespawnOnTriggerEnter
    nameWithType:
      CSharp:
      - id: Global.RespawnOnTriggerEnter
        name: RespawnOnTriggerEnter
      VB:
      - id: Global.RespawnOnTriggerEnter
        name: RespawnOnTriggerEnter
    qualifiedName:
      CSharp:
      - id: Global.RespawnOnTriggerEnter
        name: RespawnOnTriggerEnter
      VB:
      - id: Global.RespawnOnTriggerEnter
        name: RespawnOnTriggerEnter
    isDefinition: true
    commentId: T:Global.RespawnOnTriggerEnter
  Global.MapSelect:
    name:
      CSharp:
      - id: Global.MapSelect
        name: MapSelect
      VB:
      - id: Global.MapSelect
        name: MapSelect
    nameWithType:
      CSharp:
      - id: Global.MapSelect
        name: MapSelect
      VB:
      - id: Global.MapSelect
        name: MapSelect
    qualifiedName:
      CSharp:
      - id: Global.MapSelect
        name: MapSelect
      VB:
      - id: Global.MapSelect
        name: MapSelect
    isDefinition: true
    commentId: T:Global.MapSelect
  Global.Dictionary{Damageable,List{GameObject}}:
    name:
      CSharp:
      - id: Global.Dictionary`2
        name: Dictionary
        isExternal: true
      - name: <
      - id: Global.Damageable
        name: Damageable
      - name: ','
      - name: " "
      - id: Global.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.GameObject
        name: GameObject
        isExternal: true
      - name: '>'
      - name: '>'
      VB:
      - id: Global.Dictionary`2
        name: Dictionary
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.Damageable
        name: Damageable
      - name: ','
      - name: " "
      - id: Global.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.GameObject
        name: GameObject
        isExternal: true
      - name: )
      - name: )
    nameWithType:
      CSharp:
      - id: Global.Dictionary`2
        name: Dictionary
        isExternal: true
      - name: <
      - id: Global.Damageable
        name: Damageable
      - name: ','
      - name: " "
      - id: Global.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.GameObject
        name: GameObject
        isExternal: true
      - name: '>'
      - name: '>'
      VB:
      - id: Global.Dictionary`2
        name: Dictionary
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.Damageable
        name: Damageable
      - name: ','
      - name: " "
      - id: Global.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.GameObject
        name: GameObject
        isExternal: true
      - name: )
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.Dictionary`2
        name: Dictionary
        isExternal: true
      - name: <
      - id: Global.Damageable
        name: Damageable
      - name: ','
      - name: " "
      - id: Global.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.GameObject
        name: GameObject
        isExternal: true
      - name: '>'
      - name: '>'
      VB:
      - id: Global.Dictionary`2
        name: Dictionary
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.Damageable
        name: Damageable
      - name: ','
      - name: " "
      - id: Global.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.GameObject
        name: GameObject
        isExternal: true
      - name: )
      - name: )
    isDefinition: false
    definition: Global.Dictionary`2
    commentId: '!:Global.Dictionary{Damageable,List{GameObject}}'
  Global.LifeDisplayManager.HideLifeDisplay*:
    name:
      CSharp:
      - id: Global.LifeDisplayManager.HideLifeDisplay*
        name: HideLifeDisplay
      VB:
      - id: Global.LifeDisplayManager.HideLifeDisplay*
        name: HideLifeDisplay
    nameWithType:
      CSharp:
      - id: Global.LifeDisplayManager*
        name: LifeDisplayManager
      - name: .
      - id: Global.LifeDisplayManager.HideLifeDisplay*
        name: HideLifeDisplay
      VB:
      - id: Global.LifeDisplayManager*
        name: LifeDisplayManager
      - name: .
      - id: Global.LifeDisplayManager.HideLifeDisplay*
        name: HideLifeDisplay
    qualifiedName:
      CSharp:
      - id: Global.LifeDisplayManager*
        name: LifeDisplayManager
      - name: .
      - id: Global.LifeDisplayManager.HideLifeDisplay*
        name: HideLifeDisplay
      VB:
      - id: Global.LifeDisplayManager*
        name: LifeDisplayManager
      - name: .
      - id: Global.LifeDisplayManager.HideLifeDisplay*
        name: HideLifeDisplay
    isDefinition: true
    commentId: Overload:Global.LifeDisplayManager.HideLifeDisplay
  Global.LifeDisplayManager:
    name:
      CSharp:
      - id: Global.LifeDisplayManager
        name: LifeDisplayManager
      VB:
      - id: Global.LifeDisplayManager
        name: LifeDisplayManager
    nameWithType:
      CSharp:
      - id: Global.LifeDisplayManager
        name: LifeDisplayManager
      VB:
      - id: Global.LifeDisplayManager
        name: LifeDisplayManager
    qualifiedName:
      CSharp:
      - id: Global.LifeDisplayManager
        name: LifeDisplayManager
      VB:
      - id: Global.LifeDisplayManager
        name: LifeDisplayManager
    isDefinition: true
    commentId: T:Global.LifeDisplayManager
  Global.Color:
    name:
      CSharp:
      - id: Global.Color
        name: Color
        isExternal: true
      VB:
      - id: Global.Color
        name: Color
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.Color
        name: Color
        isExternal: true
      VB:
      - id: Global.Color
        name: Color
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.Color
        name: Color
        isExternal: true
      VB:
      - id: Global.Color
        name: Color
        isExternal: true
    isDefinition: true
  Global.TerribleHealthBarScript.SetPlayer*:
    name:
      CSharp:
      - id: Global.TerribleHealthBarScript.SetPlayer*
        name: SetPlayer
      VB:
      - id: Global.TerribleHealthBarScript.SetPlayer*
        name: SetPlayer
    nameWithType:
      CSharp:
      - id: Global.TerribleHealthBarScript*
        name: TerribleHealthBarScript
      - name: .
      - id: Global.TerribleHealthBarScript.SetPlayer*
        name: SetPlayer
      VB:
      - id: Global.TerribleHealthBarScript*
        name: TerribleHealthBarScript
      - name: .
      - id: Global.TerribleHealthBarScript.SetPlayer*
        name: SetPlayer
    qualifiedName:
      CSharp:
      - id: Global.TerribleHealthBarScript*
        name: TerribleHealthBarScript
      - name: .
      - id: Global.TerribleHealthBarScript.SetPlayer*
        name: SetPlayer
      VB:
      - id: Global.TerribleHealthBarScript*
        name: TerribleHealthBarScript
      - name: .
      - id: Global.TerribleHealthBarScript.SetPlayer*
        name: SetPlayer
    isDefinition: true
    commentId: Overload:Global.TerribleHealthBarScript.SetPlayer
  Global.TerribleHealthBarScript:
    name:
      CSharp:
      - id: Global.TerribleHealthBarScript
        name: TerribleHealthBarScript
      VB:
      - id: Global.TerribleHealthBarScript
        name: TerribleHealthBarScript
    nameWithType:
      CSharp:
      - id: Global.TerribleHealthBarScript
        name: TerribleHealthBarScript
      VB:
      - id: Global.TerribleHealthBarScript
        name: TerribleHealthBarScript
    qualifiedName:
      CSharp:
      - id: Global.TerribleHealthBarScript
        name: TerribleHealthBarScript
      VB:
      - id: Global.TerribleHealthBarScript
        name: TerribleHealthBarScript
    isDefinition: true
    commentId: T:Global.TerribleHealthBarScript
  Global.LeaderboardManager:
    name:
      CSharp:
      - id: Global.LeaderboardManager
        name: LeaderboardManager
      VB:
      - id: Global.LeaderboardManager
        name: LeaderboardManager
    nameWithType:
      CSharp:
      - id: Global.LeaderboardManager
        name: LeaderboardManager
      VB:
      - id: Global.LeaderboardManager
        name: LeaderboardManager
    qualifiedName:
      CSharp:
      - id: Global.LeaderboardManager
        name: LeaderboardManager
      VB:
      - id: Global.LeaderboardManager
        name: LeaderboardManager
    isDefinition: true
    commentId: T:Global.LeaderboardManager
  Global.LeaderboardManager.Instance*:
    name:
      CSharp:
      - id: Global.LeaderboardManager.Instance*
        name: Instance
      VB:
      - id: Global.LeaderboardManager.Instance*
        name: Instance
    nameWithType:
      CSharp:
      - id: Global.LeaderboardManager*
        name: LeaderboardManager
      - name: .
      - id: Global.LeaderboardManager.Instance*
        name: Instance
      VB:
      - id: Global.LeaderboardManager*
        name: LeaderboardManager
      - name: .
      - id: Global.LeaderboardManager.Instance*
        name: Instance
    qualifiedName:
      CSharp:
      - id: Global.LeaderboardManager*
        name: LeaderboardManager
      - name: .
      - id: Global.LeaderboardManager.Instance*
        name: Instance
      VB:
      - id: Global.LeaderboardManager*
        name: LeaderboardManager
      - name: .
      - id: Global.LeaderboardManager.Instance*
        name: Instance
    isDefinition: true
    commentId: Overload:Global.LeaderboardManager.Instance
  Global.LeaderboardManager.UpdateLeaderboard*:
    name:
      CSharp:
      - id: Global.LeaderboardManager.UpdateLeaderboard*
        name: UpdateLeaderboard
      VB:
      - id: Global.LeaderboardManager.UpdateLeaderboard*
        name: UpdateLeaderboard
    nameWithType:
      CSharp:
      - id: Global.LeaderboardManager*
        name: LeaderboardManager
      - name: .
      - id: Global.LeaderboardManager.UpdateLeaderboard*
        name: UpdateLeaderboard
      VB:
      - id: Global.LeaderboardManager*
        name: LeaderboardManager
      - name: .
      - id: Global.LeaderboardManager.UpdateLeaderboard*
        name: UpdateLeaderboard
    qualifiedName:
      CSharp:
      - id: Global.LeaderboardManager*
        name: LeaderboardManager
      - name: .
      - id: Global.LeaderboardManager.UpdateLeaderboard*
        name: UpdateLeaderboard
      VB:
      - id: Global.LeaderboardManager*
        name: LeaderboardManager
      - name: .
      - id: Global.LeaderboardManager.UpdateLeaderboard*
        name: UpdateLeaderboard
    isDefinition: true
    commentId: Overload:Global.LeaderboardManager.UpdateLeaderboard
  Global.LeaderboardManager.UpdatePlayerHoldTimeText*:
    name:
      CSharp:
      - id: Global.LeaderboardManager.UpdatePlayerHoldTimeText*
        name: UpdatePlayerHoldTimeText
      VB:
      - id: Global.LeaderboardManager.UpdatePlayerHoldTimeText*
        name: UpdatePlayerHoldTimeText
    nameWithType:
      CSharp:
      - id: Global.LeaderboardManager*
        name: LeaderboardManager
      - name: .
      - id: Global.LeaderboardManager.UpdatePlayerHoldTimeText*
        name: UpdatePlayerHoldTimeText
      VB:
      - id: Global.LeaderboardManager*
        name: LeaderboardManager
      - name: .
      - id: Global.LeaderboardManager.UpdatePlayerHoldTimeText*
        name: UpdatePlayerHoldTimeText
    qualifiedName:
      CSharp:
      - id: Global.LeaderboardManager*
        name: LeaderboardManager
      - name: .
      - id: Global.LeaderboardManager.UpdatePlayerHoldTimeText*
        name: UpdatePlayerHoldTimeText
      VB:
      - id: Global.LeaderboardManager*
        name: LeaderboardManager
      - name: .
      - id: Global.LeaderboardManager.UpdatePlayerHoldTimeText*
        name: UpdatePlayerHoldTimeText
    isDefinition: true
    commentId: Overload:Global.LeaderboardManager.UpdatePlayerHoldTimeText
  System.Action`1:
    name:
      CSharp:
      - id: System.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: System.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    nameWithType:
      CSharp:
      - id: System.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: System.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Action`1
        name: Action
        isExternal: true
      - name: <
      - name: T
      - name: '>'
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - name: T
      - name: )
    isDefinition: true
    commentId: T:System.Action`1
  System.Action{GameObject}:
    name:
      CSharp:
      - id: System.Action`1
        name: Action
        isExternal: true
      - name: <
      - id: Global.GameObject
        name: GameObject
        isExternal: true
      - name: '>'
      VB:
      - id: System.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.GameObject
        name: GameObject
        isExternal: true
      - name: )
    nameWithType:
      CSharp:
      - id: System.Action`1
        name: Action
        isExternal: true
      - name: <
      - id: Global.GameObject
        name: GameObject
        isExternal: true
      - name: '>'
      VB:
      - id: System.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.GameObject
        name: GameObject
        isExternal: true
      - name: )
    qualifiedName:
      CSharp:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Action`1
        name: Action
        isExternal: true
      - name: <
      - id: Global.GameObject
        name: GameObject
        isExternal: true
      - name: '>'
      VB:
      - id: System
        name: System
        isExternal: true
      - name: .
      - id: System.Action`1
        name: Action
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.GameObject
        name: GameObject
        isExternal: true
      - name: )
    isDefinition: false
    definition: System.Action`1
    parent: System
    commentId: T:System.Action{GameObject}
  Global.Damageable.Damage*:
    name:
      CSharp:
      - id: Global.Damageable.Damage*
        name: Damage
      VB:
      - id: Global.Damageable.Damage*
        name: Damage
    nameWithType:
      CSharp:
      - id: Global.Damageable*
        name: Damageable
      - name: .
      - id: Global.Damageable.Damage*
        name: Damage
      VB:
      - id: Global.Damageable*
        name: Damageable
      - name: .
      - id: Global.Damageable.Damage*
        name: Damage
    qualifiedName:
      CSharp:
      - id: Global.Damageable*
        name: Damageable
      - name: .
      - id: Global.Damageable.Damage*
        name: Damage
      VB:
      - id: Global.Damageable*
        name: Damageable
      - name: .
      - id: Global.Damageable.Damage*
        name: Damage
    isDefinition: true
    commentId: Overload:Global.Damageable.Damage
  Global.Damageable.HandleDeath*:
    name:
      CSharp:
      - id: Global.Damageable.HandleDeath*
        name: HandleDeath
      VB:
      - id: Global.Damageable.HandleDeath*
        name: HandleDeath
    nameWithType:
      CSharp:
      - id: Global.Damageable*
        name: Damageable
      - name: .
      - id: Global.Damageable.HandleDeath*
        name: HandleDeath
      VB:
      - id: Global.Damageable*
        name: Damageable
      - name: .
      - id: Global.Damageable.HandleDeath*
        name: HandleDeath
    qualifiedName:
      CSharp:
      - id: Global.Damageable*
        name: Damageable
      - name: .
      - id: Global.Damageable.HandleDeath*
        name: HandleDeath
      VB:
      - id: Global.Damageable*
        name: Damageable
      - name: .
      - id: Global.Damageable.HandleDeath*
        name: HandleDeath
    isDefinition: true
    commentId: Overload:Global.Damageable.HandleDeath
  Global.Damageable.Respawn*:
    name:
      CSharp:
      - id: Global.Damageable.Respawn*
        name: Respawn
      VB:
      - id: Global.Damageable.Respawn*
        name: Respawn
    nameWithType:
      CSharp:
      - id: Global.Damageable*
        name: Damageable
      - name: .
      - id: Global.Damageable.Respawn*
        name: Respawn
      VB:
      - id: Global.Damageable*
        name: Damageable
      - name: .
      - id: Global.Damageable.Respawn*
        name: Respawn
    qualifiedName:
      CSharp:
      - id: Global.Damageable*
        name: Damageable
      - name: .
      - id: Global.Damageable.Respawn*
        name: Respawn
      VB:
      - id: Global.Damageable*
        name: Damageable
      - name: .
      - id: Global.Damageable.Respawn*
        name: Respawn
    isDefinition: true
    commentId: Overload:Global.Damageable.Respawn
  Global.Damageable.ResetDamage*:
    name:
      CSharp:
      - id: Global.Damageable.ResetDamage*
        name: ResetDamage
      VB:
      - id: Global.Damageable.ResetDamage*
        name: ResetDamage
    nameWithType:
      CSharp:
      - id: Global.Damageable*
        name: Damageable
      - name: .
      - id: Global.Damageable.ResetDamage*
        name: ResetDamage
      VB:
      - id: Global.Damageable*
        name: Damageable
      - name: .
      - id: Global.Damageable.ResetDamage*
        name: ResetDamage
    qualifiedName:
      CSharp:
      - id: Global.Damageable*
        name: Damageable
      - name: .
      - id: Global.Damageable.ResetDamage*
        name: ResetDamage
      VB:
      - id: Global.Damageable*
        name: Damageable
      - name: .
      - id: Global.Damageable.ResetDamage*
        name: ResetDamage
    isDefinition: true
    commentId: Overload:Global.Damageable.ResetDamage
  Global.Punch.EnableHurtbox*:
    name:
      CSharp:
      - id: Global.Punch.EnableHurtbox*
        name: EnableHurtbox
      VB:
      - id: Global.Punch.EnableHurtbox*
        name: EnableHurtbox
    nameWithType:
      CSharp:
      - id: Global.Punch*
        name: Punch
      - name: .
      - id: Global.Punch.EnableHurtbox*
        name: EnableHurtbox
      VB:
      - id: Global.Punch*
        name: Punch
      - name: .
      - id: Global.Punch.EnableHurtbox*
        name: EnableHurtbox
    qualifiedName:
      CSharp:
      - id: Global.Punch*
        name: Punch
      - name: .
      - id: Global.Punch.EnableHurtbox*
        name: EnableHurtbox
      VB:
      - id: Global.Punch*
        name: Punch
      - name: .
      - id: Global.Punch.EnableHurtbox*
        name: EnableHurtbox
    isDefinition: true
    commentId: Overload:Global.Punch.EnableHurtbox
  Global.Punch.DisableHurtbox*:
    name:
      CSharp:
      - id: Global.Punch.DisableHurtbox*
        name: DisableHurtbox
      VB:
      - id: Global.Punch.DisableHurtbox*
        name: DisableHurtbox
    nameWithType:
      CSharp:
      - id: Global.Punch*
        name: Punch
      - name: .
      - id: Global.Punch.DisableHurtbox*
        name: DisableHurtbox
      VB:
      - id: Global.Punch*
        name: Punch
      - name: .
      - id: Global.Punch.DisableHurtbox*
        name: DisableHurtbox
    qualifiedName:
      CSharp:
      - id: Global.Punch*
        name: Punch
      - name: .
      - id: Global.Punch.DisableHurtbox*
        name: DisableHurtbox
      VB:
      - id: Global.Punch*
        name: Punch
      - name: .
      - id: Global.Punch.DisableHurtbox*
        name: DisableHurtbox
    isDefinition: true
    commentId: Overload:Global.Punch.DisableHurtbox
  Global.Punch.DisableCancellation*:
    name:
      CSharp:
      - id: Global.Punch.DisableCancellation*
        name: DisableCancellation
      VB:
      - id: Global.Punch.DisableCancellation*
        name: DisableCancellation
    nameWithType:
      CSharp:
      - id: Global.Punch*
        name: Punch
      - name: .
      - id: Global.Punch.DisableCancellation*
        name: DisableCancellation
      VB:
      - id: Global.Punch*
        name: Punch
      - name: .
      - id: Global.Punch.DisableCancellation*
        name: DisableCancellation
    qualifiedName:
      CSharp:
      - id: Global.Punch*
        name: Punch
      - name: .
      - id: Global.Punch.DisableCancellation*
        name: DisableCancellation
      VB:
      - id: Global.Punch*
        name: Punch
      - name: .
      - id: Global.Punch.DisableCancellation*
        name: DisableCancellation
    isDefinition: true
    commentId: Overload:Global.Punch.DisableCancellation
  Global.Punch.EnableCancellation*:
    name:
      CSharp:
      - id: Global.Punch.EnableCancellation*
        name: EnableCancellation
      VB:
      - id: Global.Punch.EnableCancellation*
        name: EnableCancellation
    nameWithType:
      CSharp:
      - id: Global.Punch*
        name: Punch
      - name: .
      - id: Global.Punch.EnableCancellation*
        name: EnableCancellation
      VB:
      - id: Global.Punch*
        name: Punch
      - name: .
      - id: Global.Punch.EnableCancellation*
        name: EnableCancellation
    qualifiedName:
      CSharp:
      - id: Global.Punch*
        name: Punch
      - name: .
      - id: Global.Punch.EnableCancellation*
        name: EnableCancellation
      VB:
      - id: Global.Punch*
        name: Punch
      - name: .
      - id: Global.Punch.EnableCancellation*
        name: EnableCancellation
    isDefinition: true
    commentId: Overload:Global.Punch.EnableCancellation
  Global.Punch.ReturnToMaxSpeed*:
    name:
      CSharp:
      - id: Global.Punch.ReturnToMaxSpeed*
        name: ReturnToMaxSpeed
      VB:
      - id: Global.Punch.ReturnToMaxSpeed*
        name: ReturnToMaxSpeed
    nameWithType:
      CSharp:
      - id: Global.Punch*
        name: Punch
      - name: .
      - id: Global.Punch.ReturnToMaxSpeed*
        name: ReturnToMaxSpeed
      VB:
      - id: Global.Punch*
        name: Punch
      - name: .
      - id: Global.Punch.ReturnToMaxSpeed*
        name: ReturnToMaxSpeed
    qualifiedName:
      CSharp:
      - id: Global.Punch*
        name: Punch
      - name: .
      - id: Global.Punch.ReturnToMaxSpeed*
        name: ReturnToMaxSpeed
      VB:
      - id: Global.Punch*
        name: Punch
      - name: .
      - id: Global.Punch.ReturnToMaxSpeed*
        name: ReturnToMaxSpeed
    isDefinition: true
    commentId: Overload:Global.Punch.ReturnToMaxSpeed
  Global.Punch:
    name:
      CSharp:
      - id: Global.Punch
        name: Punch
      VB:
      - id: Global.Punch
        name: Punch
    nameWithType:
      CSharp:
      - id: Global.Punch
        name: Punch
      VB:
      - id: Global.Punch
        name: Punch
    qualifiedName:
      CSharp:
      - id: Global.Punch
        name: Punch
      VB:
      - id: Global.Punch
        name: Punch
    isDefinition: true
    commentId: T:Global.Punch
  Global.TeleportPlatform:
    name:
      CSharp:
      - id: Global.TeleportPlatform
        name: TeleportPlatform
      VB:
      - id: Global.TeleportPlatform
        name: TeleportPlatform
    nameWithType:
      CSharp:
      - id: Global.TeleportPlatform
        name: TeleportPlatform
      VB:
      - id: Global.TeleportPlatform
        name: TeleportPlatform
    qualifiedName:
      CSharp:
      - id: Global.TeleportPlatform
        name: TeleportPlatform
      VB:
      - id: Global.TeleportPlatform
        name: TeleportPlatform
    isDefinition: true
    commentId: T:Global.TeleportPlatform
  Global.PlayerManager:
    name:
      CSharp:
      - id: Global.PlayerManager
        name: PlayerManager
      VB:
      - id: Global.PlayerManager
        name: PlayerManager
    nameWithType:
      CSharp:
      - id: Global.PlayerManager
        name: PlayerManager
      VB:
      - id: Global.PlayerManager
        name: PlayerManager
    qualifiedName:
      CSharp:
      - id: Global.PlayerManager
        name: PlayerManager
      VB:
      - id: Global.PlayerManager
        name: PlayerManager
    isDefinition: true
    commentId: T:Global.PlayerManager
  Global.List{PlayerJoinCard}:
    name:
      CSharp:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.PlayerJoinCard
        name: PlayerJoinCard
      - name: '>'
      VB:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.PlayerJoinCard
        name: PlayerJoinCard
      - name: )
    nameWithType:
      CSharp:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.PlayerJoinCard
        name: PlayerJoinCard
      - name: '>'
      VB:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.PlayerJoinCard
        name: PlayerJoinCard
      - name: )
    qualifiedName:
      CSharp:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: <
      - id: Global.PlayerJoinCard
        name: PlayerJoinCard
      - name: '>'
      VB:
      - id: Global.List`1
        name: List
        isExternal: true
      - name: (
      - name: Of
      - name: " "
      - id: Global.PlayerJoinCard
        name: PlayerJoinCard
      - name: )
    isDefinition: false
    definition: Global.List`1
    commentId: '!:Global.List{PlayerJoinCard}'
  Global.PlayerManager.StartGame*:
    name:
      CSharp:
      - id: Global.PlayerManager.StartGame*
        name: StartGame
      VB:
      - id: Global.PlayerManager.StartGame*
        name: StartGame
    nameWithType:
      CSharp:
      - id: Global.PlayerManager*
        name: PlayerManager
      - name: .
      - id: Global.PlayerManager.StartGame*
        name: StartGame
      VB:
      - id: Global.PlayerManager*
        name: PlayerManager
      - name: .
      - id: Global.PlayerManager.StartGame*
        name: StartGame
    qualifiedName:
      CSharp:
      - id: Global.PlayerManager*
        name: PlayerManager
      - name: .
      - id: Global.PlayerManager.StartGame*
        name: StartGame
      VB:
      - id: Global.PlayerManager*
        name: PlayerManager
      - name: .
      - id: Global.PlayerManager.StartGame*
        name: StartGame
    isDefinition: true
    commentId: Overload:Global.PlayerManager.StartGame
  Global.AnimationPlayer.AnimationState:
    name:
      CSharp:
      - id: Global.AnimationPlayer
        name: AnimationPlayer
      - name: .
      - id: Global.AnimationPlayer.AnimationState
        name: AnimationState
      VB:
      - id: Global.AnimationPlayer
        name: AnimationPlayer
      - name: .
      - id: Global.AnimationPlayer.AnimationState
        name: AnimationState
    nameWithType:
      CSharp:
      - id: Global.AnimationPlayer
        name: AnimationPlayer
      - name: .
      - id: Global.AnimationPlayer.AnimationState
        name: AnimationState
      VB:
      - id: Global.AnimationPlayer
        name: AnimationPlayer
      - name: .
      - id: Global.AnimationPlayer.AnimationState
        name: AnimationState
    qualifiedName:
      CSharp:
      - id: Global.AnimationPlayer
        name: AnimationPlayer
      - name: .
      - id: Global.AnimationPlayer.AnimationState
        name: AnimationState
      VB:
      - id: Global.AnimationPlayer
        name: AnimationPlayer
      - name: .
      - id: Global.AnimationPlayer.AnimationState
        name: AnimationState
    isDefinition: true
    commentId: T:Global.AnimationPlayer.AnimationState
  Global.AnimationClip:
    name:
      CSharp:
      - id: Global.AnimationClip
        name: AnimationClip
        isExternal: true
      VB:
      - id: Global.AnimationClip
        name: AnimationClip
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.AnimationClip
        name: AnimationClip
        isExternal: true
      VB:
      - id: Global.AnimationClip
        name: AnimationClip
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.AnimationClip
        name: AnimationClip
        isExternal: true
      VB:
      - id: Global.AnimationClip
        name: AnimationClip
        isExternal: true
    isDefinition: true
    commentId: '!:Global.AnimationClip'
  Global.AnimationPlayer.SetState*:
    name:
      CSharp:
      - id: Global.AnimationPlayer.SetState*
        name: SetState
      VB:
      - id: Global.AnimationPlayer.SetState*
        name: SetState
    nameWithType:
      CSharp:
      - id: Global.AnimationPlayer*
        name: AnimationPlayer
      - name: .
      - id: Global.AnimationPlayer.SetState*
        name: SetState
      VB:
      - id: Global.AnimationPlayer*
        name: AnimationPlayer
      - name: .
      - id: Global.AnimationPlayer.SetState*
        name: SetState
    qualifiedName:
      CSharp:
      - id: Global.AnimationPlayer*
        name: AnimationPlayer
      - name: .
      - id: Global.AnimationPlayer.SetState*
        name: SetState
      VB:
      - id: Global.AnimationPlayer*
        name: AnimationPlayer
      - name: .
      - id: Global.AnimationPlayer.SetState*
        name: SetState
    isDefinition: true
    commentId: Overload:Global.AnimationPlayer.SetState
  Global.AnimationPlayer.Punch*:
    name:
      CSharp:
      - id: Global.AnimationPlayer.Punch*
        name: Punch
      VB:
      - id: Global.AnimationPlayer.Punch*
        name: Punch
    nameWithType:
      CSharp:
      - id: Global.AnimationPlayer*
        name: AnimationPlayer
      - name: .
      - id: Global.AnimationPlayer.Punch*
        name: Punch
      VB:
      - id: Global.AnimationPlayer*
        name: AnimationPlayer
      - name: .
      - id: Global.AnimationPlayer.Punch*
        name: Punch
    qualifiedName:
      CSharp:
      - id: Global.AnimationPlayer*
        name: AnimationPlayer
      - name: .
      - id: Global.AnimationPlayer.Punch*
        name: Punch
      VB:
      - id: Global.AnimationPlayer*
        name: AnimationPlayer
      - name: .
      - id: Global.AnimationPlayer.Punch*
        name: Punch
    isDefinition: true
    commentId: Overload:Global.AnimationPlayer.Punch
  Global.AnimationPlayer:
    name:
      CSharp:
      - id: Global.AnimationPlayer
        name: AnimationPlayer
      VB:
      - id: Global.AnimationPlayer
        name: AnimationPlayer
    nameWithType:
      CSharp:
      - id: Global.AnimationPlayer
        name: AnimationPlayer
      VB:
      - id: Global.AnimationPlayer
        name: AnimationPlayer
    qualifiedName:
      CSharp:
      - id: Global.AnimationPlayer
        name: AnimationPlayer
      VB:
      - id: Global.AnimationPlayer
        name: AnimationPlayer
    isDefinition: true
    commentId: T:Global.AnimationPlayer
  Global.Block.IsParrying*:
    name:
      CSharp:
      - id: Global.Block.IsParrying*
        name: IsParrying
      VB:
      - id: Global.Block.IsParrying*
        name: IsParrying
    nameWithType:
      CSharp:
      - id: Global.Block*
        name: Block
      - name: .
      - id: Global.Block.IsParrying*
        name: IsParrying
      VB:
      - id: Global.Block*
        name: Block
      - name: .
      - id: Global.Block.IsParrying*
        name: IsParrying
    qualifiedName:
      CSharp:
      - id: Global.Block*
        name: Block
      - name: .
      - id: Global.Block.IsParrying*
        name: IsParrying
      VB:
      - id: Global.Block*
        name: Block
      - name: .
      - id: Global.Block.IsParrying*
        name: IsParrying
    isDefinition: true
    commentId: Overload:Global.Block.IsParrying
  Global.Block:
    name:
      CSharp:
      - id: Global.Block
        name: Block
      VB:
      - id: Global.Block
        name: Block
    nameWithType:
      CSharp:
      - id: Global.Block
        name: Block
      VB:
      - id: Global.Block
        name: Block
    qualifiedName:
      CSharp:
      - id: Global.Block
        name: Block
      VB:
      - id: Global.Block
        name: Block
    isDefinition: true
    commentId: T:Global.Block
  Global.LayerMask:
    name:
      CSharp:
      - id: Global.LayerMask
        name: LayerMask
        isExternal: true
      VB:
      - id: Global.LayerMask
        name: LayerMask
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.LayerMask
        name: LayerMask
        isExternal: true
      VB:
      - id: Global.LayerMask
        name: LayerMask
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.LayerMask
        name: LayerMask
        isExternal: true
      VB:
      - id: Global.LayerMask
        name: LayerMask
        isExternal: true
    isDefinition: true
    commentId: '!:Global.LayerMask'
  Global.PlayerMovement.IsBasicallyGrounded*:
    name:
      CSharp:
      - id: Global.PlayerMovement.IsBasicallyGrounded*
        name: IsBasicallyGrounded
      VB:
      - id: Global.PlayerMovement.IsBasicallyGrounded*
        name: IsBasicallyGrounded
    nameWithType:
      CSharp:
      - id: Global.PlayerMovement*
        name: PlayerMovement
      - name: .
      - id: Global.PlayerMovement.IsBasicallyGrounded*
        name: IsBasicallyGrounded
      VB:
      - id: Global.PlayerMovement*
        name: PlayerMovement
      - name: .
      - id: Global.PlayerMovement.IsBasicallyGrounded*
        name: IsBasicallyGrounded
    qualifiedName:
      CSharp:
      - id: Global.PlayerMovement*
        name: PlayerMovement
      - name: .
      - id: Global.PlayerMovement.IsBasicallyGrounded*
        name: IsBasicallyGrounded
      VB:
      - id: Global.PlayerMovement*
        name: PlayerMovement
      - name: .
      - id: Global.PlayerMovement.IsBasicallyGrounded*
        name: IsBasicallyGrounded
    isDefinition: true
    commentId: Overload:Global.PlayerMovement.IsBasicallyGrounded
  Global.PlayerMovement.IsPhysicallyGrounded*:
    name:
      CSharp:
      - id: Global.PlayerMovement.IsPhysicallyGrounded*
        name: IsPhysicallyGrounded
      VB:
      - id: Global.PlayerMovement.IsPhysicallyGrounded*
        name: IsPhysicallyGrounded
    nameWithType:
      CSharp:
      - id: Global.PlayerMovement*
        name: PlayerMovement
      - name: .
      - id: Global.PlayerMovement.IsPhysicallyGrounded*
        name: IsPhysicallyGrounded
      VB:
      - id: Global.PlayerMovement*
        name: PlayerMovement
      - name: .
      - id: Global.PlayerMovement.IsPhysicallyGrounded*
        name: IsPhysicallyGrounded
    qualifiedName:
      CSharp:
      - id: Global.PlayerMovement*
        name: PlayerMovement
      - name: .
      - id: Global.PlayerMovement.IsPhysicallyGrounded*
        name: IsPhysicallyGrounded
      VB:
      - id: Global.PlayerMovement*
        name: PlayerMovement
      - name: .
      - id: Global.PlayerMovement.IsPhysicallyGrounded*
        name: IsPhysicallyGrounded
    isDefinition: true
    commentId: Overload:Global.PlayerMovement.IsPhysicallyGrounded
  Global.BoxCollider2D:
    name:
      CSharp:
      - id: Global.BoxCollider2D
        name: BoxCollider2D
        isExternal: true
      VB:
      - id: Global.BoxCollider2D
        name: BoxCollider2D
        isExternal: true
    nameWithType:
      CSharp:
      - id: Global.BoxCollider2D
        name: BoxCollider2D
        isExternal: true
      VB:
      - id: Global.BoxCollider2D
        name: BoxCollider2D
        isExternal: true
    qualifiedName:
      CSharp:
      - id: Global.BoxCollider2D
        name: BoxCollider2D
        isExternal: true
      VB:
      - id: Global.BoxCollider2D
        name: BoxCollider2D
        isExternal: true
    isDefinition: true
    commentId: '!:Global.BoxCollider2D'
  Global.PlayerMovement.GetPointInBoxCollider*:
    name:
      CSharp:
      - id: Global.PlayerMovement.GetPointInBoxCollider*
        name: GetPointInBoxCollider
      VB:
      - id: Global.PlayerMovement.GetPointInBoxCollider*
        name: GetPointInBoxCollider
    nameWithType:
      CSharp:
      - id: Global.PlayerMovement*
        name: PlayerMovement
      - name: .
      - id: Global.PlayerMovement.GetPointInBoxCollider*
        name: GetPointInBoxCollider
      VB:
      - id: Global.PlayerMovement*
        name: PlayerMovement
      - name: .
      - id: Global.PlayerMovement.GetPointInBoxCollider*
        name: GetPointInBoxCollider
    qualifiedName:
      CSharp:
      - id: Global.PlayerMovement*
        name: PlayerMovement
      - name: .
      - id: Global.PlayerMovement.GetPointInBoxCollider*
        name: GetPointInBoxCollider
      VB:
      - id: Global.PlayerMovement*
        name: PlayerMovement
      - name: .
      - id: Global.PlayerMovement.GetPointInBoxCollider*
        name: GetPointInBoxCollider
    isDefinition: true
    commentId: Overload:Global.PlayerMovement.GetPointInBoxCollider
  Global.PlayerMovement.StopVelocity*:
    name:
      CSharp:
      - id: Global.PlayerMovement.StopVelocity*
        name: StopVelocity
      VB:
      - id: Global.PlayerMovement.StopVelocity*
        name: StopVelocity
    nameWithType:
      CSharp:
      - id: Global.PlayerMovement*
        name: PlayerMovement
      - name: .
      - id: Global.PlayerMovement.StopVelocity*
        name: StopVelocity
      VB:
      - id: Global.PlayerMovement*
        name: PlayerMovement
      - name: .
      - id: Global.PlayerMovement.StopVelocity*
        name: StopVelocity
    qualifiedName:
      CSharp:
      - id: Global.PlayerMovement*
        name: PlayerMovement
      - name: .
      - id: Global.PlayerMovement.StopVelocity*
        name: StopVelocity
      VB:
      - id: Global.PlayerMovement*
        name: PlayerMovement
      - name: .
      - id: Global.PlayerMovement.StopVelocity*
        name: StopVelocity
    isDefinition: true
    commentId: Overload:Global.PlayerMovement.StopVelocity
  Global.PlayerMovement:
    name:
      CSharp:
      - id: Global.PlayerMovement
        name: PlayerMovement
      VB:
      - id: Global.PlayerMovement
        name: PlayerMovement
    nameWithType:
      CSharp:
      - id: Global.PlayerMovement
        name: PlayerMovement
      VB:
      - id: Global.PlayerMovement
        name: PlayerMovement
    qualifiedName:
      CSharp:
      - id: Global.PlayerMovement
        name: PlayerMovement
      VB:
      - id: Global.PlayerMovement
        name: PlayerMovement
    isDefinition: true
    commentId: T:Global.PlayerMovement
  Global.UseItem.PickUpItem*:
    name:
      CSharp:
      - id: Global.UseItem.PickUpItem*
        name: PickUpItem
      VB:
      - id: Global.UseItem.PickUpItem*
        name: PickUpItem
    nameWithType:
      CSharp:
      - id: Global.UseItem*
        name: UseItem
      - name: .
      - id: Global.UseItem.PickUpItem*
        name: PickUpItem
      VB:
      - id: Global.UseItem*
        name: UseItem
      - name: .
      - id: Global.UseItem.PickUpItem*
        name: PickUpItem
    qualifiedName:
      CSharp:
      - id: Global.UseItem*
        name: UseItem
      - name: .
      - id: Global.UseItem.PickUpItem*
        name: PickUpItem
      VB:
      - id: Global.UseItem*
        name: UseItem
      - name: .
      - id: Global.UseItem.PickUpItem*
        name: PickUpItem
    isDefinition: true
    commentId: Overload:Global.UseItem.PickUpItem
  Global.UseItem.DropItem*:
    name:
      CSharp:
      - id: Global.UseItem.DropItem*
        name: DropItem
      VB:
      - id: Global.UseItem.DropItem*
        name: DropItem
    nameWithType:
      CSharp:
      - id: Global.UseItem*
        name: UseItem
      - name: .
      - id: Global.UseItem.DropItem*
        name: DropItem
      VB:
      - id: Global.UseItem*
        name: UseItem
      - name: .
      - id: Global.UseItem.DropItem*
        name: DropItem
    qualifiedName:
      CSharp:
      - id: Global.UseItem*
        name: UseItem
      - name: .
      - id: Global.UseItem.DropItem*
        name: DropItem
      VB:
      - id: Global.UseItem*
        name: UseItem
      - name: .
      - id: Global.UseItem.DropItem*
        name: DropItem
    isDefinition: true
    commentId: Overload:Global.UseItem.DropItem
  Global.UseItem.IsHoldingItem*:
    name:
      CSharp:
      - id: Global.UseItem.IsHoldingItem*
        name: IsHoldingItem
      VB:
      - id: Global.UseItem.IsHoldingItem*
        name: IsHoldingItem
    nameWithType:
      CSharp:
      - id: Global.UseItem*
        name: UseItem
      - name: .
      - id: Global.UseItem.IsHoldingItem*
        name: IsHoldingItem
      VB:
      - id: Global.UseItem*
        name: UseItem
      - name: .
      - id: Global.UseItem.IsHoldingItem*
        name: IsHoldingItem
    qualifiedName:
      CSharp:
      - id: Global.UseItem*
        name: UseItem
      - name: .
      - id: Global.UseItem.IsHoldingItem*
        name: IsHoldingItem
      VB:
      - id: Global.UseItem*
        name: UseItem
      - name: .
      - id: Global.UseItem.IsHoldingItem*
        name: IsHoldingItem
    isDefinition: true
    commentId: Overload:Global.UseItem.IsHoldingItem
  Global.UseItem:
    name:
      CSharp:
      - id: Global.UseItem
        name: UseItem
      VB:
      - id: Global.UseItem
        name: UseItem
    nameWithType:
      CSharp:
      - id: Global.UseItem
        name: UseItem
      VB:
      - id: Global.UseItem
        name: UseItem
    qualifiedName:
      CSharp:
      - id: Global.UseItem
        name: UseItem
      VB:
      - id: Global.UseItem
        name: UseItem
    isDefinition: true
    commentId: T:Global.UseItem
  Global.PlayerCameraMovement.WinScene*:
    name:
      CSharp:
      - id: Global.PlayerCameraMovement.WinScene*
        name: WinScene
      VB:
      - id: Global.PlayerCameraMovement.WinScene*
        name: WinScene
    nameWithType:
      CSharp:
      - id: Global.PlayerCameraMovement*
        name: PlayerCameraMovement
      - name: .
      - id: Global.PlayerCameraMovement.WinScene*
        name: WinScene
      VB:
      - id: Global.PlayerCameraMovement*
        name: PlayerCameraMovement
      - name: .
      - id: Global.PlayerCameraMovement.WinScene*
        name: WinScene
    qualifiedName:
      CSharp:
      - id: Global.PlayerCameraMovement*
        name: PlayerCameraMovement
      - name: .
      - id: Global.PlayerCameraMovement.WinScene*
        name: WinScene
      VB:
      - id: Global.PlayerCameraMovement*
        name: PlayerCameraMovement
      - name: .
      - id: Global.PlayerCameraMovement.WinScene*
        name: WinScene
    isDefinition: true
    commentId: Overload:Global.PlayerCameraMovement.WinScene
  Global.PlayerCameraMovement:
    name:
      CSharp:
      - id: Global.PlayerCameraMovement
        name: PlayerCameraMovement
      VB:
      - id: Global.PlayerCameraMovement
        name: PlayerCameraMovement
    nameWithType:
      CSharp:
      - id: Global.PlayerCameraMovement
        name: PlayerCameraMovement
      VB:
      - id: Global.PlayerCameraMovement
        name: PlayerCameraMovement
    qualifiedName:
      CSharp:
      - id: Global.PlayerCameraMovement
        name: PlayerCameraMovement
      VB:
      - id: Global.PlayerCameraMovement
        name: PlayerCameraMovement
    isDefinition: true
    commentId: T:Global.PlayerCameraMovement
  Global.Trevor:
    name:
      CSharp:
      - id: Global.Trevor
        name: Trevor
      VB:
      - id: Global.Trevor
        name: Trevor
    nameWithType:
      CSharp:
      - id: Global.Trevor
        name: Trevor
      VB:
      - id: Global.Trevor
        name: Trevor
    qualifiedName:
      CSharp:
      - id: Global.Trevor
        name: Trevor
      VB:
      - id: Global.Trevor
        name: Trevor
    isDefinition: true
    commentId: T:Global.Trevor
  Global:
    name:
      CSharp: []
      VB: []
    nameWithType:
      CSharp: []
      VB: []
    qualifiedName:
      CSharp: []
      VB: []
    isDefinition: true
